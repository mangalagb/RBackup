> testout<-data.frame(X1=rnorm(50,mean=50,sd=10),X2=rnorm(50,mean=5,sd=1.5),Y=rnorm(50,mean=200,sd=25))
> #Taint the Data
> testout$X1[10]<-5
> testout$X2[10]<-5
> testout$Y[10]<-530

> testout
         X1         X2        Y
1  44.20043  1.5259458 169.3296
2  40.46721  5.8437076 200.9038
3  48.20571  3.8243373 189.4652
4  60.09808  4.6609190 177.5159
5  50.23627  2.6193455 210.4360
6  43.50972  5.8212863 203.8361
7  44.95626  7.8368405 236.5821
8  66.14391  3.6828843 171.9624
9  45.53040  4.8311616 187.0553
10  5.00000  5.0000000 530.0000
11 64.71719  6.4007245 164.8052
12 54.43665  7.8695891 192.8824
13 45.78278  4.9921489 182.2957
14 49.59998  4.7716099 146.3090
<snip>
48 26.55487  5.8082497 189.7901
49 45.28317  5.0219647 208.1318
50 44.84145  3.6252663 251.5620 > #Use Boxplot to Review the Data
> boxplot(testout$X1, ylab="X1")
> boxplot(testout$X2, ylab="X2")
> boxplot(testout$Y, ylab="Y") > #Use Outlier test to remove individual values
> testout$newX1<-ifelse(testout$X1==outlier(testout$X1),NA,testout$X1)
> testout
         X1         X2        Y    newX1
1  44.20043  1.5259458 169.3296 44.20043
2  40.46721  5.8437076 200.9038 40.46721
3  48.20571  3.8243373 189.4652 48.20571
4  60.09808  4.6609190 177.5159 60.09808
5  50.23627  2.6193455 210.4360 50.23627
6  43.50972  5.8212863 203.8361 43.50972
7  44.95626  7.8368405 236.5821 44.95626 
8  66.14391  3.6828843 171.9624 66.14391 
9  45.53040  4.8311616 187.0553 45.53040
10  5.00000  5.0000000 530.0000       NA 
11 64.71719  6.4007245 164.8052 64.71719 
12 54.43665  7.8695891 192.8824 54.43665 
13 45.78278  4.9921489 182.2957 45.78278 
14 49.59998  4.7716099 146.3090 49.59998 
15 45.07720  4.2355525 192.9041 45.07720 
16 62.27717  7.1518606 186.6482 62.27717 
17 48.50446  3.0712422 228.3253 48.50446 
18 65.49983  5.4609713 184.8983 65.49983 
19 44.38387  4.9305222 213.9378 44.38387 
20 43.52883  8.3777627 203.5657 43.52883 
<snip>
49 45.28317  5.0219647 208.1318 45.28317 
50 44.84145  3.6252663 251.5620 44.84145 > #Alternative approach using Lund Test
> lundcrit<-function(a, n, q) {
+ # Calculates a Critical value for Outlier Test according to Lund
+ # See Lund, R. E. 1975, "Tables for An Approximate Test for Outliers in Linear Models", Technometrics, vol. 17, no. 4, pp. 473-476.
+ # and Prescott, P. 1975, "An Approximate Test for Outliers in Linear Models", Technometrics, vol. 17, no. 1, pp. 129-132.
+ # a = alpha
+ # n = Number of data elements
+ # q = Number of independent Variables (including intercept)
+ F<-qf(c(1-(a/n)),df1=1,df2=n-q-1,lower.tail=TRUE)
+ crit<-((n-q)*F/(n-q-1+F))^0.5
+ crit
+ }

> testoutlm<-lm(Y~X1+X2,data=testout)

> testout$fitted<-fitted(testoutlm)

> testout$residual<-residuals(testoutlm)

> testout$standardresid<-rstandard(testoutlm)

> n<-nrow(testout)

> q<-length(testoutlm$coefficients)

> crit<-lundcrit(0.1,n,q)

> testout$Ynew<-ifelse(abs(testout$standardresid)>crit,NA,testout$Y)

> testout
         X1         X2        Y    newX1   fitted    residual standardresid
1  44.20043  1.5259458 169.3296 44.20043 209.8467 -40.5171222  -1.009507695
2  40.46721  5.8437076 200.9038 40.46721 231.9221 -31.0183107  -0.747624895
3  48.20571  3.8243373 189.4652 48.20571 203.4786 -14.0134646  -0.335955648
4  60.09808  4.6609190 177.5159 60.09808 169.6108   7.9050960   0.190908291
5  50.23627  2.6193455 210.4360 50.23627 194.3285  16.1075799   0.391537883
6  43.50972  5.8212863 203.8361 43.50972 222.6667 -18.8306252  -0.452070155
7  44.95626  7.8368405 236.5821 44.95626 223.3287  13.2534226   0.326339981
8  66.14391  3.6828843 171.9624 66.14391 148.8870  23.0754677   0.568829360
9  45.53040  4.8311616 187.0553 45.53040 214.0832 -27.0279262  -0.646090667
10  5.00000  5.0000000 530.0000       NA 337.0535 192.9465135   5.714275585
11 64.71719  6.4007245 164.8052 64.71719 159.9911   4.8141018   0.118618011
12 54.43665  7.8695891 192.8824 54.43665 194.7454  -1.8630426  -0.046004311
13 45.78278  4.9921489 182.2957 45.78278 213.7223 -31.4266180  -0.751115595
14 49.59998  4.7716099 146.3090 49.59998 201.6296 -55.3205552  -1.321042392
15 45.07720  4.2355525 192.9041 45.07720 213.9655 -21.0613819  -0.504406009
16 62.27717  7.1518606 186.6482 62.27717 169.2455  17.4027250   0.430262983
17 48.50446  3.0712422 228.3253 48.50446 200.6938  27.6314695   0.667366651
18 65.49983  5.4609713 184.8983 65.49983 155.2768  29.6214506   0.726319931
19 44.38387  4.9305222 213.9378 44.38387 217.7981  -3.8603382  -0.092354925
20 43.52883  8.3777627 203.5657 43.52883 228.9961 -25.4303732  -0.634725264
<snip>
49 45.28317  5.0219647 208.1318 45.28317 215.3075  -7.1756966  -0.171560291
50 44.84145  3.6252663 251.5620 44.84145 213.1535  38.4084869   0.923804784
       Ynew
1  169.3296
2  200.9038
3  189.4652
4  177.5159
5  210.4360
6  203.8361
7  236.5821
8  171.9624
9  187.0553
10       NA
11 164.8052
12 192.8824
13 182.2957
14 146.3090
15 192.9041
16 186.6482
17 228.3253
18 184.8983
19 213.9378
20 203.5657
<snip>
49 208.1318
50 251.5620
-------------------------------------------------------------------------------------------------------
bplot + geom_point(aes(colour=trt), position=position_dodge(width=.5)) within(df, {
  xmin <- xmin + width / n * (seq_len(n) - 1) - diff * (n - 1) / (2 * n)
  xmax <- xmin + d_width / n
  x <- (xmin + xmax) / 2
}) ggplot(to.analyze,aes(inj.site,relief)) + geom_boxplot() + facet_wrap(~ trt)
-------------------------------------------------------------------------------------------------------
valact <- subset(val, variable=='actual')
valsort <- valact[ order(-valact[,"Value"]),] boxplot() op <- par(mar=c(3,3,3,3)) 
bp <- barplot(valsort [ , "Value"], ylab="", xlab="", ylim=c(0,1),    
              names.arg=as.character(valsort[,"State"]), main="How's that?") 
lines(bp, cumsum(valsort[,"Value"])/sum(valsort[,"Value"]), 
      ylim=c(0,1.05), col='red') 
axis(4)
box() 
par(op) lines()
-------------------------------------------------------------------------------------------------------
<<>>= @ \documentclass[a4paper]{article}

\title{Sweave Example 1}
\author{Friedrich Leisch}

\begin{document}

\maketitle

In this example we embed parts of the examples from the
\texttt{kruskal.test} help page into a \LaTeX{} document:

<<>>=
data(airquality)
library(ctest)
kruskal.test(Ozone ~ Month, data = airquality)
@
which shows that the location parameter of the Ozone 
distribution varies significantly from month to month. Finally we
include a boxplot of the data:

\begin{center}
<<fig=TRUE,echo=FALSE>>=
boxplot(Ozone ~ Month, data = airquality)
@
\end{center}

\end{document} R CMD Sweave file.Rnw Sweave(file)
-------------------------------------------------------------------------------------------------------
parental boxplot(split(model$res,data.frame.name[,"parental"]))
-------------------------------------------------------------------------------------------------------
vec <- c(c(27, 32, 31, 28, 20, 28, 10, 29, 15, 29), 
 + c(31, 33, 20, 28, 21,  9, 14, 21, 34, 33), 
 + c(27, 33, 28, 23, 26, 33, 19, 11, 26, 30), 
 + c(33, 17, 10, 31, 10, 32, 10, 29, 31, 28), 
 + c(25, 10, 29, 34, 32, 33, 28, 32, 32, 32), 
 + c(32, 19, 13, 32, 26, 20,  9, 26, 32, 33), 
 + c(33, 32, 18, 26, 27, 28, 29, 32, 24, 25), 
 + c(33, 34, 32, 30, 27, 31, 22, 32, 33, 30), 
 + c(32, 34, 31, 22, 17, 31, 11, 27, 18, 23), 
 + c(26, 10, 30, 30, 27,  4,  4,  4,  4,  4))
myMatrix <- matrix(data=vec, ncol=10, byrow=TRUE) library(reshape)
library(ggplot2)
ggplot(data=melt(as.data.frame(myMatrix)), aes(variable, value)) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
abline(h=mean(x)) points(mean(x)) pch ?boxplot boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
means <- tapply(InsectSprays$count,InsectSprays$spray,mean)
points(means,col="red",pch=18) tapply function(x) mean(x,na.rm=T)
-------------------------------------------------------------------------------------------------------
g = ggplot(test, aes(x = places,y = value))

g + geom_boxplot(outlier.colour = rgb(0,0,0,0)) + geom_point(data = test[test$value > 8,], position = position_jitter(width = .4))
-------------------------------------------------------------------------------------------------------
ggplot(diamonds, aes(x=cut, y=price, group=cut))+
geom_boxplot(aes(fill=cut))+scale_fill_brewer(palette="OrRd")
-------------------------------------------------------------------------------------------------------
GeomBoxplot$draw<-function (., data, ..., outlier.colour = "black", outlier.shape = 16, 
    outlier.size = 2, outlier.jitter=0) 
{
    defaults <- with(data, data.frame(x = x, xmin = xmin, xmax = xmax, 
        colour = colour, size = size, linetype = 1, group = 1, 
        alpha = 1, fill = alpha(fill, alpha), stringsAsFactors = FALSE))
    defaults2 <- defaults[c(1, 1), ]
        if (!is.null(data$outliers) && length(data$outliers[[1]] >= 
        1)) {
            pp<-position_jitter(width=outlier.jitter,height=0)
            p<-pp$adjust(data.frame(x=data$x[rep(1, length(data$outliers[[1]]))], y=data$outliers[[1]]),.scale)
        outliers_grob <- GeomPoint$draw(data.frame(x=p$x, y = p$y, colour = I(outlier.colour), 
            shape = outlier.shape, alpha = 1, size = outlier.size, 
            fill = NA), ...)
    }
    else {
        outliers_grob <- NULL
    }
    with(data, ggname(.$my_name(), grobTree(outliers_grob, GeomPath$draw(data.frame(y = c(upper, 
        ymax), defaults2), ...), GeomPath$draw(data.frame(y = c(lower, 
        ymin), defaults2), ...), GeomRect$draw(data.frame(ymax = upper, 
        ymin = lower, defaults), ...), GeomRect$draw(data.frame(ymax = middle, 
        ymin = middle, defaults), ...))))
}

ggplot(test, aes(x=places,y=value))+geom_boxplot(outlier.jitter=0.05) GeomBoxplotJitterOutlier <- proto(GeomBoxplot, {
   draw <- function (., data, ..., outlier.colour = "black", outlier.shape = 16, 
    outlier.size = 2, outlier.jitter=0) {
# copy the body of function 'draw' above and paste here.
}

  objname <- "boxplot_jitter_outlier"
  desc <- "Box and whiskers plot with jittered outlier"
  guide_geom <- function(.) "boxplot_jitter_outlier"

})
geom_boxplot_jitter_outlier <- GeomBoxplotJitterOutlier$build_accessor() ggplot(test, aes(x=places,y=value))+geom_boxplot_jitter_outlier(outlier.jitter=0.05)
-------------------------------------------------------------------------------------------------------
boxplot(count ~ spray, data = InsectSprays, col = "lightgray") vioplot
-------------------------------------------------------------------------------------------------------
mtcars pdf("foo.pdf")
boxplot(mpg ~ cyl, data = mtcars, ylab = "Potrošnja goriva", xlab = "Broj cilindara", main = "Dijagram raspršenja")
dev.off() Warning messages:
1: In title(ylab = "Potrošnja goriva", xlab = "Broj cilindara", main = "Dijagram raspršenja") :
  conversion failure on 'Dijagram raspršenja' in 'mbcsToSbcs': dot substituted for <c5>
2: In title(ylab = "Potrošnja goriva", xlab = "Broj cilindara", main = "Dijagram raspršenja") :
  conversion failure on 'Dijagram raspršenja' in 'mbcsToSbcs': dot substituted for <a1>
3: In title(ylab = "Potrošnja goriva", xlab = "Broj cilindara", main = "Dijagram raspršenja") :
  conversion failure on 'Dijagram raspršenja' in 'mbcsToSbcs': dot substituted for <c5>
4: In title(ylab = "Potrošnja goriva", xlab = "Broj cilindara", main = "Dijagram raspršenja") :
  conversion failure on 'Dijagram raspršenja' in 'mbcsToSbcs': dot substituted for <a1>
5: In title(ylab = "Potrošnja goriva", xlab = "Broj cilindara", main = "Dijagram raspršenja") :
  conversion failure on 'Potrošnja goriva' in 'mbcsToSbcs': dot substituted for <c5>
6: In title(ylab = "Potrošnja goriva", xlab = "Broj cilindara", main = "Dijagram raspršenja") :
  conversion failure on 'Potrošnja goriva' in 'mbcsToSbcs': dot substituted for <a1>
7: In title(ylab = "Potrošnja goriva", xlab = "Broj cilindara", main = "Dijagram raspršenja") :
  conversion failure on 'Potrošnja goriva' in 'mbcsToSbcs': dot substituted for <c5>
8: In title(ylab = "Potrošnja goriva", xlab = "Broj cilindara", main = "Dijagram raspršenja") :
  conversion failure on 'Potrošnja goriva' in 'mbcsToSbcs': dot substituted for <a1> options(encoding = "CP1250") pdf.options(encoding = "CP1250") pdf(file = "foo.pdf", encoding = "CP1250") options(encoding = "native.enc") pdf.options pdf.options <<setOptions, echo = FALSE, results = hide>>==
pdf.options(encoding = "CP1250")
@ <<plotTheFigure, echo = TRUE, fig = TRUE>>==
# I've set echo to TRUE intentionally, to prove my point here
boxplot(mpg ~ cyl, data = mtcars, ylab = "Potrošnja goriva", xlab = "Broj cilindara", main = "Dijagram raspršenja")
@
-------------------------------------------------------------------------------------------------------
names n n # Do the boxplot but do not show it
b <- boxplot(xvar ~ f1, data=frame, plot=0)
# Now b$n holds the counts for each factor, we're going to write them in names
boxplot(xvar ~ f1, data=frame, xlab="input values", names=paste(b$names, "(n=", b$n, ")"))
-------------------------------------------------------------------------------------------------------
fun.data give.n <- function(x){
   return(c(y = mean(x), label = length(x)))
} ggplot(diamonds, aes(cut, price)) + 
   geom_boxplot() + 
   stat_summary(fun.data = give.n, geom = "text")
-------------------------------------------------------------------------------------------------------
cat paste y <- rnorm(20)
ns <- tapply(y,y>0,length)
labs <- paste(c("0 pr below", "above 0"), paste("n =",ns), sep="\n")
boxplot(y ~ cut(y, breaks=c(-Inf,0,Inf), labels=labs))
-------------------------------------------------------------------------------------------------------
plyr value dat$value <- factor(dat$value) p.by.user <- function(df){
  data.frame(prop.table(table(df$value)))
} dat user dat.summary <- ddply(dat, .(user), p.by.user) with(dat.summary, 
boxplot(Freq ~ Var1, ylim = c(0,1)) 
1 ggplot2 ggplot(dat, aes(factor(user), fill = value)) + geom_bar()
    # or, to force the range to be between 0 and 1
    # + geom_bar(position = "fill")
-------------------------------------------------------------------------------------------------------
user <- rep(1:10,each=5)
value <- sample(0:2,50,replace=T)
dat <- data.frame(user,value)

percent <- unlist(
    by(dat, dat$user,
        function(user) {
            table(user$value)/length(user$value)*100
        }
    )
)

# make a vector with all percentages
percent <- unlist(percent)
# extract the necessary info from the names
value <- gsub("\\d+\\.(\\d)","\\1",names(percent))

boxplot(percent~value)
-------------------------------------------------------------------------------------------------------
?reorder -count bymedian <- with(InsectSprays, reorder(spray, -count, median))
  boxplot(count ~ bymedian, data = InsectSprays,xlab = "Type of spray", ylab = "Insect count",main = "InsectSprays data", varwidth = TRUE,col = "lightgray")
-------------------------------------------------------------------------------------------------------
> set.seed(42)                     # fix seed       
> DF <- data.frame(type=sample(LETTERS[1:5], 100, replace=TRUE), 
+                  cost=rnorm(100)) 
>
> boxplot(cost ~ type, data=DF)    # not ordered by median
>
> # compute index of ordered 'cost factor' and reassign          
> oind <- order(as.numeric(by(DF$cost, DF$type, median)))    
> DF$type <- ordered(DF$type, levels=levels(DF$type)[oind])   
>
> boxplot(cost ~ type, data=DF)    # now it is ordered by median
-------------------------------------------------------------------------------------------------------
library(ggplot2)

x <- factor(rep(1:10, 100))
y <- rnorm(1000)
df <- data.frame(x=x, y=y)

ggplot(df, aes(x=x, y=y)) + 

stat_summary(fun.y=mean, geom="line", aes(group=1))  + 
stat_summary(fun.y=mean, geom="point")
-------------------------------------------------------------------------------------------------------
col3 = c(56.625, 50.625, 65.875, 52.875, 70, 67.750, 65.750, 56.625, 50.625, 65.875, 52.875, 70, 67.750, 65.750)
col5 = c("RED", "GREEN", "BLUE", "RED", "BLUE", "RED", "GREEN", "RED", "GREEN", "BLUE","RED","BLUE","RED","GREEN")
myfile = c(1,1,1,1,1,1,1,2,2,2,2,2,2,2)
mydata = data.frame(col3, col5, myfile)
boxplot(col3 ~ col5 + myfile, data = mydata)
-------------------------------------------------------------------------------------------------------
boxplot factor ordered md R> md$Species <- ordered(md$Species, levels=c("G", "R", "B"))
R> md$Treatment <- ordered(md$Treatment, levels=c("L", "M", "H"))
R> with(md, boxplot(Nitrogen ~ Species * Treatment))
-------------------------------------------------------------------------------------------------------
N <- 1e6
x <- rnorm(N)
b <- sapply(1:100, function(i) paste(sample(letters,40,TRUE),collapse=""))
g <- factor(sample(b,N,TRUE))
boxplot(x~g) N=1e7
-------------------------------------------------------------------------------------------------------
m + geom_boxplot() + scale_y_continuous(formatter='log10') m <- ggplot(diamonds, aes(y = price, x = color), log="y"); m + geom_boxplot() 
m <- ggplot(diamonds, aes(y = price, x = color), log10="y"); m +  fmtExpLg10 <- function(x) paste(round_any(10^x/1000, 0.01) , "K $", sep="")
ggplot(diamonds, aes(color, log10(price))) + 

 scale_y_continuous("Price, log10-scaling", formatter = fmtExpLg10)
-------------------------------------------------------------------------------------------------------
d <- diamonds
# computing logarithm of prices
d$price <- log10(d$price) formatBack <- function(x) 10^x 
# or with special formatter (here: "dollar")
formatBack <- function(x) paste(round(10^x, 2), "$", sep=' ') m <- ggplot(d, aes(y = price, x = color))
m + geom_boxplot() + scale_y_continuous(formatter='formatBack')
-------------------------------------------------------------------------------------------------------
outline = FALSE > m <- c(rnorm(10),5,10)
> bp <- boxplot(m, outline = FALSE)
-------------------------------------------------------------------------------------------------------
bstats <- boxplot(count ~ spray, data = InsectSprays, col = "lightgray") 
#need to "waste" this plot
bstats$out <- NULL
bstats$group <- NULL
bxp(bstats)  # this will plot without any outlier points
-------------------------------------------------------------------------------------------------------
remove_outliers <- function(x, na.rm = TRUE, ...) {
  qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
  H <- 1.5 * IQR(x, na.rm = na.rm)
  y <- x
  y[x < (qnt[1] - H)] <- NA
  y[x > (qnt[2] + H)] <- NA
  y
} set.seed(1)
x <- rnorm(100)
x <- c(-10, x, 10)
y <- remove_outliers(x)
## png()
par(mfrow = c(1, 2))
boxplot(x)
boxplot(y)
## dev.off() na.rm = TRUE quantile
-------------------------------------------------------------------------------------------------------
breaks = 10**(1:10)
scale_y_log10(breaks = breaks, labels = comma(breaks)) breaks = 10**(1:10 * 0.5)
m <- ggplot(diamonds, aes(y = price, x = color)) + geom_boxplot()
m + scale_y_log10(breaks = breaks, labels = comma(breaks, digits = 1))
-------------------------------------------------------------------------------------------------------
bty par boxplot par(bty='n')
boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
-------------------------------------------------------------------------------------------------------
frame=F frame.plot=F boxplot(count ~ spray, data = InsectSprays, col = "lightgray",frame=F) ?bxp boxplot()
-------------------------------------------------------------------------------------------------------
boxplot() frame boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
 #vs    
 boxplot(count ~ spray, data = InsectSprays, col = "lightgray", frame = FALSE)
-------------------------------------------------------------------------------------------------------
> set.seed(1)
> x = rlnorm(20, 1/2)#skewed data
> par(mfrow=c(1,3))
> boxplot(x, range=1.7, main="range=1.7")
> boxplot(x, range=1.5, main="range=1.5")#default
> boxplot(x, range=0, main="range=0")#The same as range="Very big number" range=0
-------------------------------------------------------------------------------------------------------
melt reshape boxplot df > library(reshape)
> df.m <- melt(df)
Using  as id variables
> head(df.m)
  variable    value
1    X20.7 99.64920
2    X20.7 98.76469
3    X20.7 98.37824
4    X20.7 98.11356
5    X20.7 97.80027
6    X20.7 97.47825
> 
> boxplot(df.m$value)
-------------------------------------------------------------------------------------------------------
boxplot(unlist(theData))
-------------------------------------------------------------------------------------------------------
a<-data.frame(c(1,2),c("x","y"))
b<-data.frame(c(3,4,5),c("a","b","c"))
boxplot(c(a[1],b[1]))
-------------------------------------------------------------------------------------------------------
require( xts )
require( lubridate )

## set up some example data
dataLength <- 2e6
startTime <- ymd_hms("2011-02-01-13-29-53")
fistFullOfSeconds <- 1:dataLength
date <- startTime + fistFullOfSeconds
DD1 <- rnorm( dataLength )
DD2 <- DD1 + rnorm(dataLength, 0, .1 )
DD3 <- rnorm( dataLength, 10, 2)
DD4 <- rnorm( dataLength )

myXts <- xts(matrix( c( DD1, DD2, DD3, DD4 ), ncol=4 ), date)

## now all the data are in the myXts object so let's do some
## summarizing and visualization

## grabbing just a single day from the data
## converted to data.frame to illustrate default data frame plotting
oneDay <- data.frame( myXts["2011-02-02"] ) 
plot( oneDay ) boxplot( oneDay ) ## look at the max value of each variable every minute
par(mfrow=c(4,1)) ## partitions the graph window
ep <- endpoints(myXts,'minutes')
plot(period.apply(myXts[,1],INDEX=ep,FUN=max))
plot(period.apply(myXts[,2],INDEX=ep,FUN=max))
plot(period.apply(myXts[,3],INDEX=ep,FUN=max))
plot(period.apply(myXts[,4],INDEX=ep,FUN=max))
-------------------------------------------------------------------------------------------------------
system.time(system.time()) system.time(1:1e8)^2 + 1) > expr <- system.time((1:1e8)^2 + 1)
> system.time(expr)
   user  system elapsed 
      0       0       0 > test1 <- function() (1:1e8)^2 + 1
> (results <- microbenchmark(test1(), times=10))
Unit: nanoeconds
               min         lq     median         uq        max
test1() 3565386356 3703142531 3856450582 3931033077 3986309085
> boxplot(results)
-------------------------------------------------------------------------------------------------------
# Create dummy data
results <- data.frame(
  factor=factor(rep(1:10, 100)), 
  proportionPositive=rnorm(1000))

# Plot results
ggplot(results, aes(x=factor, y=proportionPositive)) +
      +
      stat_summary(fun.data = "mean_cl_normal", 
              aes(shape="mean"), 
              colour = "red",
              geom="point") +
      scale_shape_manual("", values=c("mean"="x"))
-------------------------------------------------------------------------------------------------------
library(lattice)
histogram(~x2|equal.count(x1),data=frame) shingle equal.count par(mfrow=c(2,1))
hist(x2)
boxplot(x2) layout()
-------------------------------------------------------------------------------------------------------
boxplots <- vector(mode = "list", length = nrow(checkresults)) boxplots [[x]] for (x in seq_along(boxplots)){
    boxplots[[x]] <- 
boxplot(PIM[,x], MYC [,x], OBX[,x], WDR[,x],EV[,x],main = colnames(PIM)[x], xlab = "PIM, MYC, OBX, WDR, EV")
}
-------------------------------------------------------------------------------------------------------
paste pdf("myboxplots.pdf")
for (x in seq_along(boxplots)){
 boxplot(PIM[,x], MYC [,x], OBX[,x], WDR[,x],EV[,x],main = colnames(PIM)[x], xlab = "PIM, MYC, OBX, WDR, EV")
}
dev.off() file=paste
-------------------------------------------------------------------------------------------------------
t <- structure(list(A = 0.286945, C = 0.322006, G = "0.1473610.2436880.081520-0.4466031.130529NC_000846", T = "Chordata", `(A-T)/(A+T)` = "Rheiformes", `(G-C)/(G+T)` = "Aves", `(A+T)/(G+C)` = 0.39562, accession = "0.1334170.0917400.3792240.021160-0.0884933.441356NC_000857", Phylum = "Arthropoda", Order = "Diptera", Class = "Insecta"), .Names = c("A", "C", "G", "T", "(A-T)/(A+T)", "(G-C)/(G+T)", "(A+T)/(G+C)", "accession", "Phylum", "Order", "Class"), class = "data.frame", row.names = c(NA, -1L)) dev.off t=read.table("txt-part.txt", stringsAsFactors=FALSE)
names( t ) <- c("A","C","G","T","(A-T)/(A+T)","(G-C)/(G+T)","(A+T)/(G+C)","accession","Phylum","Order","Class")
phy=unique(t$Phylum)

for (x in phy){ 
    if(x != "???:???") {
    test<-subset(t, Phylum==x)
    dat <- melt(test, measure=c("A", "C" , "G" , "T" , "(A-T)/(A+T)", "(G-C)/(G+T)","(A+T)/(G+C)"))
    p <- ggplot(dat, aes(Class,value , color=variable))  + geom_ +geom_jitter()   +  facet_grid(variable~., scales="free_y")
    ggsave(paste(x,".pdf"), p, width=25, height=15)
    }}
-------------------------------------------------------------------------------------------------------
## dummy data
dat <- data.frame(Depth = sample(c(3:6), 20, replace = TRUE), OM = 5 * runif(20)) side = 2 ## margin for side 2 is 7 lines in size
op <- par(mar = c(5,7,4,2) + 0.1) ## default is c(5,4,4,2) + 0.1 ## draw the plot but without annotation
boxplot(OM ~ Depth, data = dat, axes = FALSE, ann = FALSE)
## add axes
axis(1, at = 1:4, labels = c(" ", "Shallow", "Deep", " "), cex.axis = 1.5)
axis(2, cex.axis = 2)
## now draw the y-axis annotation on a different line out from the plot
## using the extra margin space:
title(ylab = "Loss of Percent Organic Matter per Year", cex.lab = 1.5,
      line = 4.5)
## draw the box to finish off
box() par(op) ylab op <- par(mar = c(5,7,4,2) + 0.1) ## default is c(5,4,4,2) + 0.1 op title() title(ylab = "Loss of Percent Organic Matter per Year", cex.lab = 1.5,
      line = 4.5) 4.5 5 'line' 'line' title()
-------------------------------------------------------------------------------------------------------
saveGIF() opts() options() saveGIF() p <- ggplot(mtcars, aes(factor(cyl), mpg)) +
  geom_boxplot()

saveGIF(
  sapply(1:2,function(x){
      x_label_cols <- rep("grey50", 3)
      x_label_cols[x] <- "red"
      print(p + 
        opts(axis.text.x = theme_text(colour = x_label_cols))
      )
  })
)
-------------------------------------------------------------------------------------------------------
geom_boxplot(outlier.shape = NA) scale_y_continuous(limits = c(lower, upper)) n <- 1e4L
dfr <- data.frame(
  y = exp(rlnorm(n)),  #really right-skewed variable
  f = gl(2, n / 2)
)

p <- ggplot(dfr, aes(f, y)) + 
  geom_boxplot()
p   # big outlier causes quartiles to look too slim

p2 <- ggplot(dfr, aes(f, y)) + 
  geom_boxplot(outlier.shape = NA) +
  scale_y_continuous(limits = quantile(dfr$y, c(0.1, 0.9)))
p2  # no outliers plotted, range shifted coord_cartesian(ylim = quantile(dfr$y, c(0.1, 0.9))) scale_y_continuous
-------------------------------------------------------------------------------------------------------
# create a dummy data frame with outliers
df = data.frame(y = c(-100, rnorm(100), 100))

# create boxplot that includes outliers
p0 = ggplot(df, aes(y = y)) + geom_boxplot(aes(x = factor(1)))


# compute lower and upper whiskers
ylim1 = boxplot.stats(df$y)$stats[c(1, 5)]

# scale y limits based on ylim1
p1 = p0 + coord_cartesian(ylim = ylim1*1.05)
-------------------------------------------------------------------------------------------------------
fill ggplot(diamonds, aes(x=cut, y=price, group=cut)) + geom_boxplot() ggplot(diamonds, aes(x=cut, y=price, group=cut)) + geom_boxplot() + theme_bw() fill aes

-------------------------------------------------------------------------------------------------------
varx vary aes aes_string fboxplot2 <- function(mydataframe, varx, vary)   {
     p <- ggplot(data=mydataframe, aes_string(x=varx, y=vary))
     p + geom_boxplot()   }

fboxplot2(df, "col1", "col2")
-------------------------------------------------------------------------------------------------------
aes library() varx varx aes_string() fboxplot() fboxplot <- function(mydataframe, varx, vary)
  {
    p <- ggplot(data=mydataframe, aes_string(x=varx, y=vary))
    p + geom_boxplot()
  }

col1 = factor(rep(1:3, 3))
col2 = rnorm(9)
col3 = c(rep(10,5), rep(20,4))
df = data.frame(col1 = col1, col2 = col2, col3 = col3)

fboxplot(df, "col1", "col2")
-------------------------------------------------------------------------------------------------------
geom_boxplot(outlier.shape = NA) library("ggplot2")

test <-structure(list(value = c(3, 5, 3, 3, 6, 4, 5, 4, 6, 4, 6, 4, 4, 6, 5, 3, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 5, 6, 6, 4, 3, 5\
, 4, 6, 5, 6, 4, 5, 5, 3, 4, 4, 6, 4, 4, 5, 5, 3, 4, 5, 8, 8, 8, 8, 9, 6, 6, 7, 6, 9), places = structure(c(1L, 2L, 1L, 1L, 1L\
, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 2L, 1L, 2L, \
1L, 2L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 2L, 2L, 1L, 2L, 1L), .Label = c("a", "b"), class =\
 "factor")), .Names = c("value", "places"), row.names = c(NA, -60L), class = "data.frame")

# adding a level that you will use latter for giving colors
l <- rep(c(10,20,30,40,50,60), 10)
test$levels<-l

# [1]
# original plot
ggplot(test, aes(x=places,y=value))+geom_boxplot()

# [2]
# plot with outlier from boxplot and the points jittered to see
# distribution (outliers and the same point from position jitter would be
# counted twice for each different height)
dev.new()
ggplot(data=test, aes(x=places, y=value)) + geom_boxplot() +  geom_jitter(position=position_jitter(width=0.1, height=0))

# [3]
# make wider the jitter to avoid overplotting because there are a lot
# of points with the same value, also remove the outliers from boxplot
# (they are plotted with the geom_jitter anyway)
dev.new()
ggplot(data=test, aes(x=places, y=value)) + geom_boxplot(outlier.shape = NA) +
  geom_jitter(position=position_jitter(width=0.3, height=0))

# [4]
# adding colors to the points to see if there is a sub-pattern in the distribution
dev.new()
ggplot(data=test, aes(x=places, y=value)) + geom_boxplot(outlier.shape = NA) +
  geom_jitter(position=position_jitter(width=0.3, height=0), aes(colour=levels))

# [5]
# adding a bit of vertical jittering
# jittering (a good option for a less discrete datasets)
dev.new()
ggplot(data=test, aes(x=places, y=value)) + geom_boxplot(outlier.shape = NA) +
  geom_jitter(position=position_jitter(width=0.3, height=0.05), aes(colour=levels))

# [6]
# finally remember that position_jitter makes a jittering of a 40% of
# the resolution of the data, so if you forget the height=0 you will
# have a total different picture
dev.new()
ggplot(data=test, aes(x=places, y=value)) + geom_boxplot(outlier.shape = NA) +
  geom_jitter(position=position_jitter(width=0.2))
-------------------------------------------------------------------------------------------------------
#Create some example data
dat <- data.frame(x=rep(letters[1:3],times=100),y=runif(300),
        lab=rep('label',300))

#Create a copy of the data and a jittered version of the x variable
datJit <- dat
datJit$xj <- jitter(as.numeric(factor(dat$x)))

#Create an indicator variable that picks out those 
# obs that are in lowest 10% by x
datJit <- ddply(datJit,.(x),.fun=function(g){
             g$grp <- g$y <= quantile(g$y,0.1); g})

#Create a boxplot, overlay the jittered points and 
# label the bottom 10% points
ggplot(dat,aes(x=x,y=y)) + 
    geom_boxplot() + 
    geom_point(data=datJit,aes(x=xj)) + 
    geom_text(data=subset(datJit,grp),aes(x=xj,label=lab))
-------------------------------------------------------------------------------------------------------
cairoPDF ?plotmath ?boxplot names boxplot(matrix(1:10,ncol=2),names=c("a",expression(infinity)))
-------------------------------------------------------------------------------------------------------
ggplot plyr #Load ggplot and make some fake data
library(ggplot2)
dat <- data.frame(dbfunc = rep(letters[1:10], each = 100)
                  , runtime = runif(1000, max = 300))

#Use plyr to calculate a new variable for the mean runtime by dbfunc and add as 
#a new column
dat <- ddply(dat, "dbfunc", transform, meanRunTime = mean(runtime))

#Subset only those dbfunc with mean run times greater than 100. Is this step necessary?
dat.long <- subset(dat, meanRunTime > 100)


#Reorder the level for the dbfunc variable in terms of the mean runtime. Note that relevel
#accepts a function like mean so if the subset step above isn't necessary, then we can simply
#use that instead.
dat.long$dbfunc <- reorder(dat.long$dbfunc, -dat.long$meanRunTime)

#Subset one more time to get the top *n* dbfunctions based on mean runtime. I chose three here...
dat.plot <- subset(dat.long, dbfunc %in% levels(dbfunc)[1:3])

#Now you have your top three dbfuncs, but a bunch of unused levels hanging out so let's drop them
dat.plot$dbfunc <- droplevels(dat.plot$dbfunc)

#Plotting time!
ggplot(dat.plot, aes(dbfunc, runtime)) + 
  geom_boxplot()
-------------------------------------------------------------------------------------------------------
d0 <- matrix(rnorm(15), ncol=3)
d1 <- matrix(rnorm(15), ncol=3)

# Using base R graphics
lmts <- range(d0,d1)

par(mfrow = c(1, 2))
boxplot(d0,ylim=lmts)
boxplot(d1,ylim=lmts) lattice ggplot2 # Using ggplot2
library(ggplot2)
d <- data.frame(d.type=c(rep(0,15),rep(1,15)),sub.type=rep(c('A','B','C'),10),val=rnorm(30))

p <- ggplot(d, aes(factor(sub.type), val)) 
p + geom_boxplot() + facet_grid(. ~ d.type) # Using lattice
library(lattice)
bwplot(~ val|sub.type+d.type ,d)
-------------------------------------------------------------------------------------------------------
relevel() #default plot
ggplot(df2, aes(variable, value)) + geom_boxplot() #Reverse reverse!
df2$variable2 <- with(df2, relevel(variable, "vph.shr"))
ggplot(df2, aes(variable2, value)) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
# load data frame
dbruntimes <- read.csv("db_runtimes.csv",sep=',',header=FALSE)
# calc means
meanruns <- aggregate(dbruntimes["runtime"],dbruntimes["dbfunc"],mean)
# filter
topmeanruns <- meanruns[meanruns$runtime>100,]
# order by means
meanruns <- meanruns[rev(order(meanruns$runtime)),]
# get top 25 results
drawfuncs <- meanruns[1:25,"dbfunc"]
# subset for plot
forboxplot <- subset(dbruntimes,dbfunc %in% levels(drawfuncs)[0:25])
# plot
boxplot(forboxplot$runtime~forboxplot$dbfunc)
-------------------------------------------------------------------------------------------------------
ggplot require(ggplot2)

# melt the data frame
cw2 = melt(cw, id = 'weight')

# create a data frame with boxplot stats
cw3 = ddply(cw2, .(value, variable), function(df) boxplot.stats(df$weight)$stats)

# generate the plot
ggplot(cw2, aes(value, weight)) +
  geom_boxplot(fill = 'gray90', colour = 'gray90', alpha = 0) +      
  geom_segment(data = cw3, aes(xend = value, y = V1, yend = V2)) + 
  geom_segment(data = cw3, aes(xend = value, y = V4, yend = V5)) + 
  geom_point(data = cw3, aes(y = V3), size = 3) + 
  facet_wrap(~ variable, scales = 'free_x', nrow = 1)
-------------------------------------------------------------------------------------------------------
x1 <- reshape(x, idvar="R", varying=list(2:5), direction="long") 
boxplot(S1G1 ~ R,data=x1,main="Output result",las = 2, pch=16, cex = 1,col = "lightblue", xlab = "R",ylab = "SNP values",ylim =c(-0.4,1.2), border ="blue", boxwex = 0.3)
-------------------------------------------------------------------------------------------------------
xx <- read.table(textConnection("R  S1G1   S1G2   S2G1   S2G2
1  0.98   0.98   0.96   0.89
2  0.89   0.89   0.98   0.88
3  0.88   0.99   0.89   0.87"),header = TRUE, sep ="")

xx1 <- melt(xx, id.vars = "R") ggplot(xx1, aes(x = variable, y = value)) + 
    geom_boxplot() lattice boxplot(value~variable, data = xx1)

bwplot(value~variable,data = xx1)

-------------------------------------------------------------------------------------------------------
toothInt <- ddply(ToothGrowth,.(dose,supp),summarise, val = mean(len))

ggplot(ToothGrowth, aes(x = factor(dose), y = len, colour = supp)) + 
    geom_boxplot() 
    geom_point(data = toothInt, aes(y = val)) +
    geom_line(data = toothInt, aes(y = val, group = supp)) + 
    theme_bw() ggplot qplot
-------------------------------------------------------------------------------------------------------
supp p <- qplot(as.factor(dose), len, data=ToothGrowth, geom = "boxplot", color = supp) + theme_bw()
p <- p + labs(x="Dose", y="Response")
p <- p + stat_summary(fun.y = mean, geom = "point", color = "blue", aes(group=supp))
p <- p + stat_summary(fun.y = mean, geom = "line", aes(group = supp))
p <- p  + opts(axis.title.x = theme_text(size = 12, hjust = 0.54, vjust = 0))
p <- p  + opts(axis.title.y = theme_text(size = 12, angle = 90,  vjust = 0.25))
print(p) ggplot ggplot(ToothGrowth, aes(as.factor(dose), len, colour=supp)) +
  geom_boxplot() 
  stat_summary(aes(group=supp), fun.y = mean, geom="point", colour="blue") +
  stat_summary(aes(group=supp), fun.y = mean, geom="line") +
  scale_x_discrete("Dose") +
  scale_y_continuous("Response") +
  theme_bw() +
  opts(axis.title.x = theme_text(size = 12, hjust = 0.54, vjust = 0),
    axis.title.y = theme_text(size = 12, angle = 90,  vjust = 0.25)) library("plyr")
summ <- ddply(ToothGrowth, .(supp, dose), summarise, len = mean(len))

ggplot(ToothGrowth, aes(as.factor(dose), len, colour=supp)) +
  geom_boxplot() +
  geom_point(data = summ, aes(group=supp), colour="blue", 
             position = position_dodge(width=0.75)) +
  geom_line(data = summ, aes(group=supp), 
            position = position_dodge(width=0.75)) +
  scale_x_discrete("Dose") +
  scale_y_continuous("Response") +
  theme_bw() +
  theme(axis.title.x = element_text(size = 12, hjust = 0.54, vjust = 0),
        axis.title.y = element_text(size = 12, angle = 90,  vjust = 0.25))
-------------------------------------------------------------------------------------------------------
\includegraphics pdf("C:/Users/Orr/Documents/Leiden University/Master thesis/Chapters/Images/bioRes/Boxplots mouse raw data.pdf")
boxplot(mouse_data_raw,main="Mouse raw data")
dev.off()

\begin{figure}[t]
\includegraphics[scale=0.5]{mouse-box-raw}
\includegraphics[scale=0.5]{human-box-raw}
\end{figure}
-------------------------------------------------------------------------------------------------------
plyr ggplot2 stringsAsFactors=FALSE as.character df <- read.csv(textConnection('
"SOURCE","REQUEST_DATE"
"A","09/11/2011 09:28:48"
"A","09/11/2011 09:21:15"
"A","09/11/2011 09:15:42"
"A","09/11/2011 09:12:18"
"D","09/13/2011 09:06:53"
"D","09/13/2011 09:06:18"
"D","09/13/2011 08:56:55"
"D","09/13/2011 08:56:18"
"D","09/13/2011 08:55:43"
"D","09/13/2011 08:39:07"
'), stringsAsFactors=FALSE) df$REQUEST_DATE <- as.POSIXct(df$REQUEST_DATE, format="%m/%d/%Y %H:%M:%S") plyr ddply library(plyr)
df_diff <- ddply(df, .(SOURCE), summarize, TIME_DIFF=-unclass(diff(REQUEST_DATE)))
df_diff
  SOURCE TIME_DIFF
1      A      7.55
2      A      5.55
3      A      3.40
4      D     35.00
5      D    563.00
6      D     37.00
7      D     35.00
8      D    996.00 ggplot2 library(ggplot2)
ggplot(df_diff, aes(y=TIME_DIFF, x=SOURCE)) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
library(ggplot2)
df <- data.frame(x = rep(1:100, times=7),
        facet_var = as.factor(rep( 1:7, each=100)),
        y = runif(7*100)
      ) 

# label for marginal plot
df <- rbind(df, data.frame(x = NA, y = NA, facet_var = "Boxplot wow"))

p <- ggplot(data = df, aes(x, y)) +
    geom_line() + facet_wrap( ~ facet_var, ncol=2) + 
    # set limits for adjustment
    coord_cartesian(xlim = c(0, 100))

xdata <- runif(1000, min = 20, max = 80)
boxdf <- data.frame(x=xdata, group=rep(1,length(xdata)))

q <- ggplot(data = boxdf, aes(as.factor(group),x)) + geom_boxplot() +

    # set breaks and limits for adjustment
    coord_flip(ylim = c(0, 100)) + labs(x=NULL) + 
    scale_y_continuous(breaks = 1:5*20) + 

    # opts for full region drawing: 
    # see https://kohske.wordpress.com/2010/12/25/drawing-on-full-region-in-ggplot2/
    opts(
    legend.position = "none",
    panel.margin = unit(0,"null"),
    plot.margin = rep(unit(0,"null"),4),
    axis.ticks = theme_blank(),
    axis.text.x = theme_blank(),
    axis.text.y = theme_blank(),
    axis.title.x = theme_blank(),
    axis.title.y = theme_blank(),
    axis.ticks.length = unit(0,"null"),
    axis.ticks.margin = unit(0,"null")
  )

print(p)

# remove unused panel
grid.remove("panel-14-5")

downViewport("panel-14-5")
print(q, newpage=F)
-------------------------------------------------------------------------------------------------------
plot.background panel.background df <- data.frame(y=d,x=1)
p <- ggplot(df) + stat_boxplot(aes(x = x,y=y)) 
p <- p + opts(
    panel.background = theme_rect(fill = "transparent",colour = NA), # or theme_blank()
    panel.grid.minor = theme_blank(), 
    panel.grid.major = theme_blank(),
    plot.background = theme_rect(fill = "transparent",colour = NA)
)
#returns white background
png('tr_tst2.png',width=300,height=300,units="px",bg = "transparent")
print(p)
dev.off() opts() theme() opts() element_rect() theme_rect()
-------------------------------------------------------------------------------------------------------
boxplot(count ~ spray, data = InsectSprays, col = "lightgray", main = "plot title")
abline(h = 1:25, lty=1.5, lwd=0.5, col=336)
boxplot(count ~ spray, data = InsectSprays, col = "lightgray", add = TRUE)
-------------------------------------------------------------------------------------------------------
subset boxplot(element~Season,data=Data,subset=sampletype==1)
-------------------------------------------------------------------------------------------------------
require(ggplot2)

df <- data.frame(
  time = rep(seq(Sys.Date(), len = 3, by = "1 day"), 10),
  y = rep(1:3, 10, each = 3) + rnorm(30),
  group = rep(c("x", "y", "z"), 10, each = 3)
)
df$time <- factor(format(df$time, format = "%Y-%m-%d"))

p <- ggplot(df, aes(x = time, y = y, fill = group)) + geom_boxplot()
print(p) x = factor(time) ggplot(df, aes(x = factor(time), y = y, fill = group)) + geom_boxplot() + scale_x_date() factor(format(df$time, format = "%Y-%m-%d"))
-------------------------------------------------------------------------------------------------------
names(allquartile) s.0. s.25. _ . require(stringr)
names(allquartile) = str_replace_all(names(allquartile), "\\.", '')
p <- ggplot(allquartile2, aes_string(x = "T", ymin = "s0", lower = "s25", 
      middle = "s50", upper = "s75", ymax = "s100", color = "method")) + 
     geom_boxplot(stat = "identity")
-------------------------------------------------------------------------------------------------------
ci <- as.matrix(cidf)
boxplot(ci[1,],ci[2,],ci[3,],ci[4,]) ggplot bwplot
-------------------------------------------------------------------------------------------------------
bplotforone<-function(mat, groups=list(1:16, 17:32, 33:48, 49:64), newwin=TRUE, mfrow=c(2,2))
{
    nr<-nrow(mat)
    if(newwin) windows()
    par(mfrow=mfrow)
    for(curgroup in groups)
    {
        newres<-as.vector(mat[,curgroup])
        newres<-data.frame(vals=newres, grp=rep(seq_along(curgroup), each=nr))
        boxplot(vals~grp, data=newres)
    }
}

con.sin.results2<-matrix(runif(10*64), ncol=64) #generated some test data here
bplotforone(con.sin.results2) listOfResults<-list(con.sin.results,sin.results,exp.results) #note: no quotes!!
for(curres in listOfResults) bplotforone(curres)
-------------------------------------------------------------------------------------------------------
boxplot(a, at = 0:2*3 + 1, xlim = c(0, 9), ylim = range(a, b), xaxt = "n")
boxplot(b, at = 0:2*3 + 2, xaxt = "n", add = TRUE)
axis(1, at = 0:2*3 + 1.5, labels = colnames(a), tick = TRUE) ylim = range(a, b) axis() 0:2*2 0:2*3
-------------------------------------------------------------------------------------------------------
temp<-c("con.sin.results","sin.results","exp.results")
N<-c(50,100,250,500)
con.sin.results<-matrix(runif(100*64),100,64)
sin.results<-matrix(runif(100*64),100,64)
exp.results<-matrix(runif(100*64),100,64)

for (I in temp){
  windows()
  par(mfrow=c(2,2))
  for (n in N){
    if (n==50) eval(parse(text=paste("boxplot(",I,"[,1:16])",sep=""))) 
    if (n==100) eval(parse(text=paste("boxplot(",I,"[,17:32])",sep=""))) 
    if (n==250) eval(parse(text=paste("boxplot(",I,"[,33:48])",sep=""))) 
    if (n==500) eval(parse(text=paste("boxplot(",I,"[,49:64])",sep="")))
  }
}
-------------------------------------------------------------------------------------------------------
p <- ggplot(mtcars, aes(factor(cyl), mpg))+ geom_boxplot(aes(fill = cyl))
 p <- p + labs(fill=expression(atop("Temperature", ( degree~F))))
 p
-------------------------------------------------------------------------------------------------------
data.2$posthoc[data.2$variable == "x"] <- "a"
data.2$posthoc[data.2$variable == "y"] <- "b"
data.2$posthoc[data.2$variable == "z"] <- "a,b" install.packages("ggplot2", dependencies=T)
library(ggplot2) qplot(data=data.2,
    x = variable,
    y = value,
    stat = "summary",
    fun.y = "mean",
    geom = c("point")
    ) qplot(data=data.2,
    x = variable,
    y = value,
    stat = "summary",
    fun.y = "mean",
    label = posthoc,
    vjust = -12,
    geom = c("point", "text")
    ) qplot(data=data.2,
    x = variable,
    y = value,
    stat = "summary",
    fun.y = "mean",
    label = posthoc,
    vjust = -12,
    ylim = c(-1, 3.5),
    geom = c("point", "text"),
    main="ggplot2 ANOVA boxplot"
    ) + 
    geom_boxplot(aes(fill=posthoc)) + 
    theme_bw()
-------------------------------------------------------------------------------------------------------
library(reshape)

x <- rnorm(30)
y <- rnorm(30)+1
z <- rnorm(30)+0.5

data.1 <- data.frame(x, y, z)
data.2 <- melt(data.1)
data.2$newgroup = factor(data.2$variable,labels=c("a","b","ab")) # only line added
boxplot(value~newgroup, data=data.2)
-------------------------------------------------------------------------------------------------------
lmts <- range(x1,x2,y1,y2)
par(mfrow = c(1, 2))
boxplot(x1, x2, ylim=lmts,names=c("x1","x2"),xlab="x")
boxplot(y1, y2, ylim=lmts,names=c("y1","y2"),xlab="y") > quantile(c(2,3,4), type=1)
  0%  25%  50%  75% 100% 
   2    2    3    4    4 
> quantile(c(2,3,4), type=2)
  0%  25%  50%  75% 100% 
   2    2    3    4    4 
> quantile(c(2,3,4), type=3)
  0%  25%  50%  75% 100% 
   2    2    3    3    4 
> quantile(c(2,3,4), type=4)
  0%  25%  50%  75% 100% 
2.00 2.00 2.50 3.25 4.00 
> quantile(c(2,3,4), type=5)
  0%  25%  50%  75% 100% 
2.00 2.25 3.00 3.75 4.00 
> quantile(c(2,3,4), type=6)
  0%  25%  50%  75% 100% 
   2    2    3    4    4 
> quantile(c(2,3,4), type=7)
  0%  25%  50%  75% 100% 
 2.0  2.5  3.0  3.5  4.0 
> quantile(c(2,3,4), type=8)
      0%      25%      50%      75%     100% 
2.000000 2.166667 3.000000 3.833333 4.000000 
> quantile(c(2,3,4), type=9)
    0%    25%    50%    75%   100% 
2.0000 2.1875 3.0000 3.8125 4.0000
-------------------------------------------------------------------------------------------------------
library(ggplot2)
dataset <- data.frame(
    Group = c(rep("x1", length(x1)), rep("x2", length(x2)), rep("y1", length(y1)), rep("y2", length(y2))),
    Subplot = c(rep("x", length(x1) + length(x2)), rep("y", length(y1) + length(y2))),
    Value = c(x1, x2, y1, y2))
ggplot(dataset, aes(x = Group, y = Value)) + geom_boxplot() + facet_wrap(~Subplot, scales = "free_x")
-------------------------------------------------------------------------------------------------------
with boxplot DF get tmp with(DF, boxplot(get(tmp) ~ Var2)) tmp <- 'wt'
with(mtcars, boxplot(get(tmp) ~ cyl))
-------------------------------------------------------------------------------------------------------
paste boxplot(as.formula(paste(temp,"Var2",sep="~")),DF)
-------------------------------------------------------------------------------------------------------
tmp1 <- 'Sepal.Width'
tmp2 <- 'Species'
boxplot( iris[[tmp1]] ~ iris[[tmp2]] )
-------------------------------------------------------------------------------------------------------
set.seed(1501)
y <- c(4, 0, 7, -5, rnorm(16))
x1 <- c("a", "a", "b", "b", sample(letters[1:2], 16, T))
lab_y <- sample(letters, 20)

bx <- boxplot(y~x1)

out_lab <- c()
for (i in seq(bx$out)) { 
    out_lab[i] <- lab_y[which(y == bx$out[i])[1]]
}

identify(bx$group, bx$out, labels = out_lab, cex = 0.7) identify() boxplot(y~x1)
identify(as.integer(as.factor(x1)), y, labels = lab_y, cex = 0.7)
-------------------------------------------------------------------------------------------------------
nc <- 400
z <- as.data.frame(matrix(rnorm(nc*100),ncol=nc))
library(ggplot2)
m <- melt(z)
m <- transform(m,variable=reorder(variable,value))
pdf(width=10,height=50,file="boxplot.pdf")
print(ggplot(m,aes(x=variable,y=value))+geom_boxplot()+coord_flip())
dev.off()
-------------------------------------------------------------------------------------------------------
geom_boxplot ?geom_boxplot notch notchwidth + geom_boxplot(notch = TRUE, notchwidth = 0.5) # confidence interval calculated by `boxplot.stats`
f <- function(x) {
    ans <- boxplot.stats(x)
    data.frame(ymin = ans$conf[1], ymax = ans$conf[2])
}

# overlay plot (upper panel below)
p <- ggplot(iris, aes(Species, Sepal.Length)) + geom_boxplot() +
  stat_summary(fun.data = f, geom = "linerange", colour = "skyblue", size = 5)
p

# base graphics (lower panel below)
boxplot(Sepal.Length ~ Species, data = iris, notch = TRUE)
 stat_summary f <- function(x) {
  ans <- boxplot.stats(x)
  data.frame(ymin = ans$conf[1], ymax = ans$conf[2], y = ans$stats[3])
}

p <- ggplot(iris, aes(Species, Sepal.Length)) + 
  geom_boxplot(width = 0.8) +
  stat_summary(fun.data = f, geom = "crossbar", 
    colour = NA, fill = "skyblue", width = 0.8, alpha = 0.5)
p
-------------------------------------------------------------------------------------------------------
f <- function(x, height) {
 ans <- median(x)
 data.frame(ymin = ans-height/2, ymax = ans+height/2, y = ans)
}

df <- data.frame(x=gl(2,6), y=c(1,1,1,1,3,3, 1,1,3,3,3,3))
ggplot(df, aes(x, y)) +  + 
 stat_summary(fun.data = f, geom = "crossbar", height = 0.1,
  colour = NA, fill = "skyblue", width = 0.8, alpha = 0.5) df <- data.frame(x=gl(2,6), y=c(c(1,1,1,1,3,3), c(1,1,3,3,3,3)*10))
ggplot(df, aes(x, y)) + + facet_grid(x~.)

gs <- grid.gget("geom_boxplot", grep = T)
if (inherits(gs, "grob")) gs <- list(gs)
gss <- llply(gs, function(g) g$children[[length(g$children)]])

l_ply(gss, function(g) grid.edit(g$name, grep=T, just = c("left", "center"), height = unit(0.05, "native"), gp = gpar(fill = "skyblue", alpha = 0.5, col = NA)))
-------------------------------------------------------------------------------------------------------
pars PerformanceAnalytics chart.Boxplot attach(cw)
par(mfrow=c(1,3))
boxplot(weight~Time, horizontal = F, main = "", xlab="Time", ylab="Weight", pars = list(), axes = FALSE)
axis(1,at=1:4,label=c(1:4))
axis(2)
boxplot(weight~Chick, horizontal = F, main = "", xlab = "Chick", ylab = "", pars = list( staplelty = "blank"), axes = FALSE)
axis(1,at=1:3,label=c("A","B","C"))
boxplot(weight~Diet, horizontal = F, main = "", xlab = "Diet", ylab = "", pars = list(boxcol = "white"), axes = FALSE)
axis(1,at=1:4,label=c("LoFat","HiFat","LoProt","HiProt"))
-------------------------------------------------------------------------------------------------------
ggplot(mtcars, aes(factor(cyl), mpg, fill = factor(vs))) + 
  geom_boxplot() +
  scale_fill_manual(name = "This is my title", values = c("pink", "green")
                    , labels = c("0" = "Foo", "1" = "Bar"))
-------------------------------------------------------------------------------------------------------
alpha geom_boxplot(aes(group=name), alpha = 0.8)
-------------------------------------------------------------------------------------------------------
name <- c("a", "a", "a", "a", "a", "a","a", "a", "a", "b", "b", "b","b", "b", "b","b", "b", "b")
class <- c("c1", "c1", "c1", "c2", "c2", "c2", "c3", "c3", "c3","c1", "c1", "c1", "c2", "c2", "c2", "c3", "c3", "c3")
year <- c("2010", "2009", "2008", "2010", "2009", "2008", "2010", "2009", "2008", "2010", "2009", "2008", "2010", "2009", "2008", "2010", "2009", "2008")
value <- c(100, 33, 80, 90, 80, 100, 100, 90, 80, 90, 80, 100, 100, 90, 80, 99, 80, 100)

df <- data.frame(name, class, year, value)
df
library(ggplot2)
p1 <- ggplot(df, aes(year, value))
p1 <- p1 + geom_boxplot(aes(group=name)) + geom_line(aes(group=name, size=name),colour="#ff2300",alpha=0.5) + 
  facet_wrap(~ class, scales = "free_y")
-------------------------------------------------------------------------------------------------------
#random data corresponding to your 5 columns    
 x <- data.frame(V = rnorm(100), W = rnorm(100), X = rnorm(100), Y = rnorm(100), 
     Z = rnorm(100))
 #remove axis with 'axes=F', define wider x-limits with 'xlim' 
 stripchart(x[1:5,],vertical=TRUE, pch=19,xlim=c(1,6),axes=F)
 #add boxplots next to stripchart, decrease width with 'boxwex'
 boxplot(x[1:5,],add=T,at=1.5:5.5,boxwex=0.25,axes=F)
 #add custom x axis
 axis(1,at=1.25:5.25,labels=names(x))
-------------------------------------------------------------------------------------------------------
ggplot2 library(ggplot2)
qplot(treatment, decrease, data = OrchardSprays) + 
  scale_y_log10() + 
  geom_boxplot() + 
  geom_point(colour = 'blue', alpha = 0.5)
-------------------------------------------------------------------------------------------------------
ggplot2 d <- data.frame(x = unlist(k), 
                grp = rep(letters[1:length(k)],times = sapply(k,length)))
ggplot(d,aes(x = grp, y = x)) + geom_boxplot() melt
-------------------------------------------------------------------------------------------------------
ggplot(dat, aes(group, values)) + 
  geom_boxplot(outlier.size = 0) + 
  geom_point(aes(x = as.numeric(group) + .25, colour=group), alpha=0.7) + 
  ylim(0, 1) + stat_summary(fun.y=mean, shape=3, col='red', geom='point') +
  opts(legend.position = "right") + ylab("values") + xlab("group")
-------------------------------------------------------------------------------------------------------
row.names() dat library(ggplot2)
dat$group <- row.names(dat)
dat.m <- melt(dat, id.vars = "group")
ggplot(dat.m, aes(group, value)) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
ggplot(PlantGrowth, aes(x=group, y=weight)) + geom_boxplot() + 
  scale_x_discrete(breaks = unique(PlantGrowth$group), labels = c(expression(ctrl), expression(trt[1]), expression(trt[2])))
-------------------------------------------------------------------------------------------------------
boxplot(t(dat))
-------------------------------------------------------------------------------------------------------
ggplot2 data d dat <- data.frame(scores=rnorm(1000,sd=500), 
                  names=sample(LETTERS, 1000, replace=TRUE)) ggplot(dat, aes(scores, reorder(names, scores, median))) + geom_boxplot() ggplot(dat, aes(reorder(names, scores, median), scores)) + geom_boxplot() coord_flip() ggplot(dat, aes(reorder(names, scores, median), scores)) + 
  geom_boxplot() + coord_flip()
-------------------------------------------------------------------------------------------------------
dat <- data.frame(x=c('a', 'b', 'c'), y = runif(300), z = c('d', 'e', 'e'))
dummy <- dat
dummy$z <- factor(dummy$z)
dummy <- dummy[1,]
dummy[,2]<-NaN
ggplot() + 
geom_boxplot(data=dat,aes(x, y, fill = z, colour = z), alpha = 0.2,legend=FALSE) +
geom_density(data=dummy,aes(x, fill = z, colour = z), alpha = 0.2)
-------------------------------------------------------------------------------------------------------
boxplot list A <- boxplot(...) names A$names conf A$conf boxplot ?boxplot Value: boxplot stats: a matrix, each column contains the extreme of the lower
          whisker, the lower hinge, the median, the upper hinge and the
          extreme of the upper whisker for one group/plot.  If all the
          inputs have the same class attribute, so will this component.
       n: a vector with the number of observations in each group.    
    conf: a matrix where each column contains the lower and upper
          extremes of the notch.    
     out: the values of any data points which lie beyond the extremes
          of the whiskers.    
   group: a vector of the same length as ‘out’ whose elements indicate
          to which group the outlier belongs.    
   names: a vector of names for the groups. A$stats A <- boxplot(...)
mytable <- A$stats
colnames(mytable)<-A$names
rownames(mytable)<-c('min','lower quartile','median','upper quartile','max')
mytable mytable U       UM        M       LM        L
min            178.9983 216.5999 189.8641 209.4726 202.0571
lower quartile 182.2274 217.0550 201.8764 209.5265 207.3756
median         202.1085 228.5095 219.5254 214.7852 220.0937
upper quartile 220.3754 267.0707 234.2601 230.0274 226.2467
max            221.9904 284.8324 279.3434 240.0647 240.3436 mytable['min','U']
-------------------------------------------------------------------------------------------------------
library(ggplot2)

match.ol.col <- function(plt,aes.cp='fill') {
  # matches outliers' color to either fill or colour aesthetics
  #   plt: ggplot layer object having boxplot
  #   aes.cp: aetsthetic from which copy color.  must be either 'fill' or 'col'
  # returns grid objects, so print it wigh grid.draw(), not print()
  if (aes.cp %in% c('color', 'colour')) aes.cp <- 'col'
  grob <- ggplotGrob(plt)
  bps <- getGrob(grob, 'boxplots', grep=T)
  for (bp in bps$children) {
    p <- getGrob(bp, 'point', grep=T)
    if (is.null(p)) next
    r <- getGrob(bp, 'rect', grep=T)
    grob <- geditGrob(grob, p$name, gp=gpar(col=r$gp[[aes.cp]]))
  }
  return(grob)
}


m <- ggplot(movies, aes(y = votes, x = factor(round(rating)),
    colour=factor(Animation)))
p <- m + geom_boxplot() + scale_y_log10()

grob <- match.ol.col(p, aes.cp='colour')
grid.draw(grob)
-------------------------------------------------------------------------------------------------------
facet_grid library(ggplot2)
 ggplot(mtcars, aes(factor(cyl), mpg)) + 
   geom_boxplot() + 
   facet_grid(cyl ~., scales = "free")
-------------------------------------------------------------------------------------------------------
boxplot( score ~ factor(category,exclude=NULL), data=sample_data) exclude=NA boxplot factor
-------------------------------------------------------------------------------------------------------
w1<-read.table(text="1β              2β     
 1.0199e-01        2.2545e-01       
 2.5303e-01        6.5301e-01
 1.2151e+00        1.1490e+00",header=TRUE, check.names=FALSE, fileEncoding="UTF-8")
boxplot(w1)
-------------------------------------------------------------------------------------------------------
pdf('rtest.pdf')
w1<-read.table("data_CMR",header=T) 
w2<-read.table("data_C",header=T) 
one<-expression(paste("1", beta,sep="")) 
two <- expression(paste("2", beta,sep="")) 
boxplot(w1[,], w2[,], w3[,],outline=FALSE, names=c(one,two)) 
dev.off()
-------------------------------------------------------------------------------------------------------
GeomBoxplot GeomPlotDark GeomBoxplotDark GeomBoxplot draw draw GeomBoxplot # ** ... ** require(ggplot2)

GeomBoxplotDark <- proto(ggplot2:::GeomBoxplot,
  draw <- function(., data, ..., outlier.colour = "black", outlier.shape = 16, outlier.size = 2) {
    defaults <- with(data, {                               # ** OPENING "{" ADDED **
    cols_dk <- rgb2hsv(col2rgb(colour)) - c(0, 0, 0.2)     # ** LINE ADDED        **
    cols_dk <- hsv(cols_dk[1,], cols_dk[2,], cols_dk[3,])  # ** LINE ADDED        **
    data.frame(x = x, xmin = xmin, xmax = xmax,
      colour = cols_dk,                                    # ** EDITED, PASSING IN cols_dk **
      size = size,
      linetype = 1, group = 1, alpha = 1,
      fill = alpha(fill, alpha),
      stringsAsFactors = FALSE
    )})                                                    # ** CLOSING "}" ADDED **
    defaults2 <- defaults[c(1,1), ]

    if (!is.null(data$outliers) && length(data$outliers[[1]] >= 1)) {
      outliers_grob <- with(data,
        GeomPoint$draw(data.frame(
          y = outliers[[1]], x = x[rep(1, length(outliers[[1]]))],
          colour=I(outlier.colour), shape = outlier.shape, alpha = 1,
          size = outlier.size, fill = NA), ...
        )
      )
    } else {
      outliers_grob <- NULL
    }

    with(data, ggname(.$my_name(), grobTree(
      outliers_grob,
      GeomPath$draw(data.frame(y=c(upper, ymax), defaults2), ...),
      GeomPath$draw(data.frame(y=c(lower, ymin), defaults2), ...),
      GeomRect$draw(data.frame(ymax = upper, ymin = lower, defaults), ...),
      GeomRect$draw(data.frame(ymax = middle, ymin = middle, defaults), ...)
    )))
  }
) geom_boxplot_dark() GeomBoxplotDark$new() geom_boxplot_dark <- function (mapping = NULL, data = NULL, stat = "boxplot", position = "dodge", 
    outlier.colour = "black", outlier.shape = 16, outlier.size = 2, 
    ...) 
GeomBoxplotDark$new(mapping = mapping, data = data, stat = stat, 
    position = position, outlier.colour = outlier.colour, outlier.shape = outlier.shape, 
    outlier.size = outlier.size, ...) geom_boxplot_dark() geom_boxplot() library(ggplot2)
library(RColorBrewer)

cols = brewer.pal(9, 'Set1')

n=10000
dat = data.frame(value=rnorm(n, 1:4), group=factor(1:4))

ggplot(dat, aes(x=group, y=value, color=group, group=group)) +
  geom_point(position=position_jitter(width=0.3), alpha=0.1) +
  scale_color_manual(values=cols) +
  geom_boxplot_dark(fill=0, outlier.size=0)
-------------------------------------------------------------------------------------------------------
ggplot() qplot() boxpt <- ggplot(data = mtcars, aes(factor(cyl), mpg)) 
boxpt + geom_boxplot(aes(factor(cyl), mpg)) + geom_point(aes(factor(cyl), mpg)) boxpt + geom_boxplot(aes(factor(cyl), mpg)) + geom_point(data = ddply(mtcars, .(cyl),summarise, mpg = mpg[mpg > quantile(mpg, 0.75)]), aes(factor(cyl), mpg)) geom_point
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
stack melt stack # Sample data
d <- matrix( rnorm(300), nc=30 )
d <- as.data.frame( d )
colnames(d) <- as.character(0:29)

# Plot
library(reshape2)
boxplot( value ~ variable, melt(d) )
-------------------------------------------------------------------------------------------------------
par(mfrow=c(2,2))
plot(first plot)
plot(second plot)
hist(third histogram)
boxplot(fourth boxplot)
-------------------------------------------------------------------------------------------------------
text() boxplot(c(1:10),ylim=c(0,12),axes=F)
text(11,"*",cex=2) boxplot(count ~ spray,data = InsectSprays,axes=F,ylim=c(0,30))
text(c(25,23,-10,-10,-10,27),"*",cex=2)
-------------------------------------------------------------------------------------------------------
text() dfrm <- data.frame(y=rnorm(100, mean=10), x=gl(4, 25))
dfrm$y[dfrm$x==2] <- dfrm$y[dfrm$x==2]+2
boxplot(y ~ x, data=dfrm, ylim=c(min(dfrm$y)-.5, max(dfrm$y)+.5))
text(x=2, y=max(dfrm$y[dfrm$x==2]), "*", pos=3, cex=1.2) x=2 mtext mtext("*", side=3, line=0, at=2, cex=1.2)
-------------------------------------------------------------------------------------------------------
boxplot(data=dat, Conductivity ~ Treatment + Time) ggplot2 library(ggplot2)

dat <- read.table('clipboard', header=T)
ggplot(dat, aes(colour=factor(Time), x=Treatment, y = Conductivity))+geom_boxplot()
-------------------------------------------------------------------------------------------------------
?boxplot names
boxplot(Conductivity ~ Treatment + Time, names=rep(levels(dat$Treatment),each=3), data=dat) 
levels(dat$Treatment) c("EV","Z1a","Z1b") rep(xxx,each=3) c("EV","EV","EV","Z1a","Z1a","Z1a","Z1b","Z1b","Z1b) ggplot2 lattice
-------------------------------------------------------------------------------------------------------
NA ggplot2-0.8.9 ggplot2-0.9.0 scale_x_date group group=interaction(factor(ExecutionDate),TimeOfDay) x iExecutionDate ExecutionDate geom_smooth scale_x_date ggplot(x10NoOutliers, aes(x=iExecutionDate, y=Concentration)) +
    geom_boxplot(aes(group=interaction(factor(ExecutionDate),TimeOfDay),fill=TimeOfDay),
                 outlier.colour = "blue") +
    geom_smooth(aes(group = TimeOfDay, colour = TimeOfDay ) ) +
    scale_x_datetime(name = "Execution Date", 
                     breaks=date_breaks(width="1 week"),
                     labels = date_format()) +
    scale_y_continuous(expression( "Concentration,"~frac( "ng" , mu*"l" ) )) +
    opts(title = "Boxplot of Concentration by Execution Date and Time of Day",
         axis.text.x = theme_text( size = 7 , angle = -90 , hjust = 0 ) ) dput() x10NoOutliers <-
structure(list(Concentration = c(8, 8.2, 7.5, 8.6, 7.9, 8.4, 
7.6, 8.4, 7.5, 8.7, 7.9, 7.8, 8.9, 8.6, 7.9, 7.6, 8.2, 8.6, 8.9, 
8.8, 8.4, 8.5, 7.8, 8, 8, 7.6, 9.2, 8.1, 7.5, 8.4, 8.3, 7.2, 
8.7, 8.2, 7.7, 8.2, 8.6, 8.9, 7.6, 8.5, 8.5, 8.1, 8.3, 8.8, 8.3, 
9.2, 7.7, 8.5, 7.7, 8.6, 8.8, 9, 9.1, 9, 9.2, 7.8, 8, 7.6, 7.7, 
8.9, 8, 8.9, 9.7, 8.7, 8.1, 8.5, 8.7, 8.5, 9.3, 8.5, 9.1, 7.6, 
8.7, 9, 9.2, 8.7, 9, 7.8, 7.8, 7.9, 9.7, 8.9, 9.4, 8.1, 9.6, 
9.4, 9, 8.4, 9.7, 8.4, 7.5, 8.7, 8.6, 7.8, 10.4, 8.5, 8.2, 8.5, 
8.8, 8.7, 7.6, 8.5, 8.2, 8.8, 8.5, 9.1, 8.3, 9.1, 8.6, 8.8, 8.6, 
8.5, 9.8, 9.3, 8.9, 9.5, 7.7, 8.5, 8.5, 7.9, 8.2, 7.7, 8.6, 8.9, 
8.3, 8.2, 8.8, 8.9, 8.3, 8.3, 9.9, 8.2, 8, 8.6, 8.4, 8.3, 8.9, 
8.5, 8.5, 8.7, 7.6, 8.6, 8.3, 8.1, 7.8, 8, 8.6, 7.9, 8.1, 9, 
8.2, 8.1, 8.4, 8.3, 8.2, 9, 8.8, 8, 8, 8.8, 7.8, 7.9, 9.2, 8.7, 
7.6, 8.6, 8.2, 7.8, 7, 8.2, 8.5, 8.3, 8.4, 8.8, 7.8, 7.9, 8.7, 
8.6, 7.8, 7.3, 8.1, 8.3, 8.9, 8.6, 8.6, 8.3, 8.3, 8.6, 8.4, 8.3, 
8.2, 8.7, 7.3, 9.4, 8.2, 8.9, 9.3, 8.6, 8.6, 7.9, 11.8, 7.9, 
8.5, 9.9, 8.2, 7.6, 8.3, 8.9, 9.8, 8.7, 9.2, 11.6, 9.9, 8.4, 
10, 9, 9.5, 8.1, 8.4, 7.8, 7.5, 7.8, 7.4, 8.8, 7.1, 8.2, 8.8, 
8.6, 7.8, 8.7, 8.3, 8, 9.5, 7.5, 8.3, 8.8, 9.3, 8.1, 8.3, 7.9, 
8, 9.9, 8.7, 8.7, 9.1, 9.2, 9, 8, 9, 8.8, 8, 10.1, 7.8, 9.3, 
9, 9.2, 9.9, 9.5, 9.1, 9.6, 9.9, 9.8, 9.2, 9.2, 10.5, 9.4, 9.3, 
9.3, 9.6, 9.9, 9.5, 10.3, 9.6, 9.8, 9.5, 8.9, 10.4, 9.2, 9.4, 
10.3, 9.4, 10.2, 9.2, 9.1, 10.6, 9.2, 9.1, 9.8, 10, 9.2, 9.3, 
10, 9.3, 9.4, 9.6, 10.3, 9, 10.6, 9.1, 10.7, 9.5, 13, 9.9, 9.1, 
10.1, 9.7, 9.3, 10.5, 10.2, 9.8, 9.9, 10.5, 10.5, 9, 10, 10.3, 
9.8, 10, 10.6, 8.8, 9.3, 10.2, 8.9, 9.5, 10.9, 11.5, 9.1, 9.4, 
9.7, 8.7, 9.9, 8.9, 10.7, 9.7, 9.7, 9.2, 9.7, 10.2, 9.2, 9.5, 
11, 8.8, 9.6, 10, 10, 10.4, 10.6, 10.1, 9.4, 9, 10.7, 9.7, 9, 
9.8, 10.2, 9.9, 10, 10.2, 9.4, 9.4, 9.7, 10, 9.7, 9.9, 10.7, 
10.1, 9.7, 10.8, 10.7, 10.4, 10.1, 10.7, 10, 10, 10, 10, 10.1, 
10.1, 10.2, 10.2, 10.3, 9.5, 10.2, 9.5, 9.8, 9.1, 9.8, 9.7, 9.1, 
10.5, 9.8, 9.4, 10.2, 9.9, 10, 10.7, 10.1, 9.6, 9.8, 10.2, 10, 
11, 9.9, 10.1, 10.7, 9.4, 9.9, 10.4, 10.5), ExecutionDate = structure(c(1305788400, 
1291017600, 1290153600, 1292486400, 1297843200, 1290153600, 1289376000, 
1284620400, 1289289600, 1289203200, 1284447600, 1287039600, 1288940400, 
1288854000, 1288681200, 1284447600, 1284706800, 1284534000, 1284620400, 
1284620400, 1284361200, 1284706800, 1284447600, 1284534000, 1284361200, 
1284534000, 1284706800, 1284534000, 1284447600, 1284361200, 1284361200, 
1284706800, 1284447600, 1287558000, 1284706800, 1284361200, 1284534000, 
1284706800, 1284534000, 1284706800, 1288249200, 1284447600, 1284447600, 
1284102000, 1284534000, 1288162800, 1286953200, 1284102000, 1287558000, 
1284447600, 1284706800, 1288162800, 1287471600, 1284534000, 1284102000, 
1284447600, 1284447600, 1284447600, 1286780400, 1284620400, 1284447600, 
1287385200, 1286521200, 1284706800, 1284534000, 1286521200, 1284102000, 
1287558000, 1286434800, 1284534000, 1288162800, 1284534000, 1284706800, 
1284102000, 1288076400, 1284534000, 1284534000, 1284447600, 1284447600, 
1284534000, 1307602800, 1284447600, 1287990000, 1287126000, 1286348400, 
1284620400, 1286348400, 1287558000, 1312441200, 1302678000, 1302591600, 
1314687600, 1311058800, 1307516400, 1309244400, 1294214400, 1299225600, 
1299139200, 1297843200, 1291795200, 1299657600, 1299139200, 1292486400, 
1301986800, 1299139200, 1297670400, 1299052800, 1292486400, 1296806400, 
1296201600, 1301900400, 1291795200, 1295942400, 1291708800, 1291622400, 
1292400000, 1299052800, 1298966400, 1291622400, 1290585600, 1301900400, 
1301554800, 1300172400, 1295942400, 1291276800, 1301468400, 1299657600, 
1294041600, 1291276800, 1293609600, 1301295600, 1300690800, 1300431600, 
1293436800, 1290585600, 1290153600, 1295856000, 1298880000, 1293004800, 
1299830400, 1300431600, 1299571200, 1295596800, 1295510400, 1300345200, 
1299830400, 1292918400, 1299571200, 1299484800, 1289376000, 1290153600, 
1291017600, 1289894400, 1300258800, 1298275200, 1292313600, 1300172400, 
1291968000, 1295337600, 1298016000, 1299484800, 1295337600, 1291881600, 
1294646400, 1291190400, 1290153600, 1289289600, 1291017600, 1289980800, 
1294387200, 1292918400, 1294300800, 1299484800, 1292832000, 1299830400, 
1299744000, 1292572800, 1291190400, 1299225600, 1299744000, 1291881600, 
1299657600, 1310972400, 1312441200, 1307084400, 1312441200, 1289548800, 
1289462400, 1291190400, 1292572800, 1291881600, 1307084400, 1313650800, 
1313564400, 1309244400, 1314860400, 1313046000, 1305270000, 1306998000, 
1306998000, 1314601200, 1314601200, 1302505200, 1314342000, 1310713200, 
1305097200, 1310713200, 1312354800, 1310626800, 1314255600, 1314255600, 
1312873200, 1309158000, 1312354800, 1308812400, 1310540400, 1310454000, 
1312268400, 1308726000, 1305010800, 1306911600, 1311750000, 1304924400, 
1310367600, 1304492400, 1306911600, 1306393200, 1315897200, 1311750000, 
1314255600, 1308726000, 1304492400, 1313737200, 1312786800, 1311663600, 
1308294000, 1311577200, 1310108400, 1306306800, 1304406000, 1304060400, 
1312786800, 1303110000, 1302850800, 1308207600, 1311577200, 1302764400, 
1309935600, 1308121200, 1311318000, 1315810800, 1309849200, 1311231600, 
1311058800, 1307689200, 1309417200, 1315810800, 1315551600, 1322035200, 
1327478400, 1327651200, 1317020400, 1322812800, 1321862400, 1321603200, 
1320652800, 1319007600, 1316674800, 1320390000, 1322553600, 1317106800, 
1319698800, 1317020400, 1326873600, 1320390000, 1317020400, 1319785200, 
1320825600, 1323417600, 1322035200, 1326355200, 1319612400, 1319526000, 
1316070000, 1323849600, 1324368000, 1318834800, 1323331200, 1322035200, 
1317279600, 1320044400, 1321516800, 1317106800, 1319094000, 1319612400, 
1318575600, 1318402800, 1322553600, 1319526000, 1320652800, 1320652800, 
1319526000, 1320303600, 1323676800, 1316502000, 1325836800, 1324972800, 
1318921200, 1324022400, 1316674800, 1322467200, 1322467200, 1321948800, 
1323072000, 1324540800, 1319698800, 1318921200, 1317279600, 1318834800, 
1316415600, 1316674800, 1322640000, 1318575600, 1320912000, 1317193200, 
1317193200, 1316588400, 1319094000, 1316070000, 1324972800, 1316674800, 
1319526000, 1321948800, 1318834800, 1320303600, 1316070000, 1317106800, 
1318921200, 1323763200, 1320217200, 1319612400, 1323158400, 1321603200, 
1309330800, 1309330800, 1309330800, 1309330800, 1309330800, 1325232000, 
1315897200, 1317193200, 1321862400, 1324454400, 1322640000, 1319180400, 
1319785200, 1309330800, 1319698800, 1321344000, 1320739200, 1324972800, 
1309330800, 1321430400, 1309330800, 1322640000, 1319180400, 1318489200, 
1318489200, 1309330800, 1309330800, 1309330800, 1309330800, 1309330800, 
1309330800, 1309330800, 1309330800, 1323676800, 1323417600, 1328601600, 
1324022400, 1323849600, 1323331200, 1323676800, 1322812800, 1330502400, 
1323072000, 1323158400, 1323417600, 1323763200, 1330070400, 1324022400, 
1323763200, 1329120000, 1323158400, 1323676800, 1330070400, 1323417600, 
1323072000, 1323072000, 1323331200, 1323331200, 1323849600, 1322812800, 
1323158400, 1323849600, 1322812800, 1323763200, 1330675200, 1328515200
), class = c("POSIXct", "POSIXt"), tzone = ""), iExecutionDate = structure(c(1305831600, 
1291060800, 1290196800, 1292529600, 1297886400, 1290196800, 1289419200, 
1284663600, 1289332800, 1289246400, 1284490800, 1287082800, 1288983600, 
1288897200, 1288724400, 1284490800, 1284750000, 1284577200, 1284663600, 
1284663600, 1284404400, 1284750000, 1284490800, 1284577200, 1284404400, 
1284577200, 1284750000, 1284577200, 1284490800, 1284404400, 1284404400, 
1284750000, 1284490800, 1287601200, 1284750000, 1284404400, 1284577200, 
1284750000, 1284577200, 1284750000, 1288292400, 1284490800, 1284490800, 
1284145200, 1284577200, 1288206000, 1286996400, 1284145200, 1287601200, 
1284490800, 1284750000, 1288206000, 1287514800, 1284577200, 1284145200, 
1284490800, 1284490800, 1284490800, 1286823600, 1284663600, 1284490800, 
1287428400, 1286564400, 1284750000, 1284577200, 1286564400, 1284145200, 
1287601200, 1286478000, 1284577200, 1288206000, 1284577200, 1284750000, 
1284145200, 1288119600, 1284577200, 1284577200, 1284490800, 1284490800, 
1284577200, 1307646000, 1284490800, 1288033200, 1287169200, 1286391600, 
1284663600, 1286391600, 1287601200, 1312484400, 1302721200, 1302634800, 
1314730800, 1311102000, 1307559600, 1309287600, 1294257600, 1299268800, 
1299182400, 1297886400, 1291838400, 1299700800, 1299182400, 1292529600, 
1302030000, 1299182400, 1297713600, 1299096000, 1292529600, 1296849600, 
1296244800, 1301943600, 1291838400, 1295985600, 1291752000, 1291665600, 
1292443200, 1299096000, 1299009600, 1291665600, 1290628800, 1301943600, 
1301598000, 1300215600, 1295985600, 1291320000, 1301511600, 1299700800, 
1294084800, 1291320000, 1293652800, 1301338800, 1300734000, 1300474800, 
1293480000, 1290628800, 1290196800, 1295899200, 1298923200, 1293048000, 
1299873600, 1300474800, 1299614400, 1295640000, 1295553600, 1300388400, 
1299873600, 1292961600, 1299614400, 1299528000, 1289419200, 1290196800, 
1291060800, 1289937600, 1300302000, 1298318400, 1292356800, 1300215600, 
1292011200, 1295380800, 1298059200, 1299528000, 1295380800, 1291924800, 
1294689600, 1291233600, 1290196800, 1289332800, 1291060800, 1290024000, 
1294430400, 1292961600, 1294344000, 1299528000, 1292875200, 1299873600, 
1299787200, 1292616000, 1291233600, 1299268800, 1299787200, 1291924800, 
1299700800, 1311015600, 1312484400, 1307127600, 1312484400, 1289592000, 
1289505600, 1291233600, 1292616000, 1291924800, 1307127600, 1313694000, 
1313607600, 1309287600, 1314903600, 1313089200, 1305313200, 1307041200, 
1307041200, 1314644400, 1314644400, 1302548400, 1314385200, 1310756400, 
1305140400, 1310756400, 1312398000, 1310670000, 1314298800, 1314298800, 
1312916400, 1309201200, 1312398000, 1308855600, 1310583600, 1310497200, 
1312311600, 1308769200, 1305054000, 1306954800, 1311793200, 1304967600, 
1310410800, 1304535600, 1306954800, 1306436400, 1315940400, 1311793200, 
1314298800, 1308769200, 1304535600, 1313780400, 1312830000, 1311706800, 
1308337200, 1311620400, 1310151600, 1306350000, 1304449200, 1304103600, 
1312830000, 1303153200, 1302894000, 1308250800, 1311620400, 1302807600, 
1309978800, 1308164400, 1311361200, 1315854000, 1309892400, 1311274800, 
1311102000, 1307732400, 1309460400, 1315854000, 1315594800, 1322078400, 
1327521600, 1327694400, 1317063600, 1322856000, 1321905600, 1321646400, 
1320696000, 1319050800, 1316718000, 1320433200, 1322596800, 1317150000, 
1319742000, 1317063600, 1326916800, 1320433200, 1317063600, 1319828400, 
1320868800, 1323460800, 1322078400, 1326398400, 1319655600, 1319569200, 
1316113200, 1323892800, 1324411200, 1318878000, 1323374400, 1322078400, 
1317322800, 1320087600, 1321560000, 1317150000, 1319137200, 1319655600, 
1318618800, 1318446000, 1322596800, 1319569200, 1320696000, 1320696000, 
1319569200, 1320346800, 1323720000, 1316545200, 1325880000, 1325016000, 
1318964400, 1324065600, 1316718000, 1322510400, 1322510400, 1321992000, 
1323115200, 1324584000, 1319742000, 1318964400, 1317322800, 1318878000, 
1316458800, 1316718000, 1322683200, 1318618800, 1320955200, 1317236400, 
1317236400, 1316631600, 1319137200, 1316113200, 1325016000, 1316718000, 
1319569200, 1321992000, 1318878000, 1320346800, 1316113200, 1317150000, 
1318964400, 1323806400, 1320260400, 1319655600, 1323201600, 1321646400, 
1309374000, 1309374000, 1309374000, 1309374000, 1309374000, 1325275200, 
1315940400, 1317236400, 1321905600, 1324497600, 1322683200, 1319223600, 
1319828400, 1309374000, 1319742000, 1321387200, 1320782400, 1325016000, 
1309374000, 1321473600, 1309374000, 1322683200, 1319223600, 1318532400, 
1318532400, 1309374000, 1309374000, 1309374000, 1309374000, 1309374000, 
1309374000, 1309374000, 1309374000, 1323720000, 1323460800, 1328644800, 
1324065600, 1323892800, 1323374400, 1323720000, 1322856000, 1330545600, 
1323115200, 1323201600, 1323460800, 1323806400, 1330113600, 1324065600, 
1323806400, 1329163200, 1323201600, 1323720000, 1330113600, 1323460800, 
1323115200, 1323115200, 1323374400, 1323374400, 1323892800, 1322856000, 
1323201600, 1323892800, 1322856000, 1323806400, 1330718400, 1328558400
), class = c("POSIXct", "POSIXt"), tzone = ""), pExecutionDate = structure(c(1305763200, 
1290988800, 1290124800, 1292457600, 1297814400, 1290124800, 1289347200, 
1284595200, 1289260800, 1289174400, 1284422400, 1287014400, 1288915200, 
1288828800, 1288656000, 1284422400, 1284681600, 1284508800, 1284595200, 
1284595200, 1284336000, 1284681600, 1284422400, 1284508800, 1284336000, 
1284508800, 1284681600, 1284508800, 1284422400, 1284336000, 1284336000, 
1284681600, 1284422400, 1287532800, 1284681600, 1284336000, 1284508800, 
1284681600, 1284508800, 1284681600, 1288224000, 1284422400, 1284422400, 
1284076800, 1284508800, 1288137600, 1286928000, 1284076800, 1287532800, 
1284422400, 1284681600, 1288137600, 1287446400, 1284508800, 1284076800, 
1284422400, 1284422400, 1284422400, 1286755200, 1284595200, 1284422400, 
1287360000, 1286496000, 1284681600, 1284508800, 1286496000, 1284076800, 
1287532800, 1286409600, 1284508800, 1288137600, 1284508800, 1284681600, 
1284076800, 1288051200, 1284508800, 1284508800, 1284422400, 1284422400, 
1284508800, 1307577600, 1284422400, 1287964800, 1287100800, 1286323200, 
1284595200, 1286323200, 1287532800, 1312416000, 1302652800, 1302566400, 
1314662400, 1311033600, 1307491200, 1309219200, 1294185600, 1299196800, 
1299110400, 1297814400, 1291766400, 1299628800, 1299110400, 1292457600, 
1301961600, 1299110400, 1297641600, 1299024000, 1292457600, 1296777600, 
1296172800, 1301875200, 1291766400, 1295913600, 1291680000, 1291593600, 
1292371200, 1299024000, 1298937600, 1291593600, 1290556800, 1301875200, 
1301529600, 1300147200, 1295913600, 1291248000, 1301443200, 1299628800, 
1294012800, 1291248000, 1293580800, 1301270400, 1300665600, 1300406400, 
1293408000, 1290556800, 1290124800, 1295827200, 1298851200, 1292976000, 
1299801600, 1300406400, 1299542400, 1295568000, 1295481600, 1300320000, 
1299801600, 1292889600, 1299542400, 1299456000, 1289347200, 1290124800, 
1290988800, 1289865600, 1300233600, 1298246400, 1292284800, 1300147200, 
1291939200, 1295308800, 1297987200, 1299456000, 1295308800, 1291852800, 
1294617600, 1291161600, 1290124800, 1289260800, 1290988800, 1289952000, 
1294358400, 1292889600, 1294272000, 1299456000, 1292803200, 1299801600, 
1299715200, 1292544000, 1291161600, 1299196800, 1299715200, 1291852800, 
1299628800, 1310947200, 1312416000, 1307059200, 1312416000, 1289520000, 
1289433600, 1291161600, 1292544000, 1291852800, 1307059200, 1313625600, 
1313539200, 1309219200, 1314835200, 1313020800, 1305244800, 1306972800, 
1306972800, 1314576000, 1314576000, 1302480000, 1314316800, 1310688000, 
1305072000, 1310688000, 1312329600, 1310601600, 1314230400, 1314230400, 
1312848000, 1309132800, 1312329600, 1308787200, 1310515200, 1310428800, 
1312243200, 1308700800, 1304985600, 1306886400, 1311724800, 1304899200, 
1310342400, 1304467200, 1306886400, 1306368000, 1315872000, 1311724800, 
1314230400, 1308700800, 1304467200, 1313712000, 1312761600, 1311638400, 
1308268800, 1311552000, 1310083200, 1306281600, 1304380800, 1304035200, 
1312761600, 1303084800, 1302825600, 1308182400, 1311552000, 1302739200, 
1309910400, 1308096000, 1311292800, 1315785600, 1309824000, 1311206400, 
1311033600, 1307664000, 1309392000, 1315785600, 1315526400, 1322006400, 
1327449600, 1327622400, 1316995200, 1322784000, 1321833600, 1321574400, 
1320624000, 1318982400, 1316649600, 1320364800, 1322524800, 1317081600, 
1319673600, 1316995200, 1326844800, 1320364800, 1316995200, 1319760000, 
1320796800, 1323388800, 1322006400, 1326326400, 1319587200, 1319500800, 
1316044800, 1323820800, 1324339200, 1318809600, 1323302400, 1322006400, 
1317254400, 1320019200, 1321488000, 1317081600, 1319068800, 1319587200, 
1318550400, 1318377600, 1322524800, 1319500800, 1320624000, 1320624000, 
1319500800, 1320278400, 1323648000, 1316476800, 1325808000, 1324944000, 
1318896000, 1323993600, 1316649600, 1322438400, 1322438400, 1321920000, 
1323043200, 1324512000, 1319673600, 1318896000, 1317254400, 1318809600, 
1316390400, 1316649600, 1322611200, 1318550400, 1320883200, 1317168000, 
1317168000, 1316563200, 1319068800, 1316044800, 1324944000, 1316649600, 
1319500800, 1321920000, 1318809600, 1320278400, 1316044800, 1317081600, 
1318896000, 1323734400, 1320192000, 1319587200, 1323129600, 1321574400, 
1309305600, 1309305600, 1309305600, 1309305600, 1309305600, 1325203200, 
1315872000, 1317168000, 1321833600, 1324425600, 1322611200, 1319155200, 
1319760000, 1309305600, 1319673600, 1321315200, 1320710400, 1324944000, 
1309305600, 1321401600, 1309305600, 1322611200, 1319155200, 1318464000, 
1318464000, 1309305600, 1309305600, 1309305600, 1309305600, 1309305600, 
1309305600, 1309305600, 1309305600, 1323648000, 1323388800, 1328572800, 
1323993600, 1323820800, 1323302400, 1323648000, 1322784000, 1330473600, 
1323043200, 1323129600, 1323388800, 1323734400, 1330041600, 1323993600, 
1323734400, 1329091200, 1323129600, 1323648000, 1330041600, 1323388800, 
1323043200, 1323043200, 1323302400, 1323302400, 1323820800, 1322784000, 
1323129600, 1323820800, 1322784000, 1323734400, 1330646400, 1328486400
), class = c("POSIXct", "POSIXt"), tzone = ""), TimeOfDay = structure(c(1L, 
1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 3L, 1L, 
1L, 2L, 2L, 2L, 1L, 3L, 2L, 2L, 2L, 1L, 2L, 3L, 2L, 2L, 1L, 3L, 
2L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 3L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 
2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 
1L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 
2L, 1L, 1L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 
2L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 2L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 3L, 1L, 1L, 1L, 1L, 1L, 
2L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 2L, 1L, 1L, 
1L, 3L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 3L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
2L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 
1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 
1L, 1L, 1L, 2L, 3L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 3L, 
2L, 2L, 3L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 
1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 
1L, 3L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 
1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 1L, 
1L, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 1L, 2L, 1L, 
2L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 
2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 1L, 2L, 
1L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 
1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L), .Label = c("AM", "MID", "PM"
), class = "factor")), .Names = c("Concentration", "ExecutionDate", 
"iExecutionDate", "pExecutionDate", "TimeOfDay"), row.names = c(NA, 
-409L), class = "data.frame")
-------------------------------------------------------------------------------------------------------
library(ggplot2)
library(scales)
ggplot(fruits, aes(fruit, taste) ) +  
    geom_boxplot() 
    scale_y_log10(breaks = trans_breaks('log10', function(x) 10^x),
                  labels = trans_format('log10', math_format(10^.x)))
-------------------------------------------------------------------------------------------------------
reorder() myDataFrame$TYPE <- with(myDataFrame, reorder(TYPE, SCORE, mean))
boxplot( SCORE~TYPE, data=myDataFrame )
-------------------------------------------------------------------------------------------------------
scale_x_discrete drop=FALSE p <- ggplot(data=dftest[dftest$time!=2,],aes(x=factor(time,levels=1:10),y=value))
p + geom_boxplot() + 
  scale_x_discrete("time", breaks=factor(1:10), drop=FALSE) ggplot ggplot dfplot <- dftest[dftest$time!=2, ]
dfplot$time <- factor(dfplot$time, levels=1:10)

ggplot(data=dfplot, aes(x=time ,y=value)) +
    geom_boxplot() + 
    scale_x_discrete("time", drop=FALSE)
-------------------------------------------------------------------------------------------------------
stat_summary ##Load the library
library(ggplot2)
data(mpg)

##Create a function to calculate the points
##Probably a built-in function that does this
get_tails = function(x) {
  q1 = quantile(x)[2]
  q3 = quantile(x)[4]
  iqr = q3 -q1
  upper = q3+1.5*iqr
  lower = q1-1.5*iqr
  if(length(x) == 1){return(x)} # will deal with abnormal marks at the periphery of the plot if there is one value only
  ##Trim upper and lower
  up = max(x[x < upper])
  lo = min(x[x > lower])
  return(c(lo, up))
} stat_summary ggplot(mpg, aes(x=drv,y=hwy)) + geom_boxplot() + 
  stat_summary(geom="point", fun.y= get_tails, colour="Red")
-------------------------------------------------------------------------------------------------------
##Some dummy data
dd = data.frame(values = rnorm(40), type=LETTERS[1:4])

##Don't plot the axes labels
##but add in the "plot frame"
boxplot(dd$values ~ dd$type, axes=FALSE, frame.plot=TRUE, ylim=c(-4, 4))

##Now add in the y-axis
axis(2, seq(-4,4,by=2))
##Add in the x-axis at points: 1.5 and 3.5
axis(1, c(1.5,3.5), c("Med", "Mad"))
-------------------------------------------------------------------------------------------------------
order colnames (zx) <- seq_len (ncol (zx))
boxplot(zx [, order (zx_means)], horizontal = FALSE, outline = FALSE)
points(zx_means [ order (zx_means)], pch = 22, col = "darkgrey", lwd = 7)
-------------------------------------------------------------------------------------------------------
library(ggplot2)
library(reshape)

zx <- replicate (5, rnorm(50))

# ggplot2 uses long-shaped data.frame's, not matrices
zx_flat = melt(zx)[c(2,3)]
names(zx_flat) = c("cat","value")

# Here I calculate the mean per category
zx_flat = ddply(zx_flat, .(cat), mutate, mn = mean(value))
zx_flat = sort_df(zx_flat, "mn") # Order according to mean
# Here I manually set the order of the levels
# as this is the order ggplot2 uses
zx_flat$cat = factor(zx_flat$cat, levels = unique(zx_flat$mn))

# make the plot
ggplot(aes(factor(mn), value), data = zx_flat) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
N     <- length(d$Control_Raw_TagCount)
x     <- c(d$Control_Raw_TagCount, d$ICLIP_EZH2_Raw_TagCount)
group <- rep(c("Control_Raw_TagCount", "ICLIP_EZH2_Raw_TagCount"), c(N, N))
boxplot(x ~ group) d histPlot openintro probability=TRUE, hollow=TRUE # install.packages("openintro")
library(openintro)
histPlot(d$Control_Raw_TagCount, probability=TRUE, hollow=TRUE)
histPlot(d$ICLIP_EZH2_Raw_TagCount, probability=TRUE, hollow=TRUE,
         lty=3, border='red') ylim histPlot ylim=c(0,0.05)
-------------------------------------------------------------------------------------------------------
zx <- replicate (5, rnorm(50))
zx_means <- (colMeans(zx, na.rm = TRUE))
boxplot(zx, horizontal = FALSE, outline = FALSE)
points(zx_means, pch = 22, col = "darkgrey", lwd = 7)
-------------------------------------------------------------------------------------------------------
add=TRUE ##Some data
a = rnorm(20)
b = rnorm(20, 2, 0.3)

##The plots
boxplot(a)
boxplot(b, add=TRUE, col=2)
-------------------------------------------------------------------------------------------------------
R> x = rnorm(10)
R> boxplot(x, ylim=c(-3, 3))
R> text(1, 1, "Hi", col=2) text(1, means, LETTERS[length(means)], col=2) text(1.3, means, LETTERS[length(means)], col=2)
-------------------------------------------------------------------------------------------------------
medcol boxplot(matrix(rnorm(100), ncol=2), medcol="red")
-------------------------------------------------------------------------------------------------------
ggplot2 library(ggplot2)
ggplot(mydata, aes(x=INDFACT, y=Y, fill=INDFACT))+ 
  geom_boxplot()+
  facet_wrap(~CLUSFACT)
-------------------------------------------------------------------------------------------------------
library("ggplot2")
library("lubridate")


# This code from Sacha Eskamp
# http://stackoverflow.com/a/10269840/1290420

# Generate a data set
set.seed(1)
start <- strptime("2012-01-05 00:00:00",
                  format="%Y-%m-%d %H:%M:%S")
end <- strptime("2012-03-05 00:00:00",
                format="%Y-%m-%d %H:%M:%S")

df <- data.frame(message.id = 1:10000,
                 user.id = sample(1:30,10000,
                                 TRUE,
                                 prob=1:30),
                 message.date = seq(start,
                                   end,
                                   length=10000)
                 ) plyr # Clean up the data frame and add a column 
# with combined day-user
df$day <- yday(df$message.date)
df <- df[ df$day!=65, c(2,4) ]
df$day.user <- paste(df$day, df$user.id, sep="-")

# Copy into new data frame with counts for each
# day-user combination
df2 <- aggregate(df, 
                 by=list(df$day, 
                         df$day.user), 
                 FUN="length"
                 )
df2 <- df2[,c(1,2,3)]
names(df2) <- c("day", "user", "count")
df2$user <- gsub(".+-(.+)", "\\1", df2$user) p <- ggplot(df2,
            aes(x=day,
                y=count))
p <- p + geom_boxplot(aes(group=day), colour="grey80")
p <- p + stat_summary(fun.y=mean, 
                      colour="steelblue", 
                      geom="line",
                      size=1)
p <- p + stat_summary(fun.y=mean, 
                      colour="red", 
                      geom="point",
                      size=3)
p
-------------------------------------------------------------------------------------------------------
ggplot2 library(ggplot2)
ggplot(data = d, aes(x = f1, y = x)) + 
  geom_boxplot(aes(fill = f2), width = 0.8) + theme_bw()
-------------------------------------------------------------------------------------------------------
tailindex memorypar geom_jitter geom_boxplot geom_jitter library(ggplot2)
dodge <- position_dodge(width = 0.9)
ex5$memorypar2 <- as.numeric(ex5$tailindex) + 
  3 * (as.numeric(as.character(ex5$memorypar)) - 0.2) 

p <- ggplot(ex5,aes(x=tailindex , y=hillest)) +
   scale_x_discrete() +
   geom_jitter(aes(colour = memorypar, x = memorypar2), 
     position = position_jitter(width = .05), alpha = 0.5) +
   geom_boxplot(aes(colour = memorypar), outlier.colour = NA, position = dodge) +
   facet_wrap(~ process, nrow = 2)
p
-------------------------------------------------------------------------------------------------------
show_guide=FALSE geom_boxplot() qplot(data=CO2,
      x=Type,
      y=uptake,
      colour=Plant,
      shape=Treatment)+
        geom_boxplot(show_guide=FALSE)
-------------------------------------------------------------------------------------------------------
\documentclass{article}
\begin{document}

Side by side images:

\begin{figure}[htpb]
<<myChunk, fig.width=3, fig.height=2.5, out.width='.49\\linewidth', fig.show='hold'>>=
par(mar=c(4,4,.1,.1),cex.lab=.95,cex.axis=.9,mgp=c(2,.7,0),tcl=-.3)
plot(cars)
boxplot(cars$dist,xlab='dist')
@
\end{figure}

Ta da!

\end{document} par \documentclass{article}
\usepackage{wrapfig,lipsum}
%------------------------------------------
\begin{document}
This is where the table goes with text wrapping around it. You may 
embed tabular environment inside wraptable environment and customize as you like.
%------------------------------------------
\begin{wraptable}{l}{5.5cm}
\caption{A wrapped table going nicely inside the text.}\label{wrap-tab:1}
<<mychunk,results = asis,echo = FALSE>>=
library(xtable)
print(xtable(head(cars)),floating = FALSE)
@
\end{wraptable} 
%------------------------------------------
\lipsum[2] 
\par
Table~\ref{wrap-tab:1} is a wrapped table.
%------------------------------------------
\end{document}
-------------------------------------------------------------------------------------------------------
##Create some dummy data
runif(10*12), ncol=12)
##Create a vector of 12 colours
cols = rep(c("yellow", "orange", "purple"), each=3)
cols = col=c("red", "green","blue",cols)

##Plot as normal
boxplot(dd, col=cols) data <- read.table("data1", header=T) 
pdf("data.pdf") 
boxplot(data, outline=F)
dev.off()
-------------------------------------------------------------------------------------------------------
library(ggplot2)

DF <- data.frame(x=c("A","B"), min=c(1,2), low=c(2,3), mid=c(3,4), top=c(4,5), max=c(5,6))

ggplot(DF, aes(x=x, ymin = min, lower = low, middle = mid, upper = top, ymax = max)) +
  geom_boxplot(stat = "identity")
-------------------------------------------------------------------------------------------------------
a:b:c geom_linerange(aes(as.factor(a),ymin=min(value),ymax=value,color=variable)) test_range <- ddply(testMelt, .(a,variable), summarize, 
                    val_min = min(value), val_max = max(value)) ggplot(data  = testMelt) + 
    geom_boxplot(aes(x = factor(a), y = value, fill = variable)) + 
    stat_smooth(aes(group = variable, x = factor(a), y = value, 
                    fill = factor(variable))) +
     geom_linerange(data = test_range, aes(x = as.factor(a), ymin = val_min,
                    ymax = val_max, color = variable), 
                    position = position_dodge(width = 0.3)) ggplot(data  = testMelt) + 
    geom_violin(aes(x = factor(a), y = value, fill = variable)) + 
    stat_smooth(aes(group = variable, x = factor(a), y = value, 
                    fill = factor(variable)))
-------------------------------------------------------------------------------------------------------
MYdata <- data.frame(Age = rep(c(0,1,3,6,9,12), each=20),
                    Richness = rnorm(120, 10000, 2500)) Age ggplot(data = MYdata, aes(x = Age, y = Richness)) + 
  geom_boxplot(aes(fill=factor(Age))) + 
  geom_point(aes(color = factor(Age))) +
  scale_x_continuous(breaks = c(0, 1, 3, 6, 9, 12)) +
  scale_colour_manual(breaks = c("0", "1", "3", "6", "9", "12"),
                      labels = c("0 month", "1 month", "3 months",
                                 "6 months", "9 months", "12 months"),
                      values = c("#E69F00", "#56B4E9", "#009E73", 
                                 "#F0E442", "#0072B2", "#D55E00")) +
  scale_fill_manual(breaks = c("0", "1", "3", "6", "9", "12"),
                      labels = c("0 month", "1 month", "3 months",
                                 "6 months", "9 months", "12 months"),
                      values = c("#E69F00", "#56B4E9", "#009E73", 
                                 "#F0E442", "#0072B2", "#D55E00")) ggplot(data = MYdata, aes(x = Age, y = Richness)) + 
  geom_boxplot(aes(colour=factor(Age)), fill=NA) + 
  geom_point(aes(color = factor(Age))) +
  scale_x_continuous(breaks = c(0, 1, 3, 6, 9, 12)) +
  scale_colour_manual(breaks = c("0", "1", "3", "6", "9", "12"),
                      labels = c("0 month", "1 month", "3 months",
                                 "6 months", "9 months", "12 months"),
                      values = c("#E69F00", "#56B4E9", "#009E73", 
                                 "#F0E442", "#0072B2", "#D55E00"))
-------------------------------------------------------------------------------------------------------
str(d1) x Year library(ggplot2)

# Some toy data
df <- data.frame(Year = rep(c(1:30), each=20), Value = rnorm(600))
str(df) Year ggplot(df, aes(Year, Value)) + geom_boxplot()   # One boxplot

ggplot(df, aes(factor(Year), Value)) + geom_boxplot()   # 30 boxplots
-------------------------------------------------------------------------------------------------------
library(plyr)
library(ggplot2)
dat.melt <- melt(data, id.vars='R')

ggplot(dat.melt, aes(x=0, y=value)) +
    geom_boxplot() +
    geom_point(aes(colour=factor(R))) +
    facet_wrap(~variable, ncol=1, scales='free') +
    coord_flip() melt data
-------------------------------------------------------------------------------------------------------
aes(group=1) geom_smooth ggplot(iris, aes(factor(Sepal.Length), Sepal.Width)) +
  geom_boxplot() +
  geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1))
-------------------------------------------------------------------------------------------------------
scalx dat xlims <- melt(scalx, id.vars="P")
xlims$P <- paste0("P", xlims$P)
names(xlims)[1] <- "variable" melt geom_blank ggplot(dat.melt, aes(x=0, y=value)) +
    geom_boxplot() +
    geom_point(aes(colour=factor(R))) +
    geom_blank(data=xlims) +
    facet_wrap(~variable, ncol=1, scales='free') +
    coord_flip() P4
-------------------------------------------------------------------------------------------------------
ggplot(trial, aes(Level, CV)) + 
   geom_boxplot() + 
   geom_jitter() + 
   facet_wrap(~Q) + 
   coord_flip()
-------------------------------------------------------------------------------------------------------
ggplot(d, aes(factor(x), y)) + 
  geom_rect(aes(NULL, NULL, xmin=Start, xmax=End, fill=Level), 
            alpha = 0.2, ymin=-Inf, ymax=Inf,data=Groups) + 
  geom_boxplot() +
  scale_fill_brewer(palette="Pastel1")
-------------------------------------------------------------------------------------------------------
pic R /tmp img src Warning library(Rook) # for web functionality
library(ggplot2) # for graphing
library(tseries) # used to grab time series from yahoo for stock symbols
library(plyr) # data tweaks

PIC.DIR = paste(getwd(), 'pic', sep='/')

# define the web page form
newapp = function(env) {
    req = Rook::Request$new(env)
    res = Rook::Response$new()

    if (!is.null(req$POST())) {
        stock.symbol <- req$POST()[["stock.symbol"]]
        day.window <- req$POST()[["day.window"]]
    } else {
        stock.symbol <- 'AAPL'
        day.window <- 60
    }
    res$write('What stock ticker would you like to see:\n')
    res$write('<BR/>')
    res$write('Stock Symbol:\n')
    res$write('<form method="POST">\n')
    stock.input <- paste('<input type="text" name="stock.symbol" value="',
                         stock.symbol,
                         '">\n', sep='')
    res$write( stock.input ) 
    res$write('<form method="POST">\n')
    res$write('<input type="radio" name="day.window" value="30">30 Days \n')
    res$write('<input type="radio" name="day.window" value="60" checked>60 Days \n')
    res$write('<input type="radio" name="day.window" value="90">90 Days \n')
    res$write('<input type="submit" name="Go!">\n</form>\n<br>')
    myNormalize = function (target) {
        return((target - min(target))/(max(target) - min(target)))
    }

    if (!is.null(req$POST())) {
        # get the stock data as a data frame
        df <- as.data.frame(get.hist.quote(stock.symbol,start=as.character(Sys.Date() -  as.numeric(day.window)),quote=c("Open", "High", "Low", "Close")))

        # add an average and the top/bottom for the candle
        df <- mutate(df, Average =(High + Low + Close)/3, Bottom = pmin(Open, Close), Top = pmax(Open, Close), Open.to.Close = ifelse(sign(Open - Close) == 1,'Increase','Decrease'), Date = row.names(df), Date.Label = ifelse(weekdays(as.Date(row.names(df))) == 'Friday',row.names(df),'')) # this gets the date from row.names into a column

        # create a box plot
        my.plot <- ggplot(data=df, aes(x=Date, lower=Bottom, upper=Top, middle=Average,  ymin=Low,  ymax=High, color=Open.to.Close, fill=Open.to.Close), xlab='Date', ylab='Price') +
            geom_boxplot(stat='identity') +
            # add the line for average price from HCL
            geom_line(data=df, aes(x=Date,y=Average, group=0), color='black') +
            # tweak the labeling
            opts(axis.text.x = theme_text(angle=270), legend.position = 'top', legend.direction='horizontal') +
            scale_x_discrete(labels=df$Date.Label)
        ggsave(plot=my.plot, paste(PIC.DIR, "/pic", stock.symbol, day.window, ".png", sep = ""))

        res$write(paste(day.window,' days stock price trend for ',stock.symbol,'<BR/>', sep=''))
        res$write(paste("<img src='", 
                        s$full_url("pic"), 
                        '/pic', stock.symbol, day.window, ".png'", 
                        "width='650 px' height='650 px' />", sep = ""))
    }
    res$finish()
}
s = Rhttpd$new()
s$add(app = newapp, name = "visbin")
s$add(app = File$new(PIC.DIR), name = "pic")
s$start()
s$browse("visbin") Rook
-------------------------------------------------------------------------------------------------------
dat <- data.frame(name=paste0('sample',1:3), min=c(1,1,2), max=c(38,39,36), mean=c(10,10,11), q25=c(8,9,10), q50=c(10,11,10), q75=c(13,14,13))

ggplot(dat, aes(x=name, ymin=min, ymax=max, lower=q25, middle=q50, upper=q75))+geom_boxplot(stat='identity')
-------------------------------------------------------------------------------------------------------
##First create some data 
##You should include this in your question)
set.seed(2)
dd = data.frame(x = rlnorm(26), y=LETTERS) outliers = boxplot(dd$x, plot=FALSE)$out dd[dd$x %in% outliers,] dd$x outliers dd$x outliers dd$x %in% outliers [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE <snip> dd[dd$x %in% outliers,] dd dd$x %in% outliers TRUE
-------------------------------------------------------------------------------------------------------
set.seed(2)
x <- rlnorm(26)
names(x) <- LETTERS
outliers <- boxplot(x, plot=FALSE)$out
outliers
       I        O        U        X 
7.275219 5.943089 8.091541 7.061459
-------------------------------------------------------------------------------------------------------
axis.POSIXct format dft <- data.frame(x= factor( sample(1:2, 100, repl=TRUE)), 
                  y= Sys.time()+rnorm(100)*4000 )
boxplot(y~x, data=dft, yaxt='n')
axis(2, at=seq(from=range(dft$y)[1], to =range(dft$y)[2], by=3000) , 
         labels=format.POSIXct(seq(from=range(dft$y)[1], to =range(dft$y)[2], by=3000), 
                                 format ="%H:%M:%S") ) Axis.POSIXt boxplot boxplot(y~x, data=dft, yaxt='n')
Axis(side=2, x=range(dft$y), format ="%H:%M:%S") require(ggplot2); p <- ggplot(dft, aes(x,y))
p + geom_boxplot()
-------------------------------------------------------------------------------------------------------
require(ggplot2)
mtcars$cyl2<- ifelse(mtcars$cyl > 4, c('A'), c('B')) 
p <- ggplot(mtcars, aes(factor(cyl), mpg))
p + geom_boxplot() + facet_grid(. ~ cyl2, scales = "free", space = "free")
-------------------------------------------------------------------------------------------------------
geom_vline() require(ggplot2)
p <- ggplot(mtcars, aes(factor(cyl), mpg))
p <- p + geom_boxplot(aes(fill=factor(cyl))) + coord_flip()
p <- p + geom_vline(xintercept=c(1.5,2.5))
p n+0.5 size=width colour="name" geom_vline() coord_flip() scale_colour_manual() aes(..., colour=var) fill=var scale_fill_manual p <- p + scale_fill_manual(values=c("black","gray","white"))
p
-------------------------------------------------------------------------------------------------------
geom_hline(aes(yintercept=40), color="black", linetype="dashed") geom_boxplot(fill="gray") panel.background = theme_rect(colour = "black")
-------------------------------------------------------------------------------------------------------
?boxplot m <- matrix(1:25,5,5)
boxplot(x = as.list(as.data.frame(m))) m1 <- melt(as.data.frame(m))
library(ggplot2)
ggplot(m1,aes(x = variable,y = value)) + facet_wrap(~variable) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
reshape data <- data.frame(v1=rnorm(100),v2=rnorm(100),v3=rnorm(100), v4=rnorm(100))
library(reshape)
meltData <- melt(data)
boxplot(data=meltData, value~variable) ggplot2 library(ggplot2)
p <- ggplot(meltData, aes(factor(variable), value)) 
p + geom_boxplot() + facet_wrap(~variable, scale="free")
-------------------------------------------------------------------------------------------------------
par(mfrow=c(2,5))
for (i in 1:length(plotdata)) {
        boxplot(plotdata[,i], main=names(plotdata[i]), type="l")

}
-------------------------------------------------------------------------------------------------------
temp = reshape(data, direction="long", varying=2:4, sep="")
boxplot(split(temp[,3], temp[,1]))
# boxplot(car ~ paint, data=temp) ### Formula notation, easier to read lattice library(lattice)
bwplot(car1 + car2 + car3 ~ paint, data=data) boxplot lattice car1 car2 car3 temp bwplot(car ~ paint | paste0("Car ", time), data = temp)
-------------------------------------------------------------------------------------------------------
carpaint[, 2:4] cbind(car1, car2, car3) as.matrix(carpaint[, 2:4]) boxplot.formula split boxplot(split(mf[[response]], mf[-response]), ...) grp split split
-------------------------------------------------------------------------------------------------------
library(ggplot2)
ggplot(mtcars, aes(x = factor(cyl), y = mpg, fill = factor(cyl))) + geom_bar(stat = "identity", colour = "black") + facet_wrap(~gear) ggplot(mtcars, aes(x = factor(gear), y = mpg, colour = factor(cyl))) + geom_jitter() ggplot(mtcars, aes(x = factor(gear), y = mpg, colour = factor(cyl))) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
qplot(cyl, mpg, data=mtcars) +
  geom_boxplot() +
  coord_cartesian(ylim=c(0,20))
-------------------------------------------------------------------------------------------------------
geom_boxplot ?geom_boxplot ggplot(mtcars, aes(factor(cyl), mpg)) + geom_boxplot(aes(fill=factor(cyl)))
-------------------------------------------------------------------------------------------------------
AnalyzeNumericData <- function(x,GroupVar=NA) {
    VarList <- names(x)
    NumVars <- length(VarList)

    for (i in 1) {
        if (is.numeric(x[,VarList[i]])) {
            par(mfrow=c(2,2))
            hist(x[,VarList[i]],main=paste("Histogram of ",VarList[i]),xlab=NA)
            boxplot(x[,VarList[i]],main=paste("Boxplot of ",VarList[i]))
            if (!is.na(GroupVar)) {
                boxplot(x[,VarList[i]]~x[,GroupVar],main=paste("Boxplot of ",VarList[i]," by ", GroupVar))
            }
            plot(NA,NA,axes=F,xlim=c(0,10),ylim=c(0,10),xlab="",ylab="")
            text(5,5,labels="MyText")
        }
    }
}

AnalyzeNumericData(mtcars,"cyl") x y text(x,y,labels="MyText") xlim ylim
-------------------------------------------------------------------------------------------------------
labels axis sprintf boxplot(x, yaxt="n")
axis(2, at=axTicks(2), labels=sprintf("$%s", axTicks(2))) las boxplot(x, yaxt="n")
axis(2, at=axTicks(2), labels=sprintf("$%s", axTicks(2)), las=1)
-------------------------------------------------------------------------------------------------------
readLines .x <- readLines(datafile) readLines ## dummy
.x <- c("var_a 1:5 5:12 7:9 9:14", 'var_b 1:5 2:12 3:9 4:14') #split by space

space_split <- strsplit(.x, ' ')
# get the variable names (first in each list)
variable_names <- lapply(space_split,'[[',1)

# get the variable contents (everything but the first element in each list)
variable_contents <- lapply(space_split,'[',-1)

# a function to do the appropriate replicates
do_rep <- function(x){rep.int(x[1],x[2])}

# recreate the variables 

variables <- lapply(variable_contents, function(x){
  .list <- strsplit(x, ':')
  unlist(lapply(lapply(.list, as.numeric), do_rep))
})

names(variables) <- variable_names lapply(variables, var)

## $var_a
## [1] 6.848718
## 
## $var_b
## [1] 1.138462 boxplot(variables, ~.)
-------------------------------------------------------------------------------------------------------
?boxplot border= boxplot(count ~ spray, data = InsectSprays, col = "lightgray",border=c("blue", "green", "blue", "green", "blue", "green"))
-------------------------------------------------------------------------------------------------------
interaction scale_x_discrete ggplot(test, aes(x=interaction(var1,var2), y=value, fill=var2)) + 
  geom_boxplot() +
  scale_x_discrete(name = 'var1',breaks = c('A.A','C.A','B.B','D.B'), 
                   labels = c('A','C','B','D')) ordered library(plyr) # for arrange 
var1_order <- unique(as.character(arrange(test,var2)[['var1']]))

test$var1_order <- ordered(test$var1, levels = var1_order)
## or
test$var1_order_2 <- factor(test$var1, levels = var1_order)
## so that 
ggplot(test, aes(x=var1_order_2, y=value, fill=var2)) + 
 geom_boxplot() + 
 xlab('var1')
## or 
ggplot(test, aes(x=var1_order, y=value, fill=var2)) + 
 geom_boxplot() + 
 xlab('var1') var2 var1 var2 var1 ggplot(test, aes(x=var2,y=value)) + 
   geom_boxplot(aes(fill = var1))
-------------------------------------------------------------------------------------------------------
aggregate(data[, c("outcome1","outcome2","outcome3")], 
           list( rowSums(data[, 6:13]) ), #construct the by-list
           FUN=mean)
#----------
  Group.1 outcome1 outcome2 outcome3
1       1 5604.662 2430.258 1646.645
2       3 5174.738 1798.280 1156.325 boxplot boxplot( ...[ ,2:4], xlab="Sum of minor alleles")
-------------------------------------------------------------------------------------------------------
data(mpg)
ggplot(data=mpg) + geom_boxplot(aes(x=cyl, y=displ, group=cyl)) ggplot(data=(allocation_info), aes(allocation_id, final_score)) + 
    geom_boxplot(aes(group=allocation_id))
-------------------------------------------------------------------------------------------------------
summarydata<-list(stats=matrix(c(1,2,3,4,5),5,1), n=10)
bxp(summarydata) sd<-boxplot(dummydata)
str(sd)
-------------------------------------------------------------------------------------------------------
boxplot.stats() boxplot() R> boxplot.stats(rnorm(100))
$stats
[1] -2.3865817 -0.7195878  0.0889332  0.6237745  2.3702410

$n
[1] 100

$conf
[1] -0.123318  0.301184

$out
numeric(0)

R> List with named components as follows: n: the number of non-‘NA’ observations in the sample.

conf: the lower and upper extremes of the ‘notch’ (‘if(do.conf)’).
      See the details.

 out: the values of any data points which lie beyond the extremes
      of the whiskers (‘if(do.out)’).
 Note that ‘$stats’ and ‘$conf’ are sorted in _in_creasing order,
 unlike S, and that ‘$n’ and ‘$out’ include any ‘+- Inf’ values.
-------------------------------------------------------------------------------------------------------
ggplot(ph, aes(x=factor(X2), y=res)) + 
  geom_hline(yintercept = -6:2, color="grey") +
  geom_boxplot(aes(fill=factor(model)), outlier.size=NA) + 
  opts(axis.text.x = theme_text(angle = 45)) +
  geom_point()
-------------------------------------------------------------------------------------------------------
"%b" boxplot DF$month <- factor(strftime(DF$Time,"%b"),levels=month.abb)
boxplot(Data~month,DF)
-------------------------------------------------------------------------------------------------------
DF$month <- factor(strftime(DF$Time,"%b"),levels=month.abb)
ggplot(DF, aes(x=,month, y=Data)) +
    geom_boxplot()
-------------------------------------------------------------------------------------------------------
time_series = runif(72) time_matrix = matrix(time_series, 24, 3) apply apply plyr hourly_means = apply(time_matrix, 1, mean)
> hourly_means
 [1] 0.2954238 0.6791355 0.6113670 0.5775792 0.3614329 0.4414882 0.6206761
 [8] 0.2079882 0.6238492 0.4069143 0.6333607 0.5254185 0.6685191 0.3629751
[15] 0.3715500 0.2637383 0.2730713 0.3170541 0.6053016 0.6550780 0.4031117
[22] 0.6857810 0.4492246 0.4795785 ggplot2 ggplot2 require(ggplot2)
require(reshape2)
# Notice the use of melt to reshape the dataset a bit
# Also notice the factor to transform Var1 to a categorical dataset
ggplot(aes(x = factor(Var1), y = value), 
       data = melt(time_matrix)) + 
       geom_boxplot() ts ts # Create a ts object
time_ts = ts(time_series, frequency = 24)
# Calculate the mean
> tapply(time_ts, cycle(time_ts), mean)
        1         2         3         4         5         6         7         8 
0.2954238 0.6791355 0.6113670 0.5775792 0.3614329 0.4414882 0.6206761 0.2079882 
        9        10        11        12        13        14        15        16 
0.6238492 0.4069143 0.6333607 0.5254185 0.6685191 0.3629751 0.3715500 0.2637383 
       17        18        19        20        21        22        23        24 
0.2730713 0.3170541 0.6053016 0.6550780 0.4031117 0.6857810 0.4492246 0.4795785 
> aggregate(as.numeric(time_ts), list(hour = cycle(time_ts)), mean)
   hour         x
1     1 0.2954238
2     2 0.6791355
3     3 0.6113670
4     4 0.5775792
....
-------------------------------------------------------------------------------------------------------
boxplot Data <- data.frame(series=x, time=rep(1:24,3))
boxplot(series ~ time, data=Data)
-------------------------------------------------------------------------------------------------------
dat <- data.frame(values = c(rnorm(100, mean = 1), rnorm(100, mean = 3),
                             rnorm(100, mean = 4, sd = 3)),
                  groups = factor(rep(c("aaa","bbb","ccc"), each = 100))) ?plotmath plotmath bold() 
boxplot(values ~ groups, data = dat,ylab = expression(bold(Value~axis)),xlab = expression(bold(Single~sample)))
 boxplot(values ~ groups, data = dat,ylab = expression(bold("Value axis")),xlab = expression(bold("Single sample"))) title() 
boxplot(values ~ groups, data = dat)
title(ylab = "Value axis", xlab = "Single sample", font.lab = 2) font.lab ?par
-------------------------------------------------------------------------------------------------------
geom_boxplot ggplot2 stat = 'identity' geom_crossbar # first, your data
weather <- read.table(text = 'X  Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec
1      "Highest recorded" 31.5 31.8 30.3 28.0 24.9 24.4 21.7 20.9 24.5 25.4 26.0 28.7
2  "Mean monthly maximum" 27.8 28.6 27.0 24.8 22.0 20.0 18.9 18.8 20.4 22.4 23.9 26.8
3    "Mean daily maximum" 24.2 24.8 23.1 20.9 18.4 16.3 15.5 15.7 16.9 18.3 20.0 22.4
4                  "Mean" 19.1 19.8 18.1 16.2 13.8 11.9 11.2 11.6 12.7 14.1 15.7 17.7
5   "Mean daily minimum" 14.0 14.7 13.1 11.4  9.2  7.5  6.9  7.4  8.4 10.0 11.4 13.0
6  "Mean monthly minimum"  7.6  9.1  6.8  3.8  2.3 -0.5 -0.2  1.0  2.3  3.7  5.3  6.7
7       "Lowest recorded"  4.0  5.6  4.1 -1.3  0.0 -3.1 -2.6 -1.4 -0.8  2.0  2.7  4.1', header =T)


library(reshape2)
library(ggplot2)
# reshape to wide format (basically transposing the data.frame)
w <- dcast(melt(weather), variable~X)
ggplot(w, aes(x=variable,ymin = `Lowest recorded`, 
         ymax = `Highest recorded`, lower = `Lowest recorded`, 
         upper = `Highest recorded`, middle = `Mean daily maximum`)) + 
     geom_boxplot(stat = 'identity') +
     xlab('month') + 
     ylab('Temperature') +
     geom_crossbar(aes(y = `Mean monthly maximum` ))+
     geom_crossbar(aes(y = `Mean monthly minimum`)) +
     geom_crossbar(aes(y = `Mean daily maximum` ))+
     geom_crossbar(aes(y = `Mean daily minimum`)) geom_boxplot
-------------------------------------------------------------------------------------------------------
boxplot(V1 ~ factor(V3), data=dat[ dat$V3 != "CHINA", ] )
-------------------------------------------------------------------------------------------------------
dat boxplot(V1~droplevels(V3),subset(dat, V3 != 'CHINA')) droplevels.factor(x,...) factor(x,...) droplevels droplevels 
boxplot(V1 ~ V3, droplevels(subset(dat, V3 != 'CHINA')))
-------------------------------------------------------------------------------------------------------
ggplot2 geom_boxplot geom_jitter mtcars library(ggplot2)
p <- ggplot(mtcars, aes(factor(cyl), mpg)) 
p + geom_boxplot() + geom_jitter() + theme_bw()
-------------------------------------------------------------------------------------------------------
ggplot2 facet_wrap library(ggplot2)
mydata = data.frame(x=as.factor(rep(1:2, 5, each=5)), y=rnorm(50),
        division=rep(letters[1:5], each=10))

print(ggplot(mydata, aes(x, y)) + geom_boxplot() + facet_wrap(~division)) facet_grid print(ggplot(data, aes(repetition, energy.level)) + geom_boxplot() + facet_grid(route ~ packet))
-------------------------------------------------------------------------------------------------------
quantile() rug() set.seed(1)
X <- rnorm(200)
boxplot(X, yaxt = "n")

## compute the required quantiles
qntl <- quantile(X, probs = c(0.85, 0.90))

## add them as a rgu plot to the left hand side
rug(qntl, side = 2, col = "blue", lwd = 2)

## add the box and axes
axis(2)
box() str() set.seed(1) ## make reproducible
HWD <- data.frame(Hour = rep(0:23, 10),
                  Houston_Load = rnorm(24*10)) Hour Hour quantile() quants <- sapply(split(HWD$Houston_Load, list(HWD$Hour)),
                 quantile, probs = c(0.85, 0.9)) R> quants <- sapply(split(HWD$Houston_Load, list(HWD$Hour)),
+                  quantile, probs = c(0.85, 0.9))
R> quants
            0         1        2         3         4         5        6
85% 0.3576510 0.8633506 1.581443 0.2264709 0.4164411 0.2864026 1.053742
90% 0.6116363 0.9273008 2.109248 0.4218297 0.5554147 0.4474140 1.366114
            7         8        9       10        11        12       13       14
85% 0.5352211 0.5175485 1.790593 1.394988 0.7280584 0.8578999 1.437778 1.087101
90% 0.8625322 0.5969672 1.830352 1.519262 0.9399476 1.1401877 1.763725 1.102516
           15        16        17        18       19        20       21
85% 0.6855288 0.4874499 0.5493679 0.9754414 1.095362 0.7936225 1.824002
90% 0.8737872 0.6121487 0.6078405 1.0990935 1.233637 0.9431199 2.175961
          22        23
85% 1.058648 0.6950166
90% 1.145783 0.8436541 boxplot(Houston_Load ~ Hour, data = HWD, axes = FALSE)
xlocs <- 1:24 ## where to draw marks
tickl <- 0.15 ## length of marks used
for(i in seq_len(ncol(quants))) {
    segments(x0 = rep(xlocs[i] - 0.15, 2), y0 = quants[, i],
             x1 = rep(xlocs[i] + 0.15, 2), y1 = quants[, i],
             col = c("red", "blue"), lwd = 2)
}
title(xlab = "Hour", ylab = "Houston Load")
axis(1, at = xlocs, labels = xlocs - 1)
axis(2)
box()
legend("bottomleft", legend = paste(c("0.85", "0.90"), "quantile"),
       bty = "n", lty = "solid", lwd = 2, col = c("red", "blue"))
-------------------------------------------------------------------------------------------------------
ggplot2 ggplot2 fatten fatten require(reshape)
require(ggplot2)
cars_melt = melt(cars)

ggplot(aes(x = variable, y = value), data = cars_melt) + 
  geom_boxplot(fatten = 2) ggplot(aes(x = variable, y = value), data = cars_melt) + 
  geom_boxplot(fatten = 4)
-------------------------------------------------------------------------------------------------------
boxlwd ?bxp ?boxplot boxplot(rnorm(100,50,10), horizontal = TRUE, notch = TRUE, boxlwd = 4)
-------------------------------------------------------------------------------------------------------
# precompute values
stats <- boxplot.stats(data)$stats
df <- data.frame(x="label1", ymin=stats[1], lower=stats[2], middle=stats[3], upper=stats[4], ymax[5])

# create plot
p <- ggplot(df, aes(x=x, lower=lower, upper=upper, middle=middle, ymin=ymin, ymax=ymax)) + 
geom_boxplot(stat="identity")
p
-------------------------------------------------------------------------------------------------------
data <- data.frame(rbind(cbind(rnorm(700, 0,10), rep("1",700)),
                         cbind(rnorm(50, 0,10), rep("2",50))))
data[ ,1] <- as.numeric(as.character(data[,1]))
w <- sqrt(table(data$X2)/nrow(data))
ggplot(NULL, aes(factor(X2), X1)) + 
  geom_boxplot(width = w[1], data = subset(data, X2 == 1)) +
  geom_boxplot(width = w[2], data = subset(data, X2 == 2)) X2 ggplot(NULL, aes(factor(X2), X1)) + 
  llply(unique(data$X2), function(i) geom_boxplot(width = w[i], data = subset(data, X2 == i)))
-------------------------------------------------------------------------------------------------------
ggplot2 library(ggplot2)
library(reshape2)
library(plyr)

Gene1 <- read.table(text = "Ind1     Ind2       Ind3      Ind4
1          3         3.2        2.5
1          3         4          2
1.5        2         2.2        1
3.4        2         1          3", header = TRUE)

#Make a copy of Gene1
Gene2 <- Gene1

#A Round about way to rbind these together with an ID column
combined_data <- ldply(list(Gene1 = Gene2, Gene2 = Gene2))

#Melt into the long format needed by ggplot2
combined_data_melt <- melt(combined_data, id.vars = 1)

#Plot and use facet_wrap for each data.frame
ggplot(combined_data_melt, aes(variable, value)) +
  geom_boxplot() +
  facet_wrap(~.id, ncol = 1) +
  theme_bw() ggplot(combined_data_melt, aes(.id, value, dodge = variable)) +
  geom_boxplot(position = position_dodge(width = 0.8)) +
  theme_bw()
-------------------------------------------------------------------------------------------------------
graphics # Faking the data, since you didn't provide any
Gene <- data.frame(matrix(rweibull(100*4, 1), 100))
names(Gene) <- paste0("Ind", 1:4)
Gene <- rep(list(Gene), 4)

# Setup the panels
layout(t(1:4))
par(oma=c(2, 4, 4, 0), mar=rep(1, 4), cex=1)
# `mar` controls the space around each boxplot group

# Calculating the range so that the panels are comparable
my.ylim <- c(min(sapply(Gene, min)), max(sapply(Gene, max)))

# Plot all the boxes
for(i in 1:length(Gene)){
    boxplot(Gene[[i]], ylim=my.ylim, axes=FALSE)
    mtext(paste("Gene", i), 1, 0)
    if(i == 1){
        axis(2, las=1)
        mtext("Expression or what you have", 2, 3)
    }
}
title("Look at all my genes!", outer=TRUE) Gene[[i]] get(paste0("Gene", i)) my.ylim <- ... min(c(min(Gene1), min(Gene2) ...
-------------------------------------------------------------------------------------------------------
data<-data.frame(cat=c('A','A','A','A','B','B','A','A','A','A','B','B','B'), 
             values=c(3,2,1,4,NA,NA,4,5,6,7,8,9,0), 
             ind=c('x','x','x','x','x','x','y','y','y','y','y','y','x')) print(ggplot() +
  scale_colour_hue(guide='none') +
  geom_boxplot(aes(x=as.factor(cat), y=values, fill=ind), 
  data=data,
  outlier.size = 1.2,
  na.rm=T))
-------------------------------------------------------------------------------------------------------
?stat_boxplot

data<-data.frame(cat=c('A','A','A','A','B','B','A','A','A','A','B','B'), 
             values=c(3,2,1,4,NA,NA,4,5,6,7,8,9), 
             ind=c('x','x','x','x','x','x','y','y','y','y','y','y'))

p <- ggplot(data = data, aes(factor(cat), values))                     
p + stat_boxplot(geom="boxplot", position = "dodge", width = 0.60, na.rm = TRUE) +  facet_grid(.~ind) p <- ggplot(data, aes(factor(cat), values, fill = ind))                     
p + stat_boxplot(geom="boxplot", position = "dodge", width = 0.60, na.rm = TRUE) + facet_grid(.~ind)
-------------------------------------------------------------------------------------------------------
data            <- data.frame(
cat=c('A','A','A','A','B','B','A','A','A','A','B','B','B'), 
values=c(3,2,1,4,NA,NA,4,5,6,7,8,9, 0), 
ind=c('x','x','x','x','x','x','y','y','y','y','y','y','x'))

p  <- ggplot() +
      scale_colour_hue(guide='none') +
      geom_boxplot(aes(x=as.factor(cat), y=values, fill=ind),
      position=position_dodge(width=.60), 
      data=data,
      outlier.size = 1.2,
      na.rm=T) +
      geom_line(aes(x=x, y=y), 
                data=data.frame(x=c(0,3),y=rep(0,2)), 
                size = 1, 
                col='white')
print(p)
-------------------------------------------------------------------------------------------------------
stat_boxplot ggplot2 set.seed(42)
df <- data.frame(cond = factor( rep(c("A","B"), each=500) ), 
                 value = c(rnorm(500,mean=1,sd=0.2),rnorm(500, mean=1.5,sd=0.1)))


whisk <- function(df,cond_col=1,val_col=2) {
  require(reshape2)
  condname <- names(df)[cond_col]
  names(df)[cond_col] <- "cond" 
  names(df)[val_col] <- "value"
  b <- boxplot(value~cond,data=df,plot=FALSE)
  df2 <- cbind(as.data.frame(b$stats),c("min","lq","m","uq","max"))
  names(df2) <- c(levels(df$cond),"pos")
  df2 <- melt(df2,id="pos",variable.name="cond")
  df2 <- dcast(df2,cond~pos)  
  names(df2)[1] <- condname
  df2
}



library(ggplot2)

plot1 <- ggplot(df, aes(x=cond)) 
plot1 <- plot1 + geom_errorbar(aes(ymin=min,ymax=max),data=whisk(df),width = 0.5)
plot1 <- plot1 + geom_boxplot(aes(y=value))
plot1
-------------------------------------------------------------------------------------------------------
stat_boxplot _boxplot geom errorbar R df ggplot(df, aes(x=cond, y = value))  + 
 stat_boxplot(geom ='errorbar') + 
 geom_boxplot() # shorthand for  stat_boxplot(geom='boxplot') stat_boxplot ?stat_boxplot data.frame
-------------------------------------------------------------------------------------------------------
sdiff <- read.csv("https://dl.dropbox.com/u/22681355/diff.csv")

boxplot(sdiff[,-1])
-------------------------------------------------------------------------------------------------------
df <- read.csv('https://dl.dropbox.com/u/22681355/diff.csv')
library(vioplot)
with(df,vioplot(a,b,c,d,e,f,g,h,i,j)) boxplot(df[,-1]/sqrt(abs(df[,-1])))
-------------------------------------------------------------------------------------------------------
ggplot(data=PlantGrowth, aes(x=group, y=weight, fill=group)) + 
    geom_boxplot() + 
    theme(legend.text = element_text(size=ifelse(TRUE, 20, 10))) if else ifelse if(){}else{} ggplot(data=PlantGrowth, aes(x=group, y=weight, fill=group)) + 
    geom_boxplot()+ 
    theme(legend.text = if(TRUE){element_text(size=20)} else {element_text(size=10)}) ggplot2 ifelse ?ifelse ‘ifelse’ returns a value with the same shape as ‘test’ which is
 filled with elements selected from either ‘yes’ or ‘no’ depending
 on whether the element of ‘test’ is ‘TRUE’ or ‘FALSE’. element_text(size=10) test
-------------------------------------------------------------------------------------------------------
interaction() test.data <- data.frame(Sal=rnorm(100),
                        group=factor(sample(LETTERS[1:3], 100, replace=TRUE)),
                        class=factor(sample(c("low","high"), 100, replace=TRUE)))
boxplot(Sal ~ interaction(group,class), data=test.data)
-------------------------------------------------------------------------------------------------------
dat <- read.table(textConnection("row.names   Collection_date temprature  col_yr  col_mnth
  1   1   4-Aug-04    27  2004    8
  2   2   9-Aug-04    26  2004    8
  3   3   4-Aug-04    27  2004    8
  4   4   9-Aug-04    26  2004    8
  5   5   9-Aug-04    26  2004    8
  6   6   9-Aug-04    26  2004    8
  1031 1031   6-Aug-06    32    2006    8")) dat$Collection_date <- strptime(dat$Collection_date,"%d-%b-%y") ax_month <- seq(min(dat$Collection_date),max(dat$Collection_date),"month")
ax_year <- seq(min(dat$Collection_date),max(dat$Collection_date),"year") plot(NA, xaxt="n",type="n", ylab="Temperature", xlab=NA,
     xlim=range(seq_along(ax_month)), ylim=range(dat$temprature))
axis(3,at=seq_along(ax_month), labels=format(ax_month,"%m"))
mtext(format(ax_year,"%Y"), side=3, line=3, at=seq(1,length(ax_month), by=12)) for(i in seq_along(ax_month)){
    sub_dat <- dat[format(dat$Collection_date, "%m-%Y") == format(ax_month[i], "%m-%Y"),]
    boxplot(sub_dat$temprature, add=TRUE, axes=FALSE, at=i)
    }
-------------------------------------------------------------------------------------------------------
df <- data.frame(matrix(c(1:3, 6:8, 11:13), nrow = 1))
names(df) <- paste0(rep(LETTERS[1:3], each = 3), 1:3)

sdf <- stack(df)

sdf <- transform(sdf, group = substring(ind, 1, 1),
                 obs = substring(ind, 2)) sdf > head(sdf)
  values ind group obs
1      1  A1     A   1
2      2  A2     A   2
3      3  A3     A   3
4      6  B1     B   1
5      7  B2     B   2
6      8  B3     B   3 require(ggplot2)
plt <- ggplot(sdf, aes(x = group, y = values)) +
    geom_boxplot()
plt
-------------------------------------------------------------------------------------------------------
llist Hmisc library(Hmisc)
data.list <- llist(Tom, Bob, Stu)
library(reshape2)
# get a long format version of col3
col3 <- melt(lapply(data.list, `[[`, 'col3'))
# the column `L1` contains the names Tom, Bob, Stu

library(ggplot2)
# create the boxplots

ggplot(col3, aes(x=L1, y= value)) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
rbind Tom = read.table(header=TRUE,
text="col1    col2 col3 col4
name1   33   44   55
name2   33   NA   55
name3   33   34   55
name4   33   24   55")

Bob = read.table(header=TRUE,
text="col1    col2 col3 col4
name5   33   74   55
name6   33   NA   55
name7   33   32   55")

Stu = read.table(header=TRUE,
text="col1    col2 col3 col4
name8   33   44   55
name9   33   11   55
name10  33   34   55
name11  33   24   55
name12  33   32   55
name13  33   24   5
name14  33   34   55
name15  33   24   5")

# Add a new person identifier column to each data frame.
Tom$person = "Tom"
Bob$person = "Bob"
Stu$person = "Stu"

# Combine 3 data frames by row.
dat = rbind(Tom, Bob, Stu)

dat
#      col1 col2 col3 col4 person
# 1   name1   33   44   55    tom
# 2   name2   33   NA   55    tom
# 3   name3   33   34   55    tom
# 4   name4   33   24   55    tom
# 5   name5   33   74   55    bob
# 6   name6   33   NA   55    bob
# 7   name7   33   32   55    bob
# 8   name8   33   44   55    stu
# 9   name9   33   11   55    stu
# 10 name10   33   34   55    stu
# 11 name11   33   24   55    stu
# 12 name12   33   32   55    stu
# 13 name13   33   24    5    stu
# 14 name14   33   34   55    stu
# 15 name15   33   24    5    stu


boxplot(col3 ~ person, data=dat)

# This would also work, without rearranging the data:
boxplot(Tom[, "col3"], Bob[, "col3"], Stu[, "col3"])

# Save to pdf file.
pdf("boxplot_1.pdf", height=5, width=5)
boxplot(col3 ~ person, data=dat, main="Boxplot of three samples.", ylab="col3")
dev.off()
-------------------------------------------------------------------------------------------------------
boxplot # All these commands are equivalent:
boxplot(e$x, e$y)
boxplot(e[[1]], e[[2]])
boxplot(e[, 1], e[, 2])

# Probably not what you want:
boxplot(e$x ~ e$y)
boxplot(x ~ y, data=e)
-------------------------------------------------------------------------------------------------------
# Create example data
dat <- data.frame(leverancier=rep(c("A","A","B","B","B","A","C","D","D","C"),100),
                  las_trekproef=runif(1000,100,500),
                  las_score=runif(1000,1,4))

# Use tapply to summarize y by factor                 
tapply(dat$las_score, dat$leverancier, FUN=summary)

# Using formula interface plot y by factor 
boxplot(las_score ~ leverancier, data=dat, notch=TRUE)

# You can also index y based on a factor level to create a single boxplot of y
boxplot(dat[dat$leverancier == "A" ,]$las_score, notch=TRUE)
-------------------------------------------------------------------------------------------------------
stat_bin library(plyr)
library(ggplot2)

p_meds <- ddply(p, .(TYPE), summarise, med = median(TOTALREV))

ggplot(p,aes(x = TYPE, y = TOTALREV)) + 
    geom_boxplot() + 
    geom_text(data = p_meds, aes(x = TYPE, y = med, label = med), 
              size = 3, vjust = -1.5) qplot
-------------------------------------------------------------------------------------------------------
geom_.... set.seed(1)
library(plyr)
DF <- data.frame(TYPE = sample(letters[1:3], 500, replace = TRUE), 
  PROVIDER = letters[1:5], VALUE = rnorm(500))

# get the medians by type and provider (both columns
# will exist in the new data.frame

meds <- ddply(DF, .(TYPE, PROVIDER), summarize, med = median(VALUE))

ggplot(DF, aes(x=PROVIDER,y=  VALUE)) + 
   geom_boxplot() + facet_wrap(~TYPE) + 
   geom_text(data = meds, aes(y = med, label = round(med,2)),size = 3, vjust = -0.5)
-------------------------------------------------------------------------------------------------------
# plot the results
boxplot(base, xlim=c(1,4), col="gray", xaxt="n", ylab="Base values", outline=FALSE)
axis(side=1,1,labels=('base'))
par(new=TRUE)
boxplot(exps, col="red", ylim=c(-200,200), outline=FALSE, axes=FALSE)
axis(4)
axis(side=1,1:3,labels=c("% exp1","% exp2","% exp3"))
grid() boxplot base exps axis(side=1,1:3,labels=c("% exp1","% exp2","% exp3")) #divide your plottin area into 2 columns with one row.
par(mfrow = c(1, 2))
# plot the results
boxplot(base, col="gray", xaxt="n", ylab="Base values", outline=FALSE,axes=FALSE)
axis(2)
axis(side=1,1,labels=('base'))
segments(0,0,1,0)
boxplot(exps,col="red", xaxt="n", ylim=c(-200,200), outline=FALSE, axes=FALSE)
axis(4)
axis(side=1,at=(1:3),labels=c("% exp1","% exp2","% exp3"))
-------------------------------------------------------------------------------------------------------
boxplot() xyplot() boxplot() plot( , type="b") par(mfrow=c(1,3) bwplot() xyplot( , type="b") grid.arrange()
-------------------------------------------------------------------------------------------------------
library(ggplot2)

ggplot(df_melt, aes(x = factor(res), y = value, fill = variable)) +
  geom_bar(stat="identity", position="dodge") ggplot(df_melt, aes(x = factor(res), y = value, fill = variable)) +
  geom_boxplot() +
  scale_fill_manual(values = c("white", "darkgray")) values res variable scale_fill_manual
-------------------------------------------------------------------------------------------------------
df <- data.frame(s1=rnorm(100), s2=rnorm(100, mean=2), s3=rnorm(100, mean=-2)) foo <- boxplot(df, border=c(8,8,1), lwd=c(1,1,3)) aa <- 0.5
bb <- foo$stats[4,3]-foo$stats[2,3] tt <- seq(0,2*pi,by=.01)    
lines(3+aa*cos(tt),foo$stats[3,3]+bb*sin(tt))
-------------------------------------------------------------------------------------------------------
cbind() DATA=data.frame(samp,dist) p=ggplot(DATA, aes(x=dist, y = samp)) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
boxplot(samp~dist)
-------------------------------------------------------------------------------------------------------
locator type='l' xspline boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
tmp <- locator(type='l')  # click on plot around box of interest
boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
xspline(tmp, open=FALSE, border='red', lwd=3)
-------------------------------------------------------------------------------------------------------
scales::alpha() library(scales) # for alpha function
ggplot(dat, aes(x=group, y=value, color=group, group=group)) +
  geom_point(position=position_jitter(width=0.3), alpha=0.2) +
  geom_boxplot(size=1.4,fill=0, outlier.size=0)+
  geom_boxplot(size=1.4,fill=0, outlier.size=0, color=alpha("black",0.3)) fill=0 fill=NA alpha=0 col2rgb()
-------------------------------------------------------------------------------------------------------
score <- matrix(sample(1:6, size=10*7,rep=T),nrow=10)
colnames(score) <- paste("HW",1:7,sep="")
rownames(score) <- paste("Student",1:10,sep="")
score
#           HW1 HW2 HW3 HW4 HW5 HW6 HW7
# Student1    2   6   6   5   6   2   1
# Student2    6   2   1   1   5   6   3
# Student3    5   2   6   5   2   2   2
# Student4    3   2   2   4   4   4   2
# Student5    4   1   1   6   3   3   6
# Student6    6   2   4   5   2   4   5
# Student7    3   6   2   2   6   5   3
# Student8    1   2   6   4   4   4   1
# Student9    5   1   1   3   5   3   4
# Student10   4   4   2   2   2   5   2

boxplot(score, besides=T)
-------------------------------------------------------------------------------------------------------
scale_fill_grey theme_bw ggplot(df_melted, aes(x = factor(res), y =value, fill=variable)) +
   geom_boxplot()+
   scale_fill_grey(start = .5, end = .9) +
   theme_bw()
-------------------------------------------------------------------------------------------------------
data2 <- read.table("http://lib.stat.cmu.edu/datasets/Plasma_Retinol",
         skip=30,nrows=315)
dnames <- c("age","sex","smokstat","quetelet","vituse","calories","fat","fiber",
           "alcohol","cholesterol","betadiet","retdiet","betaplasma","retplasma")
names(data2) <- dnames par(mfrow=c(1,2),las=1,bty="l")
with(data2,plot(betaplasma~age))
with(data2,boxplot(betaplasma~vituse)) mod <- glm(betaplasma ~ age + vituse, family=gaussian(link="log"), data=data2,
           start=c(10,0,0))
mod <- glm(betaplasma ~ age + vituse, family=gaussian(link="log"), data=data2,
           start=c(log(mean(data2$betaplasma)),0,0)) summary(mod)
## 
## Coefficients:
##              Estimate Std. Error t value Pr(>|t|)    
## (Intercept)  5.467575   0.218360  25.039  < 2e-16 ***
## age          0.005681   0.003377   1.682   0.0935 .  
## vituse      -0.273027   0.065552  -4.165 4.03e-05 ***
## ---
## Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 
## 
## (Dispersion parameter for gaussian family taken to be 31385.26)
## 
##     Null deviance: 10515638  on 314  degrees of freedom
## Residual deviance:  9791967  on 312  degrees of freedom
## AIC: 4160.4
## 
## Number of Fisher Scoring iterations: 9

confint(mod)
##                     2.5 %      97.5 %
## (Intercept)  5.0364648709  5.87600710
## age         -0.0007913795  0.01211007
## vituse      -0.4075213916 -0.14995759 log(1+x) with(data2,plot(log(1+betaplasma)~age))
with(data2,boxplot(log(1+betaplasma)~vituse)) ggplot vituse library(ggplot)
theme_set(theme_bw())
(g1 <- qplot(age,1+betaplasma,colour=factor(vituse),data=data2)+
    geom_smooth(method="lm")+
    scale_y_log10()) g1 %+% subset(data2,betaplasma>0) vituse
-------------------------------------------------------------------------------------------------------
data geom_...() p1 =ggplot(data = a, aes(x = factor(sector), y = YTD.Retn, fill=factor(sector))) + 
   geom_boxplot() +
  scale_fill_discrete(guide=F) +
  geom_point(data = b, aes(x= factor(sector),y= YTD.Retn))

plot(p1)
-------------------------------------------------------------------------------------------------------
ggplot(mydata, aes(x = v_rank, lower = mean - sd, upper = mean + sd, 
                        middle = mean, ymin = min, ymax = max, group=v_rank)) +
  geom_boxplot(stat="identity") +
  coord_trans(x = "log10", y = "log10")
-------------------------------------------------------------------------------------------------------
mydata library("ggplot2")

rk<- ggplot(mydata, aes(x = as.factor(v_rank), lower = mean - sd, upper = mean + sd, 
                        middle = mean, ymin = min, ymax = max ))

rk <- rk + geom_boxplot(stat="identity")

rk<- rk + coord_trans(y = "log10")+ theme_bw()
rk
-------------------------------------------------------------------------------------------------------
?bxp boxlty: box outline type
whisklty: whisker line type
staplelty: staple (= end of whisker) line type outline = FALSE 
boxplot(count ~ spray, data = InsectSprays, outline = FALSE, boxlty = 0,whisklty = 0, staplelty = 0)
-------------------------------------------------------------------------------------------------------
replication library(ggplot2)
ggplot(dat, aes(x = as.factor(replication), y = population)) + geom_boxplot() replication aes(group = replication) geom_boxplot ggplot(dat, aes(x = replication, y = population)) +
  geom_boxplot(aes(group = replication))
-------------------------------------------------------------------------------------------------------
log = 'y' at axis(2, at= exp(c(-6, -3, -1, 0, 1, 3, 6)), labels=c(-6, -3, -1, 0, 1, 3, 6)) set.seed(1)
TX <- data.frame(tx = gl(2,3), y= rlnorm(600, mean = -1, sd = 3))
boxplot( y~tx, data = TX, log = 'y',yaxt="n", las=2,  cex.axis=0.7)
axis(2, at= exp(c(-6, -3, -1, 0, 1, 3, 6)), labels=c(-6, -3, -1, 0, 1, 3, 6))
-------------------------------------------------------------------------------------------------------
knitr <<boring-plots, fig.width=4, fig.height=4, out.width='.4\\linewidth'>>=
## two plots side by side (option fig.show='hold')
par(mar=c(4,4,.1,.1),cex.lab=.95,cex.axis=.9,mgp=c(2,.7,0),tcl=-.3,las=1)
boxplot(x)
hist(x,main='')
@ \begin{r}

\end{r}
-------------------------------------------------------------------------------------------------------
library(plyr)
tg <- ddply(ToothGrowth, c("dose", "supp"), summarise, len = mean(len))

library(ggplot2)
ggplot(ToothGrowth, aes(x=as.factor(dose), y=len, colour=supp)) +
    geom_boxplot() +
    geom_line(data=tg, aes(group=supp))
-------------------------------------------------------------------------------------------------------
boxplot(c(tab)) boxplot(as.vector(tab))
-------------------------------------------------------------------------------------------------------
par(mfrow=c(2,2))
invisible(
  by(df,df$ind,
    function(x)
      boxplot(depth~hour,data=x,xlab="Hour of day",ylab="Depth (m)")
    )
) boxplot df by df$ind invisible boxplot
-------------------------------------------------------------------------------------------------------
rect() lty=0 boxplot() rect() add=TRUE boxplot() a<-rep(c("g1","g2","g3","g4","g5","g6"),each=10)
b<-rnorm(60)    
boxplot(b~a)
rect(0.5,-3,1.5,3,col="grey75",lty=0)
rect(2.5,-3,3.5,3,col="grey75",lty=0)
boxplot(b~a,add=TRUE)
-------------------------------------------------------------------------------------------------------
boxplot() rect() rect() text() set.seed(123)
  x<-rnorm(100)
  boxplot(x,horizontal=TRUE,axes=FALSE)
  rect(min(x),1.5,quantile(x,0.25),1.4,col="red")
  rect(quantile(x,0.25),1.5,quantile(x,0.60),1.4,col="green")
  rect(quantile(x,0.60),1.4,max(x),1.5,col="yellow")
  text(-1.5,1.45,"25%")
  text(0,1.45,"35%")
  text(1.1,1.45,"40%")
-------------------------------------------------------------------------------------------------------
horizontal = TRUE axes = FALSE staplewex = 1 fivenum y boxplot(X, horizontal = TRUE, axes = FALSE, staplewex = 1)
text(x=fivenum(X), labels =fivenum(X), y=1.25) 3 X
-------------------------------------------------------------------------------------------------------
boxplot plot = FALSE text d <- boxplot(len~supp*dose, data=ToothGrowth,plot = FALSE)

 boxplot(len~supp*dose, data=ToothGrowth, notch=TRUE,col=(c("gold","darkgreen")),main="Tooth Growth", xlab="Suppliment and Dose",axes = FALSE )

for (i in 1:ncol(d$stats)){
    text(i,d$stats[,i],labels = d$stats[,i],cex = 0.75,adj = c(0.5,0))
    text(i,d$stats[5,i]+1,labels = paste0("n=",d$n[i]),cex = 0.75)
    text(i-0.25,d$stats[3,i],labels = d$names[i],adj = 1,cex = 0.75)
}
-------------------------------------------------------------------------------------------------------
?axis axis(side = 4) boxplot(rnorm(100))
axis(side = 4)
-------------------------------------------------------------------------------------------------------
out.width out.height ```{r out.width=c('500px', '300px'), fig.show='hold'}
boxplot(1:10)
plot(rnorm(10))
```
-------------------------------------------------------------------------------------------------------
x <- c('AAAAABBBBB', 'ABCAAABBBDDD')
gsub("([A-Za-z])\\1+","\\1",x) gsub library(microbenchmark)
set.seed(1)
##create sample dataset
x <- apply(
  replicate(100,sample(c(LETTERS[1:3],""),10,replace=TRUE))
,2,paste0,collapse="")
##benchmark
xm <- microbenchmark(
    SAPPLY = sapply(strsplit(x, ''), function(x) paste0(rle(x)$values, collapse=''))
    ,GSUB.LETTER = gsub("([A-Za-z])\\1+","\\1",x)
    ,GSUB.ANY = gsub("(.)\\1+","\\1",x)
)
##print results
print(xm)
# Unit: milliseconds
         # expr       min        lq    median        uq       max
# 1    GSUB.ANY  1.433873  1.509215  1.562193  1.664664  3.324195
# 2 GSUB.LETTER  1.940916  2.059521  2.108831  2.227435  3.118152
# 3      SAPPLY 64.786782 67.519976 68.929285 71.164052 77.261952

##boxplot of times
boxplot(xm)
##plot with ggplot2
library(ggplot2)
qplot(y=time, data=xm, colour=expr) + scale_y_log10()
-------------------------------------------------------------------------------------------------------
> boxplot(myd$myv, col = "lightgreen", ylim=c(-10,18))s > col2rgb("purple")
#      [,1]
#red    160
#green   32
#blue   240
> rect(0.7, 4.5, 1.3, 8.2, col= rgb( red=160/255, green=32/255, blu=240/255, 0.4) ) points > points(x=rep(1, sum( myd$myv > 8.2 | myd$myv < 4.5 )), 
         y= myd$myv[   myd$myv > 8.2 | myd$myv < 4.5 ] , 
         col="orange", pch=19, bg="orange")
-------------------------------------------------------------------------------------------------------
gridBase set.seed(1234)
myd <- data.frame (SN = 1:100, myv = round (rnorm(100, 5, 5), 2))
boxplot(myd$myv, col = "lightgreen")
sp <- baseViewports()
pushViewport(sp$plot)
grid.rect(default.units='native', width= 1,height=8.2-4.5 ,
            gp=gpar(fill=rgb(1,0,0,0.5)), y = 3)
grid.points(x = rep(1,6) ,y=c(-4,-2,3,9,10,11),
         gp=gpar(col=rgb(1,1,0,0.5),default.units='native'))
-------------------------------------------------------------------------------------------------------
ggplot interval <- c(4.5, 8.2)
myd <- within(myd, group <- myv >= interval[1] & myv <= interval[2]) ggplot(myd, aes(x = 0, y = myv)) +
    geom_boxplot(fill = "lightgreen") +
    annotate("rect", ymin = interval[1], ymax = interval[2],
             xmin = -1/2, xmax = 1/2, fill = "blue", alpha = 0.25) +
    geom_point(data=myd[!myd$group,], shape = 21,
               colour = "black", fill = "orange") +
    scale_x_continuous("", breaks = NULL) +
    theme_bw() group scale_x_continuous theme_bw() size geom_point
-------------------------------------------------------------------------------------------------------
?boxplot outline: if ‘outline’ is not true, the outliers are not drawn (as
          points whereas S+ uses lines).

boxplot(x,horizontal=TRUE,axes=FALSE,outline=FALSE) range: this determines how far the plot whiskers extend out from the
          box.  If ‘range’ is positive, the whiskers extend to the most
          extreme data point which is no more than ‘range’ times the
          interquartile range from the box. A value of zero causes the
          whiskers to extend to the data extremes.

# change the value of range to change the whisker length
boxplot(x,horizontal=TRUE,axes=FALSE,range=2)
-------------------------------------------------------------------------------------------------------
foo <- boxplot(x,horizontal=TRUE,axes=FALSE,outline=FALSE)
points(foo$stats[c(1,5),1],c(1,1),pch=21,bg="red")
-------------------------------------------------------------------------------------------------------
test.function<-function(y){
  for (x in 1:length(y)){
    windows()
    boxplot(y[,x],   main=names(y)[x])
    savePlot(filename=paste("E:\\R\\2_outputs\\boxplot_",deparse(x)), type="tiff")
      dev.off()
    }
} test.function<-function(y){
  for (x in 1:length(y)){
    png(paste("E:\\R\\2_outputs\\boxplot_",deparse(x),'.tiff'))
    pp <- boxplot(y[,x],   main=names(y)[x])
    dev.off()
    }
}

test.function(df.abcd)
-------------------------------------------------------------------------------------------------------
?tiff test.function<-function(y){
  for (x in seq_along(y)){
    tiff(filename = paste("E:\\R\\2_outputs\\boxplot_",deparse(x))
    boxplot(y[,x],   main=names(y)[x])
    dev.off()
    }
} pdf png
-------------------------------------------------------------------------------------------------------
aes aes_string ggplot(data=df,aes_string(x='group',y='value')) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
ggplot2 scale_x_discrete library(ggplot2)
a$bymedian = with(a, reorder(CAT, log(EMP), median))
p <- ggplot(a,aes(y=log(EMP),x=bymedian))+
     geom_boxplot()

breaks <- levels(a$bymedian)[seq(1,nlevels(a$bymedian),20)]
p %+% scale_x_discrete(breaks = breaks,  labels = breaks)
-------------------------------------------------------------------------------------------------------
data.frame df # boxplot for region = Mor
require(ggplot2)
df.f <- subset(df, region == "Mor")
# convert factor to character
df.f$ev <- as.character(df.f$ev)
# remove "," from ev using gsub and then convert to number
df.f$ev <- as.numeric(gsub(",", "", df.f$ev))
p <- ggplot(data = df.f, aes(factor(tradlib), ev))
p + geom_boxplot()
-------------------------------------------------------------------------------------------------------
library(rattle)
library(ggplot2)

weatherPlot <- ggplot(weather, aes(factor(WindGustDir), WindGustSpeed)) 
weatherPlot + geom_boxplot()
-------------------------------------------------------------------------------------------------------
> pindex2 <- rbind(data.frame(index=pindex$index[pindex$Ctarget==TRUE],
    targets="Ctarget"),
  data.frame(index=pindex$index[pindex$Ctarget==TRUE & pindex$Jtarget==TRUE],
    targets="Ctarget AND Jtarget"),
  data.frame(index=pindex$index[pindex$Ctarget==FALSE & pindex$Jtarget==FALSE],
    targets="NOT Ctarget OR Jtarget"),
  data.frame(index=pindex$index[pindex$Jtarget==TRUE],
    targets="Jtarget")) ggplot(pindex2,aes(x=targets,y=log10(index+1))) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
coefplot arm library(arm)
coefplot(model) d <- data.frame(y,x1,x2,x3,x4,x5)
library(reshape2)
dm <- melt(d,id.var=1)
library(ggplot2)
ggplot(dm,aes(x=value,y=y))+geom_boxplot(aes(group=value))+
    facet_wrap(~variable,nrow=1)
-------------------------------------------------------------------------------------------------------
DB <- data.frame(
HOUR  = c(1, 10, 5, 20),
ID  = c(2, 4, 6, 6))

NHOUR <- sprintf("%02d",DB$HOUR) # fix to 2 characters 

cbind(NHOUR, DB) # combine old and newdata 
  NHOUR HOUR ID
1    01    1  2
2    10   10  4
3    05    5  6
4    20   20  6 # install.packages(c("microbenchmark", "stringr"), dependencies = TRUE)
require(microbenchmark)
require(stringr)

SPRINTF <- function(x) sprintf("%02d", x)
FORMATC <- function(x) formatC(x, width = 2,flag = 0)
STR_PAD <- function(x) str_pad(x, width=2, side="left", pad="0")

x <- round(runif(1e5)*10)
res <- microbenchmark(SPRINTF(x), STR_PAD(x), FORMATC(x), times = 15)

## Print results:
print(res)
Unit: milliseconds
        expr       min        lq    median        uq      max
1 FORMATC(x) 623.53785 629.69005 638.78667 671.22769 679.8790
2 SPRINTF(x)  34.35783  34.81807  35.04618  35.53696  37.1622
3 STR_PAD(x) 116.54969 118.41944 118.97363 120.05729 163.9664

### Plot results:
boxplot(res)
-------------------------------------------------------------------------------------------------------
data.frame sample instrument value df <- data.frame(sample = rep(c("One","Two","Three","Four"),each=30), 
                 instrument = rep(rep(c("My Instrument","Your Instrument","Joe's Instrument"),each=10),4),
                 value = rnorm(120))

> head(df)
  sample    instrument       value
1    One My Instrument  0.08192981
2    One My Instrument -1.11667766
3    One My Instrument  0.34117450
4    One My Instrument -0.42321236
5    One My Instrument  0.56033804
6    One My Instrument  0.32326817 geom_boxplot ggplot(df, aes(x=sample,y=value)) + 
  geom_boxplot() + 
  facet_wrap(~ instrument, ncol=1)
-------------------------------------------------------------------------------------------------------
boxplot(quantity ~ bymedian) bymedian levels(x$State) levels(bymedian) bymedian a <- as.factor(c("TX", "NY", "WA"))
levels(a)
b <- c(5, 3, 2)
boxplot(b ~ a)
# Order the levels of a according to their value in b
a_reordered <- reorder(a, b)
levels(a_reordered)
boxplot(b ~ a_reordered) > a
[1] TX NY WA
Levels: NY TX WA
> a_reordered
[1] TX NY WA
# Don't be confused by this extra attr(, "scores") bit: the line
# above is the actual data stored in the vector
#attr(,"scores")
#NY TX WA 
# 3  5  2 
Levels: WA NY TX
> b
[1] 5 3 2
-------------------------------------------------------------------------------------------------------
region <- factor(region,levels=unique(region)) ccwelfrsts <- read.csv("GTAP_Sims.csv")
## unmangle data
ccwelfrsts[5:8] <- sapply(ccwelfrsts[5:8],as.numeric)
evBASE.f <- droplevels(subset(ccwelfrsts, tradlib =="BASE"))
## reorder region levels
evBASE.f <- transform(evBASE.f,region=factor(region,levels=unique(region)))
library(ggplot2)
theme_set(theme_bw())
p <- ggplot(data = evBASE.f, aes(region, ev))
p + geom_boxplot() + 
    theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 16)) +
    theme(axis.text.y = element_text(colour = 'black', size = 16))+
    xlab("") coord_flip
-------------------------------------------------------------------------------------------------------
# data
require(vegan)
data(dune)
data(dune.env)

# RDA
RDA <- rda(dune ~ A1, data = dune.env)

# extract species scores
df1 <- data.frame(RDA.scores = scores(RDA)$sites[ , 1], Management = dune.env$Management)
df2 <- data.frame(spec_scores = scores(RDA)$species[ , 1], taxa = rownames(scores(RDA)$species))
df2 <- df2[abs(df2$spec_scores) > 0.05, ]
df2 <- cbind(df2, x = rep(1:4, 6))

# plot
P <- ggplot(data = df1, aes( x = Management, y = RDA.scores) ) + geom_boxplot() + theme_bw()  +geom_hline(y=0, lty=2) + geom_rug(data= df2, mapping=aes(x = x , y = spec_scores), sides="r") + geom_text(data= df2, mapping=aes(x=5, y=spec_scores, label=taxa), size=2) + xlim(c("BF", "HF", "NM", "SF", ""))
P
-------------------------------------------------------------------------------------------------------
ggplot2 require(vegan)
data(dune)
data(dune.env)

# RDA
RDA <- rda(dune ~ A1, data = dune.env)

# extract species scores
df1 <- data.frame(RDA.scores = scores(RDA)$sites[ , 1], Management = dune.env$Management)
df2 <- data.frame(y = scores(RDA)$species[ , 1], taxa = rownames(scores(RDA)$species))
# Order data according to species scores
df2<-df2[order(df2$y),]

# define values for rugs (segments). 4.9 and 5.0 used because data has 4 levels (+1)
df2$x=4.9
df2$xend=5

# define coordinates for names (30 is number of species)
df2$yend2<-seq(min(df1$RDA.scores),max(df1$RDA.scores),length.out=30)
df2$xend2=5.3

# plot
P <- ggplot(data = df1, aes( x = Management, y = RDA.scores) ) + 
     geom_segment(y=0,yend=0,x=0,xend=5, lty=2, size = I(0.3)) + 
     geom_boxplot() + 
     #add extra levels to get space
     scale_x_discrete(limits=c("BF", "HF", "NM", "SF", "","")) + 
     #set y scale
     scale_y_continuous(limits=c(-3,5),expand=c(0,0)) +
     #add rugs as segments and add segments connecting rugs and texts
     geom_segment(data= df2, mapping=aes(x=x,xend=xend,y=y,yend=y), size = I(0.3)) +
     geom_segment(data= df2, mapping=aes(x=xend,xend=xend2,y=y,yend=yend2), size = I(0.4)) +
     #add texts
     geom_text(data=df2,mapping=aes(x=xend2+0.1,y=yend2,label=taxa),hjust=0, size=3) +
     #add rectangular to imitate box around plot
     geom_rect(xmax=5,xmin=0.4,ymax=5,ymin=-3,colour="black",fill=NA)

# Final adjustments of plot
P+theme(axis.line=element_blank(),
        panel.grid=element_blank(),
        panel.background=element_blank())
-------------------------------------------------------------------------------------------------------
grid.arrange gridExtra library(gridExtra)

p1 <- ggplot(subset(stest,site=="north"), aes(x=factor(year), y=conc)) +
 geom_boxplot(horizontal=TRUE) + coord_flip() + scale_y_log10(name="")

p2 <- ggplot(subset(stest,site=="south"), aes(x=factor(year), y=conc)) +
 geom_boxplot(horizontal=TRUE) + coord_flip() + 
 scale_y_log10(name="X Title",breaks=seq(4,6,by=.5)) +

grid.arrange(p1, p2, ncol=1)
-------------------------------------------------------------------------------------------------------
scale_x_discrete() p <- ggplot(dat, aes(x=factor(x), y=y))
p + geom_boxplot(aes(fill = factor(gp))) + 
    scale_x_discrete(limits=1:7)
-------------------------------------------------------------------------------------------------------
group x group ggplot() + 
  geom_boxplot(data=dat, aes(x=x, y=y, fill=factor(gp), group=x)) ggplot() + 
  geom_boxplot(data=dat, aes(x=x, y=y, fill=factor(gp), group=paste(x, gp)))
-------------------------------------------------------------------------------------------------------
hist(X[abs(X)<1])
hist(X[abs(X)<5])
hist(X[abs(X)<50])
hist(X) plot(ecdf(X)) boxplot(X)
-------------------------------------------------------------------------------------------------------
d <- data.frame(x = 2, y=1:5) 
 boxplot(d)
 boxplot(d, axes=FALSE) # add axes=FALSE to remove axes d <- data.frame(x = 2, y=1:5) 
 boxplot(d, axes=FALSE)
 axis(2, at=1:5, labels=c(rep("whatever I want",5))) boxplot(d, xaxt="n")
-------------------------------------------------------------------------------------------------------
scale_x_discrete() bp <- ggplot(data=PlantGrowth, aes(x=group, y=weight, fill=group))+
geom_boxplot()
bp+scale_x_discrete(labels=paste(PlantGrowthSum$group,"(",PlantGrowthSum$sum,")",sep=""))
-------------------------------------------------------------------------------------------------------
require(reshape2)
df <- read.csv("TestData.csv", header=T)
# melting by "Label". `melt is from the reshape2 package. 
# do ?melt to see what other things it can do (you will surely need it)
df.m <- melt(df, id.var = "Label")
> df.m # pasting some rows of the melted data.frame

#     Label variable      value
# 1    Good       F1 0.64778924
# 2    Good       F1 0.54608791
# 3    Good       F1 0.46134200
# 4    Good       F1 0.79421221
# 5    Good       F1 0.56919951
# 6    Good       F1 0.73568570
# 7    Good       F1 0.65094207
# 8    Good       F1 0.45749702
# 9    Good       F1 0.80861929
# 10   Good       F1 0.67310067
# 11   Good       F1 0.68781739
# 12   Good       F1 0.47009455
# 13   Good       F1 0.95859182
# 14   Good       F1 1.00000000
# 15   Good       F1 0.46908343
# 16    Bad       F1 0.57875528
# 17    Bad       F1 0.28938046
# 18    Bad       F1 0.68511766

require(ggplot2)
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=Label)) p <- ggplot(data = df.m, aes(x=variable, y=value)) + 
             geom_boxplot(aes(fill=Label))
p + facet_wrap( ~ variable, scales="free") x-labels y-labels title legend heading jitter p <- ggplot(data = df.m, aes(x=variable, y=value)) 
p <- p + geom_boxplot(aes(fill=Label))
p <- p + geom_jitter()
p <- p + facet_wrap( ~ variable, scales="free")
p <- p + xlab("x-axis") + ylab("y-axis") + ggtitle("Title")
p <- p + guides(fill=guide_legend(title="Legend_Title"))
p geom_point() position_dodge require(ggplot2)
p <- ggplot(data = df.m, aes(x=variable, y=value)) 
p <- p + geom_boxplot(aes(fill = Label))
# if you want color for points replace group with colour=Label
p <- p + geom_point(aes(y=value, group=Label), position = position_dodge(width=0.75))
p <- p + facet_wrap( ~ variable, scales="free")
p <- p + xlab("x-axis") + ylab("y-axis") + ggtitle("Title")
p <- p + guides(fill=guide_legend(title="Legend_Title"))
p
-------------------------------------------------------------------------------------------------------
library(reshape2)
library(ggplot2)
df <- read.csv("TestData.csv", header=T)
df.m <- melt(df, id.var = "Label")

ggplot(data = df.m, aes(x=Label, y=value)) + 
         geom_boxplot() + facet_wrap(~variable,ncol = 4)
-------------------------------------------------------------------------------------------------------
ggplot2 test melt library(reshape2)
test.m <- melt(test) library(ggplot2)
ggplot(test.m, aes(x = variable, y = value, fill = Type)) +
  geom_boxplot() +
  scale_fill_manual(values = c("yellow", "orange"))
-------------------------------------------------------------------------------------------------------
test <- structure(list(Type = structure(c(1L, 1L, 1L, 1L, 1L, 2L, 2L, 
    2L, 2L, 2L), .Label = c("TypeA", "TypeB"), class = "factor"), 
    Met1 = c(65L, 46L, 44L, 46L, 33L, 66L, 55L, 55L, 36L, 67L
    ), Met2 = c(43L, 25L, 23L, 44L, 22L, 8L, 76L, 77L, 67L, 55L
    ), Met3 = c(97L, 76L, 55L, 55L, 55L, 66L, 66L, 88L, 55L, 
    76L), Met4 = c(77L, 77L, 46L, 77L, 54L, 47L, 65L, 46L, 44L, 
    65L)), .Names = c("Type", "Met1", "Met2", "Met3", "Met4"), 
    class = "data.frame", row.names = c(NA, -10L))


# install.packages("ggplot2", dependencies = TRUE)
require(ggplot2)
require(reshape2)
df <- melt(test)
p <- ggplot(df, aes(factor(variable), value)) + geom_boxplot(aes(fill = Type))
p
-------------------------------------------------------------------------------------------------------
df <- read.table(text="Type    Met1    Met2    Met3    Met4
TypeA   65  43  97  77
TypeA   46  25  76  77
TypeA   44  23  55  46
TypeA   46  44  55  77
TypeA   33  22  55  54
TypeB   66  8   66  47
TypeB   55  76  66  65
TypeB   55  77  88  46
TypeB   36  67  55  44
TypeB   67  55  76  65",header=TRUE)

library(reshape2)
df2 <- melt(df)

boxplot(
  formula = value ~ variable,
  data    = df2,
  boxwex  = 0.25,
  at      = 1:4 - 0.2,
  subset  = Type == "TypeA",
  col     = "yellow",
  main    = "blah",
  xlab    = "x",
  ylab    = "y",
  ylim    = c( 0, ceiling( max( df2$value ) ) + 1 ),
  yaxs    = "i" )


boxplot(
  formula = value ~ variable,
  data    = df2,
  boxwex  = 0.25,
  at      = 1:4 + 0.2,
  subset  = Type == "TypeB",
  col     = "orange",
  add     = TRUE )
-------------------------------------------------------------------------------------------------------
fbi boxplot(test$fbi,test$fbi[test$cens==0],names=c("all cases","w/out censored")) boxplot(fbi ~ cens,data=test,names=c("not censored","censored")) NADA library(NADA)
cenboxplot(test$fbi, as.logical(test$cen)) cenboxplot
-------------------------------------------------------------------------------------------------------
layout() matrix() plot.new() text() x<-1:10
par(mar=c(2.5,2.5,1,1))
layout(matrix(c(1,2,3,4,1,5,3,6),ncol=2),heights=c(1,3,1,3))
plot.new()
text(0.5,0.5,"First title",cex=2,font=2)
plot(x)
plot.new()
text(0.5,0.5,"Second title",cex=2,font=2)
hist(x)
boxplot(x)
barplot(x)
-------------------------------------------------------------------------------------------------------
geom_point ggplot2 library(ggplot2)
ggplot(msq, aes(sex, index)) +   # Note. I modified the aes call
  geom_boxplot() +
  geom_point(aes(y = 73.9)) # add points
-------------------------------------------------------------------------------------------------------
data <- c(298, 507, 1008, 346)
boxplot(data,pars=list(yaxt="n"))
axis(
     2,
     at=axTicks(2),
     labels=paste(axTicks(2) %/% 60,sprintf("%02d",axTicks(2) %% 60),sep=":"),
     las=2
    ) axTicks ?axTicks %% %/% x %/% y x y sprintf 0 2 02
-------------------------------------------------------------------------------------------------------
describeBy boxplot describeBy(sat.act,sat.act$gender) 
group: 1
          var   n   mean     sd median trimmed    mad min max range  skew kurtosis   se
gender      1 247   1.00   0.00      1    1.00   0.00   1   1     0   NaN      NaN 0.00
education   2 247   3.00   1.54      3    3.12   1.48   0   5     5 -0.54    -0.60 0.10
age         3 247  25.86   9.74     22   24.23   5.93  14  58    44  1.43     1.43 0.62
ACT         4 247  28.79   5.06     30   29.23   4.45   3  36    33 -1.06     1.89 0.32
SATV        5 247 615.11 114.16    630  622.07 118.61 200 800   600 -0.63     0.13 7.26
SATQ        6 245 635.87 116.02    660  645.53  94.89 300 800   500 -0.72    -0.12 7.41
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
group: 2
          var   n   mean     sd median trimmed    mad min max range  skew kurtosis   se
gender      1 453   2.00   0.00      2    2.00   0.00   2   2     0   NaN      NaN 0.00
education   2 453   3.26   1.35      3    3.40   1.48   0   5     5 -0.74     0.27 0.06
age         3 453  25.45   9.37     22   23.70   5.93  13  65    52  1.77     3.03 0.44
ACT         4 453  28.42   4.69     29   28.63   4.45  15  36    21 -0.39    -0.42 0.22
SATV        5 453 610.66 112.31    620  617.91 103.78 200 800   600 -0.65     0.42 5.28
SATQ        6 442 596.00 113.07    600  602.21 133.43 200 800   600 -0.58     0.13 5.38
> boxplot(sat.act,sat.act$gender, col ='pink')
-------------------------------------------------------------------------------------------------------
df <- data.frame(f1=factor(data$Tagging.location), f2=factor(data$Station), depth=data$Detection.depth)

df2 <- data.frame(f2=factor(data$Station), depth=data$depth) ggplot()+geom_boxplot(data=df, aes(x=f2, y=depth, col=f1)) + geom_point(data=df2, aes(x=f2, y=depth), colour="blue") + scale_y_reverse()
-------------------------------------------------------------------------------------------------------
axis.POSIXct data <- c(298, 507, 1008, 346)
data2 <- as.POSIXct(data, origin=cut(Sys.time(), "hours"))
boxplot(data2, pars=list(yaxt="n"))
axis.POSIXct(2, at=pretty(data2), format="%M:%S", las=2)
-------------------------------------------------------------------------------------------------------
summary aggregate sprdiurnal matrix NA list NA iris_2 <- iris
iris_2$Sepal.Length[10] <- NA data.frame NA list (irisagg <- aggregate(iris["Sepal.Length"], iris["Species"], summary))[[2]]
#      Min. 1st Qu. Median  Mean 3rd Qu. Max.
# [1,]  4.3   4.800    5.0 5.006     5.2  5.8
# [2,]  4.9   5.600    5.9 5.936     6.3  7.0
# [3,]  4.9   6.225    6.5 6.588     6.9  7.9
(iris_2agg <- aggregate(iris_2["Sepal.Length"], iris_2["Species"], summary))[[2]]
# $`0`
#     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
#    4.300   4.800   5.000   5.008   5.200   5.800       1 
# 
# $`1`
#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#   4.900   5.600   5.900   5.936   6.300   7.000 
# 
# $`2`
#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#   4.900   6.225   6.500   6.588   6.900   7.900 irisagg$Summary <- unlist(apply(irisagg[[2]], 1, list), recursive = FALSE)
irisagg$Summary
# [[1]]
#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#   4.300   4.800   5.000   5.006   5.200   5.800 
# 
# [[2]]
#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#   4.900   5.600   5.900   5.936   6.300   7.000 
# 
# [[3]]
#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#   4.900   6.225   6.500   6.588   6.900   7.900 simplify aggregate (iris_3agg <- aggregate(iris["Sepal.Length"], 
                        iris["Species"], summary, 
                        simplify = FALSE))[[2]]
# $`0`
#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#   4.300   4.800   5.000   5.006   5.200   5.800 
# 
# $`1`
#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#   4.900   5.600   5.900   5.936   6.300   7.000 
# 
# $`2`
#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#   4.900   6.225   6.500   6.588   6.900   7.900 sprdiurnal$ws sprdiurnal$ws2 <- unlist(apply(sprdiurnal$ws, 1, list), recursive=FALSE) boxplot boxplot(sprdiurnal$ws2, e..t..c...) sprdiurnal sprdiurnal <- aggregate(spr9["ws"], 
                        format(spr9["date"],"%H"), 
                        summary, na.rm = TRUE, 
                        simplify = FALSE)
-------------------------------------------------------------------------------------------------------
stem txtplot curve ascii > with(cars,txtplot(speed,dist))
     +----+-----------+------------+-----------+-----------+--+
 120 +                                                   *    +
     |                                                        |
 100 +                                                        +
     |                                                   * *  |
  80 +                          *         *                   +
     |                                       *      *    *    |
  60 +                          *              *              +
     |                             *    * *    *      *       |
  40 +                        *      *  * *  *                +
     |                *       * *    *  *    * *              |
  20 +         *      *  * *  * *  *                          +
     |           *    *  * *                                  |
     |  *      *    *                                         |
   0 +----+-----------+------------+-----------+-----------+--+
          5          10           15          20          25 > txtacf(ldeaths)
      +-+--------------+--------------+--------------+--------+
    1 + *                                                     +
      | *                                                     |
      | *  *                        * *  *                    |
  0.5 + *  *                        * *  *                    +
      | *  * *                   *  * *  * *                  |
      | *  * *                   *  * *  * *                  |
      | *  * *                   *  * *  * *                  |
    0 + *  * *  * *  * *  * *  * *  * *  * *  * *  * *  * *   +
      |           *  * *  * *                   *  * *  * *   |
      |           *  * *  * *                   *  * *  * *   |
      |           *  * *  * *                      * *  * *   |
 -0.5 +              * *  *                        * *  *     +
      |              * *  *                          *        |
      +-+--------------+--------------+--------------+--------+
        0             0.5             1             1.5 > txtdensity(rnorm(100,m=5,s=.1))
   +------+----------+----------+----------+----------+-------+
   |                           *****                          |
 4 +                          **   ***                        +
   |                         *       ***                      |
   |                        **         ***                    |
 3 +                       **            ***                  +
   |                     ***               **                 |
   |                 *****                   **               |
 2 +               ***                        **              +
   |             ***                           **             |
   |            **                              **            |
 1 +           **                                ***          +
   |         ***                                   ******     |
   |  ********                                          ***   |
   +------+----------+----------+----------+----------+-------+
         4.8        4.9         5         5.1        5.2 > vc <- ToothGrowth[,2]=="VC"
 > oj <- ToothGrowth[,2]=="OJ"
 > txtboxplot(ToothGrowth[vc,1],ToothGrowth[oj,1])
       5      10       15       20       25       30      35   
  |----+-------+--------+--------+--------+--------+-------+--|
                  +--------+-----------+                       
 1   -------------|        |           |------------------     
                  +--------+-----------+                       
                         +------------+----+                   
 2          -------------|            |    |---------          
                         +------------+----+                   
 Legend: 1=ToothGrowth[vc, 1], 2=ToothGrowth[oj, 1] > txtcurve(sin(pi*x),from=0,to=2)
      +--+-----------+------------+------------+-----------+--+
    1 +          *********                                    +
      |        ***        **                                  |
      |       **            **                                |
  0.5 +     **               **                               +
      |    **                  **                             |
      |   *                     **                            |
    0 +  *                       **                        *  +
      |                            *                      *   |
      |                             **                  **    |
 -0.5 +                              ***               **     +
      |                                **            **       |
      |                                  **        ***        |
   -1 +                                    *********          +
      +--+-----------+------------+------------+-----------+--+
         0          0.5           1           1.5          2 > txtbarchart(as.factor(res),pch="|")
    +--+------------+------------+------------+------------+--+
 50 +  |                                                      +
    |  |                                                      |
 40 +  |                                                      +
    |  |                                                      |
 30 +  |                         |                            +
    |  |                         |                            |
    |  |                         |                            |
 20 +  |                         |                         |  +
    |  |                         |                         |  |
 10 +  |                         |                         |  +
    |  |                         |                         |  |
  0 +  |                         |                         |  +
    +--+------------+------------+------------+------------+--+
       1           1.5           2           2.5           3   
 Legend: 1=A, 2=B, 3=C stem > stem(log(islands,10))

  The decimal point is at the |

  1 | 1111112222233444
  1 | 5555556666667899999
  2 | 3344
  2 | 59
  3 | 
  3 | 5678
  4 | 012
-------------------------------------------------------------------------------------------------------
ggplot2 reshape Var1 01Max = 0.26 01Q75 = .67 n  <- c("01Min", "01Max", "01Med", "01Q25", "01Q75", "02Min", 
                            "02Max", "02Med", "02Q25", "02Q75")
v1 <- c(0.03,  0.76,  0.41,  0.13,  0.67,  0.10,  0.43,  0.27,  0.2,   0.33)
v2 <- c(0.03,  0.28,  0.14,  0.08,  0.20,  0.02,  0.77,  0.13,  0.06, 0.44)

df <- data.frame(v1=v1, v2=v2)
df <- as.data.frame(t(df))
names(df) <- n
df <- cbind(var=c("v1","v2"), df)
> df

#    var 01Min 01Max 01Med 01Q25 01Q75 02Min 02Max 02Med 02Q25 02Q75
# v1  v1  0.03  0.76  0.41  0.13  0.67  0.10  0.43  0.27  0.20  0.33
# v2  v2  0.03  0.28  0.14  0.08  0.20  0.02  0.77  0.13  0.06  0.44 require(reshape2)
df.m <- melt(df, id="var")
# look for a bunch of numbers from the start of the string and capture it
# in the first variable: () captures the pattern. And replace it with the 
# captured pattern with the variable "\\1"
df.m$year <- gsub("^([0-9]+)(.*$)", "\\1", df.m$variable)

# the same but instead refer to the captured pattern in the second 
# paranthesis using "\\2"
df.m$quan <- gsub("^([0-9]+)(.*)$", "\\2", df.m$variable)
df.f <- dcast(df.m, var+year ~ quan, value.var="value") > df.f

#   var year  Max  Med  Min  Q25  Q75
# 1  v1   01 0.76 0.41 0.03 0.13 0.67
# 2  v1   02 0.43 0.27 0.10 0.20 0.33
# 3  v2   01 0.28 0.14 0.03 0.08 0.20
# 4  v2   02 0.77 0.13 0.02 0.06 0.44 column names require(ggplot2)
require(scales)
p <- ggplot(df.f, aes(x=var, ymin=`Min`, lower=`Q25`, middle=`Med`, 
                           upper=`Q75`, ymax=`Max`)) 
p <- p + geom_boxplot(aes(fill=year), stat="identity") 
p # if you want facetting:
p + facet_wrap( ~ var, scales="free") years var lapply subsetting lapply(levels(df.f$var), function(x) {
    p <- ggplot(df.f[df.f$var == x, ], 
            aes(x=var, ymin=`Min`, lower=`Q25`, 
                middle=`Med`, upper=`Q75`, ymax=`Max`))
    p <- p + geom_boxplot(aes(fill=year), stat="identity")
    p
    ggsave(paste0(x, ".pdf"), last_plot())
}) # change var to VegType everywhere
require(reshape2)
df.m <- melt(df, id="VegType")

df.m$year <- gsub("^X([0-9]+)(.*$)", "\\1", df.m$variable) # pattern has a X
df.m$quan <- gsub("^X([0-9]+)(.*)$", "\\2", df.m$variable) # pattern has a X
df.f <- dcast(df.m, VegType+year ~ quan, value.var="value")
df.f$VegType <- factor(df.f$VegType) # convert integer to factor

require(ggplot2)
require(scales)
p <- ggplot(df.f, aes(x=VegType, ymin=`MIN`, lower=`Q25`, middle=`Q50`, 
                           upper=`Q75`, ymax=`MAX`)) 
p <- p + geom_boxplot(aes(fill=year), stat="identity") 
p
-------------------------------------------------------------------------------------------------------
boxplot() range range
-------------------------------------------------------------------------------------------------------
boxplot range range boxplot.stats v <- c(runif(10), -0.5, -1)
boxplot(v) boxplot.stats boxplot.stats(v)$out
[1] -1 range coef boxplot.stats boxplot(v, range=2) boxplot.stats(v, coef=2)$out
numeric(0)
-------------------------------------------------------------------------------------------------------
fill=0 alpha=0 library(scales) # for alpha function
ggplot(dat, aes(x=group, y=value, color=group, group=group)) +
geom_point(position=position_jitter(width=0.3), alpha=0.2) +
geom_boxplot(size=1.4,alpha=0, outlier.size=0)+
geom_boxplot(size=1.4,alpha=0, outlier.size=0, color=alpha("black",0.3)) fill=0 fill=NA
-------------------------------------------------------------------------------------------------------
alpha aesthetic (aes) alpha length class ggplot(mpg, aes(x=factor(class), y=displ)) + 
      geom_boxplot(aes(fill="red"), 
          alpha = table(mpg$class) / max(table(mpg$class))) +
              scale_fill_manual(values=c("red"="red"), guide = "none")
-------------------------------------------------------------------------------------------------------
log(N2012$Rate) `log(N2012$Rate)` Gas fill ggplot(Data, aes(Location, `log(N2012$Rate)`, fill=Gas)) +
  geom_boxplot(width = 0.7) + 
  geom_point() +
  facet_grid(Gas ~ Month) +
  scale_fill_manual(values=colvec) +
  xlab("Location") + 
  ylab("log(N2O ug N2O-N/m2/h)") + 
  theme(axis.title.x = element_text(face="bold", colour="Black", size=15),
        axis.text.x  = element_text(angle=50, vjust=0.5, size=12, colour="Black"), 
        axis.title.y = element_text(face="bold", size=13), 
        axis.text.y = element_text(size=12, colour="black"))
-------------------------------------------------------------------------------------------------------
dat <- read.table(text = '
RPID    mm  ID  Time    Freq    Freq.1  Freq.2
RPO483  1   B6AC    5   23301   30512   
RPO483  1   B6AC    25  19      17  
RPO244  1   B6C     5   14889   20461   
RPO244  1   B6C     25  81      86  
RPO876  1   G3G3A   5   106760  59950   103745
RPO876  1   G3G3A   25  4578    38119   37201
RPO876  7   F3G3A   5   205803  148469  173580
RPO876  7   F3G3A   25  28648   30321   26454
RPO939  7   F3E324A 5   242285      
RPO939  7   F3E324A 25  42837       
RPO934  7   F3E325A 5   242001  129272  112371
RPO934  7   F3E325A 25  73057   58685   66582',head=T, fill=T) reshape2 library(reshape2)
dat.m <- melt(dat,id.vars='ID', measure.vars=c('Freq','Freq.1','Freq.2'))
library(ggplot2)
p <- ggplot(dat.m) +
      geom_boxplot(aes(x=ID, y=value, color=variable))
-------------------------------------------------------------------------------------------------------
tapply(dfrm$time, substr(dfrm$month, 1,3), summary)
library(Hmisc)
tapply(dfrm$time, substr(dfrm$month, 1,3), describe)
boxplot(time~month, data=dfrm)
-------------------------------------------------------------------------------------------------------
V1 V13 df<-as.data.frame(matrix(rnorm(1300),ncol=13)) melt() reshape2 variable value library(reshape2)
dflong<-melt(df) sample group1 group2 group3 dflong$sample<-c(rep("group1",nrow(df)*5),rep("group2",nrow(df)*4),rep("group3",nrow(df)*4)) fill= library(ggplot2)
ggplot(data=dflong,aes(variable,value, fill=sample))+geom_boxplot()
-------------------------------------------------------------------------------------------------------
df<-as.data.frame(matrix(rnorm(1300),ncol=13))
library(reshape2)
dflong<-melt(df)
dflong$sample<-c(rep("group1",nrow(df)*5),rep("group2",nrow(df)*4),rep("group3",nrow(df)*4))
library(ggplot2) library(RColorBrewer) col.g <- c(brewer.pal(9,"Greens"))[5:9] # select 5 colors from class Greens
col.r <- c(brewer.pal(9,"Reds"))[6:9] # select 4 colors from class Reds
col.b <- c(brewer.pal(9,"Blues"))[6:9] # select 4 colors from class Blues
my.cols <- c(col.g,col.r,col.b) image(1:13,1,as.matrix(1:13), col=my.cols, xlab="my palette", ylab="", xaxt="n", yaxt="n", bty="n") ggplot(data=dflong,aes(variable,value,colour=variable))+geom_boxplot()+scale_colour_manual(values = my.cols) ggplot(data=dflong,aes(variable,value,fill=variable))+geom_boxplot()+scale_fill_manual(values = my.cols)
-------------------------------------------------------------------------------------------------------
las=2 boxplot() df<-data.frame(Rate=rnorm(100),Purpose=rep(letters[1:10],each=10))
boxplot(df$Rate~df$Purpose,las=2) par(mar=c(7,5,1,1))
boxplot(df$Rate~df$Purpose,las=2)
-------------------------------------------------------------------------------------------------------
##Generate a boxplot without axes
boxplot(count ~ spray, data = InsectSprays, axes=FALSE)

##Add in a y-axis
axis(2, seq(0,25, 5), seq(0, 25, 5))

##Add in an x-axis
##las=2 changes the orientation
axis(1, 1:6, paste("Big Label", 1:6), las=2)
-------------------------------------------------------------------------------------------------------
ggplot2 data <- data.frame(Rate=rnorm(1:1000),Purpose=sample(c("foo","bar","baz"),1000,replace=TRUE))
ggplot(data, aes(x=factor(Purpose), y=Rate)) + geom_boxplot() + theme(axis.text.x  = element_text(angle=90, vjust=0.5))
-------------------------------------------------------------------------------------------------------
iris ggplot2 library(ggplot2)

plot_1 = ggplot(iris, aes(x=Petal.Length, colour=Species)) +
         geom_density() +
         labs(title="Density plots")

plot_2 = ggplot(iris, aes(x=Petal.Length, fill=Species)) +
         geom_histogram(colour="grey30", binwidth=0.15) +
         facet_grid(Species ~ .) +
         labs(title="Histograms")

plot_3 = ggplot(iris, aes(y=Petal.Length, x=Species)) +
         geom_point(aes(colour=Species),
                    position=position_jitter(width=0.05, height=0.05)) +
         geom_boxplot(fill=NA, outlier.colour=NA) +
         labs(title="Boxplots")

plot_4 = ggplot(iris, aes(y=Petal.Length, x=Species, fill=Species)) +
         geom_dotplot(binaxis="y", stackdir="center", binwidth=0.15) +
         labs(title="Dot plots")

library(gridExtra)
part_1 = arrangeGrob(plot_1, plot_2, heights=c(0.4, 0.6))
part_2 = arrangeGrob(plot_3, plot_4, nrow=2)
parts_12 = arrangeGrob(part_1, part_2, ncol=2, widths=c(0.6, 0.4))
ggsave(file="plots.png", parts_12, height=6, width=10, units="in")
-------------------------------------------------------------------------------------------------------
dat<-data.frame(ve=rep(c("FF","GG"),times=50),
                metValue=rnorm(100),metric=rep(c("A","B","D","C"),each=25),
                atd=rep(c("HH","GG"),times=50))
dat2<-data.frame(ve=rep(c("FF","GG"),times=50),
                metValue=rnorm(100),metric=rep(c("A","B","D","C"),each=25),
                atd=rep(c("HH","GG"),times=50)) fill= geom_jitter() shape=4 colour= scale_colour_manual() cpallete P <-  ggplot(dat) + 
  geom_boxplot(aes(x=ve, y=metValue, fill=metric), alpha=.35, w=0.6, notch=FALSE, na.rm = TRUE) +  
  geom_hline(yintercept=0, colour="#DD4466", linetype = "longdash") +
  scale_fill_manual(values=c("red","blue","green","yellow"))+
  theme(legend.position="none")

P + geom_jitter(data=dat2, aes(x=ve, y=metValue, colour=atd), 
                size=2, shape=4, alpha = 0.4, 
                position = position_jitter(width = .03, height=0.03), na.rm = TRUE) + 
                scale_colour_manual(values=c("red","blue"))
-------------------------------------------------------------------------------------------------------
x theme() ggplot(mtcars,aes(x=factor(0),mpg))+geom_boxplot()+
   theme(axis.title.x=element_blank(),
    axis.text.x=element_blank(),
    axis.ticks.x=element_blank()) qplot() qplot(factor(0),mpg,data=mtcars,geom='boxplot')
-------------------------------------------------------------------------------------------oxplot(b------------
boxplot > df <- read.table(textConnection('2002    2003    2004    2005    2006    2007    2008    2009    2010    2011
+ 0.8392  0.8337  0.8145  0.8306  0.8545  0.7876  0.8491  0.8568  0.8459  0.8778
+ 0.8251  0.7509  0.7301  0.7829  0.8103  0.7368  0.7122  0.685   0.7623  0.8159
+ 0.8584  0.8217  0.8105  0.8295  0.8382  0.769   0.8265  0.8287  0.8344  0.8204
+ 0.8651  0.8211  0.8346  0.8624  0.8629  0.7926  0.8543  0.8648  0.8456  0.8656
+ 0.7991  0.7653  0.7512  0.8106  0.8354  0.7013  0.752   0.8256  0.8235  0.7579
+ 0.8572  0.8186  0.8009  0.6988  0.719   0.7645  0.8142  0.8164  0.7529  0.7214
+ 0.8483  0.8159  0.833   0.8401  0.8426  0.7777  0.8608  0.8243  0.8426  0.8602'), header=TRUE)
> boxplot(df, names=2002:2011) boxplot >
 boxplot(df, names=2002:2011, boxcol="blue",medcol="red", whiskcol="blue", staplecol="blue",ylim = c(0, 1), lty=1, las=1, ylab = "NDVI", outline = FALSE, boxfill = FALSE)
-------------------------------------------------------------------------------------------------------
ggplot2 x= y= y x melt reshape2 melt require(reshape2)
ggplot(data = melt(dd), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))
-------------------------------------------------------------------------------------------------------
lines par( mar=c(5,4,4,5)+.1 )
boxplot( t( matrix( rnorm( 100 ), nrow=10 )), xlab="Var1", ylab="Var2")
lines( 1:10, runif(10,min=-2, max=3), type='b', col='blue', pch=15 )
axis(4)
mtext("Var3", side=4, line=3 )
-------------------------------------------------------------------------------------------------------
library(plotrix)
library(reshape2)
a <- read.table(textConnection("X1 X2 X3 X4
        1.3 0.5 0.1 1
        NA 0.3 0.4 3
        NA 0.2 0.3 0.3
        NA 0.1 3 0.2
        NA 27 5 56
        NA NA 10 0.01"),sep=" ",header=T)
am <-melt(a) #from reshape2 - allows categorical variables to be in one column
gap.boxplot(am$value ~ am$variable,gap=list(top=c(30,50),bottom=c(10,24)),axis.labels=T) #should label all the Y axis, doesn't seem to work well
-------------------------------------------------------------------------------------------------------
scale_fill_manual p + scale_fill_manual(values=c("#F8766D", "#00BA38")) ggplot_build(p)$data cyl p + scale_fill_brewer(palette="Set1") require(RColorBrewer)
brewer.pal(9, "Set1") ggplotColours <- function(n=6, h=c(0, 360) +15){
  if ((diff(h)%%360) < 1) h[2] <- h[2] - 360/n
    hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)
}

> ggplotColours(2)
# [1] "#F8766D" "#00BFC4"

> ggplotColours(3)
# [1] "#F8766D" "#00BA38" "#619CFF" cyl vs scale_fill_manual p1 <- ggplot(mtcars, aes(factor(cyl), mpg)) + 
           geom_boxplot(aes(fill = factor(cyl)))

p2 <- ggplot(mtcars, aes(factor(cyl), mpg)) + 
           geom_boxplot(aes(fill = factor(vs))) ggplot_build(p1)$data[[1]]$fill
# [1] "#F8766D" "#00BA38" "#619CFF"

ggplot_build(p2)$data[[1]]$fill
# [1] "#F8766D" "#00BFC4" "#F8766D" "#00BFC4" "#F8766D" ggplotColours
-------------------------------------------------------------------------------------------------------
dset1 <- 1:10
dset2 <- 10:20
dset3 <- 20:30 plot=FALSE result1 <- boxplot(dset1,plot=FALSE,names="month1")
result2 <- boxplot(dset2,plot=FALSE,names="month2")
result3 <- boxplot(dset3,plot=FALSE,names="month3") bxp mylist <- list(result1, result2, result3)
groupbxp <- do.call(mapply, c(cbind, mylist))
bxp(groupbxp)
-------------------------------------------------------------------------------------------------------
boxplot plot plot TRUE stats matpoints matplot(..., type = 'p') matpoints(t(boxplot(test, plot = FALSE)$stats), pch = 19, col = 'black')
-------------------------------------------------------------------------------------------------------
bxpdat <- boxplot(vv)
text(bxpdat$group+0.2,                                           # the x locations 
     bxpdat$out,                                                 # the y values
     rownames(vv)[which( vv == bxpdat$out, arr.ind=TRUE)[, 1]])  # the labels boxplot boxplot.stats str(bxpdat)
-------------------------------------------------------------------------------------------------------
#Create data
set.seed(1)
basenums <- c(1,2,3,4,8,15,30)
vv=matrix(c(basenums, sample(basenums), 1-basenums, 
          c(0, 29, 30, 31, 32, 33, 60)),nrow=7,ncol=4,byrow=F)
dimnames(vv)=list(c("one","two","three","four","five","six","seven"), 1:4) #Reshape data
vv_dat <- as.data.frame(vv)
vv_dat$row <- row.names(vv_dat)
library(reshape2)
new_vv <- melt(vv_dat, id.vars="row")

#Get boxplot data
bxpdat <- as.data.frame(boxplot(value~variable, data=new_vv)[c("out", "group")])

#Get matches with boxplot data
text_guide <- do.call(rbind, apply(bxpdat, 1, 
    function(x) new_vv[new_vv$value==x[1]&new_vv$variable==x[2], ]))

#Add labels
with(text_guide, text(x=as.numeric(variable)+0.2, y=value, labels=row))
-------------------------------------------------------------------------------------------------------
ev yield facet_wrap() region variable facet_wrap() ggplot(data = distevyield.f, aes(factor(1), value)) +
  geom_boxplot() +  facet_wrap(region~variable,scales="free",ncol=8)+
  theme(axis.text.x=element_blank(),
        axis.title.x=element_blank(), 
        axis.title.y = element_blank())
-------------------------------------------------------------------------------------------------------
df <- read.table(textConnection('2002    2003    2004    2005    2006    2007    2008    2009    2010    2011
 0.8392  0.8337  0.8145  0.8306  0.8545  0.7876  0.8491  0.8568  0.8459  0.8778
 0.8251  0.7509  0.7301  0.7829  0.8103  0.7368  0.7122  0.685   0.7623  0.8159
 0.8584  0.8217  0.8105  0.8295  0.8382  0.769   0.8265  0.8287  0.8344  0.8204
 0.8651  0.8211  0.8346  0.8624  0.8629  0.7926  0.8543  0.8648  0.8456  0.8656
 0.7991  0.7653  0.7512  0.8106  0.8354  0.7013  0.752   0.8256  0.8235  0.7579
 0.8572  0.8186  0.8009  0.6988  0.719   0.7645  0.8142  0.8164  0.7529  0.7214
 0.8483  0.8159  0.833   0.8401  0.8426  0.7777  0.8608  0.8243  0.8426  0.8602'), header=TRUE)

#New code for coloring
colors = c(rep("red",3),rep("blue",3),rep("green",4))
boxplot(df, names=2002:2011,col=colors)
-------------------------------------------------------------------------------------------------------
box() par(mfrow=c(2,1))
boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
boxplot(count ~ spray, data = InsectSprays,notch = TRUE, add = TRUE, col = "blue")
require(grDevices) # for colours
tN <- table(Ni <- stats::rpois(100, lambda=5))
r <- barplot(tN, col=rainbow(20))
box()
lines(r, tN, type='h', col='red', lwd=2)
-------------------------------------------------------------------------------------------------------
boxplot(data~reorder(labs,data),data=df) 
boxplot(data~reorder(labs,data),data=df, las=2,names=unique( paste(labs,'long')))

text(x=1,y=5,labels='Use srt to rotate text in the 
       plot region\n but las in figure and outer margins,',
      srt=50,cex=1,font=2)
-------------------------------------------------------------------------------------------------------
ggplot2 theme(axis.text.x = element_text(angle= 90) library(ggplot2)

ggplot(df, aes(x=reorder(labs, data), y = data)) + 
  geom_boxplot() + 
  theme(axis.text.x = element_text(angle=90)) + 
  labs(x= 'x') ordered reorder lattice library(lattice)
bwplot(data~reorder(labs,data), df, scales=  list(x= list(rot = 90)))
-------------------------------------------------------------------------------------------------------
plot_Data carb outlier.shape = NA geom_boxplot() geom_point() ggplot() +
  geom_boxplot(data=plot_Data, aes(x=factor(cyl), y=mpg),outlier.shape = NA) + 
  geom_point(data=plot_Data[plot_Data$mpg > plot_Data$upper.limit | 
                              plot_Data$mpg < plot_Data$lower.limit,], 
             aes(x=factor(cyl), y=mpg, color=factor(carb))) ggplot() +
  geom_boxplot(data=plot_Data, aes(x=factor(cyl), y=mpg),outlier.shape = NA) + 
  geom_point(data=plot_Data[plot_Data$mpg > plot_Data$upper.limit | 
                              plot_Data$mpg < plot_Data$lower.limit,], 
             aes(x=factor(cyl), y=mpg, shape=factor(carb)))
-------------------------------------------------------------------------------------------------------
ggplot(mtcars, aes(x=factor(cyl), y=mpg, col=factor(cyl))) +
    geom_boxplot() library(plyr)
plot_Data <- ddply(mtcars, .(cyl), mutate, Q1=quantile(mpg, 1/4), Q3=quantile(mpg, 3/4), IQR=Q3-Q1, upper.limit=Q3+1.5*IQR, lower.limit=Q1-1.5*IQR) .(cyl) ggplot() +
    geom_boxplot(data=plot_Data, aes(x=factor(cyl), y=mpg, col=factor(cyl))) + 
    geom_point(data=plot_Data[plot_Data$mpg > plot_Data$upper.limit | plot_Data$mpg < plot_Data$lower.limit,], aes(x=factor(cyl), y=mpg, col=factor(cyl))) ddply(mtcars, .(cyl), mutate, Q1=quantile(mpg, 1/4), Q3=quantile(mpg, 3/4), IQR=Q3-Q1, upper.limit=Q3+1.5*IQR, lower.limit=Q1-1.5*IQR) ddply( ddply(mtcars, .() ddply(mtcars, .(cyl), ddply(mtcars, .(cyl), mutate, ddply(mtcars, .(cyl), mutate, Q1=quantile(mpg, 1/4), ddply(mtcars, .(cyl), mutate, Q1=quantile(mpg, 1/4), Q3=quantile(mpg, 3/4), ddply(mtcars, .(cyl), mutate, Q1=quantile(mpg, 1/4), Q3=quantile(mpg, 3/4), IQR=Q3-Q1, limits=+/- 1.5 * IQR ddply(mtcars, .(cyl), mutate, Q1=quantile(mpg, 1/4), Q3=quantile(mpg, 3/4), IQR=Q3-Q1, upper.limit=Q3+1.5*IQR, lower.limit=Q1-1.5*IQR) plot_Data[, c(-3:-11)]
#     mpg cyl    Q1    Q3  IQR upper.limit lower.limit
# 1  22.8   4 22.80 30.40 7.60      41.800      11.400
# 2  24.4   4 22.80 30.40 7.60      41.800      11.400
# 3  22.8   4 22.80 30.40 7.60      41.800      11.400
# 4  32.4   4 22.80 30.40 7.60      41.800      11.400
# 5  30.4   4 22.80 30.40 7.60      41.800      11.400
# 6  33.9   4 22.80 30.40 7.60      41.800      11.400
# 7  21.5   4 22.80 30.40 7.60      41.800      11.400
# 8  27.3   4 22.80 30.40 7.60      41.800      11.400
# 9  26.0   4 22.80 30.40 7.60      41.800      11.400
# 10 30.4   4 22.80 30.40 7.60      41.800      11.400
# 11 21.4   4 22.80 30.40 7.60      41.800      11.400
# 12 21.0   6 18.65 21.00 2.35      24.525      15.125
# 13 21.0   6 18.65 21.00 2.35      24.525      15.125
# 14 21.4   6 18.65 21.00 2.35      24.525      15.125
# 15 18.1   6 18.65 21.00 2.35      24.525      15.125
# 16 19.2   6 18.65 21.00 2.35      24.525      15.125
# 17 17.8   6 18.65 21.00 2.35      24.525      15.125
# 18 19.7   6 18.65 21.00 2.35      24.525      15.125
# 19 18.7   8 14.40 16.25 1.85      19.025      11.625
# 20 14.3   8 14.40 16.25 1.85      19.025      11.625
# 21 16.4   8 14.40 16.25 1.85      19.025      11.625
# 22 17.3   8 14.40 16.25 1.85      19.025      11.625
# 23 15.2   8 14.40 16.25 1.85      19.025      11.625
# 24 10.4   8 14.40 16.25 1.85      19.025      11.625
# 25 10.4   8 14.40 16.25 1.85      19.025      11.625
# 26 14.7   8 14.40 16.25 1.85      19.025      11.625
# 27 15.5   8 14.40 16.25 1.85      19.025      11.625
# 28 15.2   8 14.40 16.25 1.85      19.025      11.625
# 29 13.3   8 14.40 16.25 1.85      19.025      11.625
# 30 19.2   8 14.40 16.25 1.85      19.025      11.625
# 31 15.8   8 14.40 16.25 1.85      19.025      11.625
# 32 15.0   8 14.40 16.25 1.85      19.025      11.625 ddply(mtcars, .(cyl), summarize, Q1=quantile(mpg, 1/4), Q3=quantile(mpg, 3/4), IQR=Q3-Q1, upper.limit=Q3+1.5*IQR, lower.limit=Q1-1.5*IQR)
#   cyl    Q1    Q3  IQR upper.limit lower.limit
# 1   4 22.80 30.40 7.60      41.800      11.400
# 2   6 18.65 21.00 2.35      24.525      15.125
# 3   8 14.40 16.25 1.85      19.025      11.625
-------------------------------------------------------------------------------------------------------
datasetcomb<-rbind(dataset1,dataset2) #combine datasets

#V1 is cell, V2 is another variable

boxplot(V1~factor(V2),data=datasetcomb,at=c(1,4,7,2,5),ylab="Cell",xlab="Category/Year",xaxt="n",col=c(3,3,3,2,2))
axis(side=1,at=c(1,4,7,2,5),labels=c(1,2,3,2000,2001))
-------------------------------------------------------------------------------------------------------
data1 <- read.table("data1.txt")
data2 <- read.table("data2.txt")
names(data1) <- c("cell","category")
names(data2) <- c("cell","year")
library(reshape2)
library(ggplot2)
meltdata1 <- melt(data1, id=c("cell"))
head(meltdata1)

meltdata2 <- melt(data2, id=c("cell"))
comb <- rbind(meltdata1,meltdata2)
head(comb)

ggplot(comb, aes(x=factor(value), y=cell))+geom_boxplot()+facet_wrap(~variable, scales="free_x")+xlab(" Category / Year")
-------------------------------------------------------------------------------------------------------
ggplot_build() p<-ggplot(Data, aes(Site, Height,fill=Month)) + geom_boxplot()
dd<-ggplot_build(p) dd$data

[[1]]
     fill      ymin      lower     middle      upper      ymax  outliers notchupper notchlower    x PANEL
1 #F8766D -1.136265 -0.2639268  0.1978071  0.5318349 0.9815675            0.5954014 -0.1997872 0.75     1
2 #00BA38 -1.264659 -0.6113666  0.3190873  0.7915052 1.0778202            1.0200180 -0.3818434 1.00     1
3 #F8766D -1.329028 -0.4334205  0.3047065  1.0743448 1.5257798            1.0580462 -0.4486332 1.75     1
4 #00BA38 -1.137494 -0.7034188 -0.4466927 -0.1989093 0.1859752 -1.759846 -0.1946196 -0.6987658 2.00     1
5 #619CFF -2.344163 -1.2108919 -0.5457815  0.8047203 2.3773189            0.4612987 -1.5528617 2.25     1
  group weight ymin_final ymax_final  xmin  xmax
1     1      1  -1.136265  0.9815675 0.625 0.875
2     2      1  -1.264659  1.0778202 0.875 1.125
3     3      1  -1.329028  1.5257798 1.625 1.875
4     4      1  -1.759846  0.1859752 1.875 2.125
5     5      1  -2.344163  2.3773189 2.125 2.375 x xmax xmin A dd$data[[1]]$x[1:2]<-c(0.75,1)
dd$data[[1]]$xmax[1:2]<-c(0.875,1.125)
dd$data[[1]]$xmin[1:2]<-c(0.625,0.875) ggplot_gtable() grid.draw() library(grid)
grid.draw(ggplot_gtable(dd))
-------------------------------------------------------------------------------------------------------
Mar A Height Height Data2 <- rbind(Data, data.frame(Month = "Mar", Site = "A", Height = 5)) coord_cartesian Height library(ggplot2)
ggplot(Data2, aes(Site, Height)) +
  geom_boxplot(aes(fill = Month)) +
  coord_cartesian(ylim = range(Data$Height) + c(-.25, .25))
-------------------------------------------------------------------------------------------------------
ymin lower middle upper ymax stat = "identity" library(reshape2)
library(plyr)
library(ggplot2)

dataf <- ddply(iris, .(Species), summarize, quantilesy= quantile(Petal.Width, c(0,0.2, 0.5,0.85,1 )))
dataf$Labels <- rep(c("0%", "20%","50%","85%", "100%"),length(unique(dataf$Species)))

dataf2 <- reshape(dataf , idvar = c("Species"),timevar = "Labels", direction = "wide")
datafmeanx <- ddply(iris, .(Species), summarize, meanx= mean(Petal.Length))
dataf3 <- merge(dataf2,datafmeanx)

b <- ggplot(dataf3 , aes(x=meanx,ymin = `quantilesy.0%`, lower = `quantilesy.20%`, middle = `quantilesy.50%`, upper = `quantilesy.85%`, ymax = `quantilesy.100%`))
b + geom_boxplot(stat = "identity")+ facet_grid(Species~.) + xlab("Mean PetalLength") + ylab("PetalWidth") dataf$Labels <- rep(c("0", "20","50","85", "100"),length(unique(dataf$Species)))

dataf2 <- reshape(dataf , idvar = c("Species"),timevar = "Labels", direction = "wide")
datafmeanx <- ddply(iris, .(Species), summarize, meanx= mean(Petal.Length))
dataf3 <- merge(dataf2,datafmeanx)

b <- ggplot(dataf3 , aes(x=meanx ,ymin = quantilesy.0, lower = quantilesy.20, middle = quantilesy.50, upper = quantilesy.85, ymax = quantilesy.100))
b + geom_boxplot(stat = "identity")+ facet_grid(Species~.) + xlab("Mean PetalLength") + ylab("PetalWidth")
-------------------------------------------------------------------------------------------------------
img img <- readPNG(system.file("img", "Zwrch.png", package=package_name)) library(ggplot2)     
library(grid)        ## to create the image grobe
library(png)         ## to read the png
library(gridExtra)   ## to arrange the plots
bp <- ggplot(PlantGrowth, aes(x=group, y=weight)) + geom_boxplot()
img <- readPNG(system.file("img", "Zwrch.png", package=package_name))
legend <- rasterGrob(image=img)
grid.arrange(bp,legend)
-------------------------------------------------------------------------------------------------------
```{r fig.width=7, fig.height=6}
library(grid)
library(ggplot2)
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 2)))
vplayout <- function(x, y)
  viewport(layout.pos.row = x, layout.pos.col = y)
k1 <- ggplot(mtcars, aes(factor(cyl), mpg))  + geom_boxplot()
print(k1, vp = vplayout(1, 1))
print(k1, vp = vplayout(1,2))
```
-------------------------------------------------------------------------------------------------------
grid.rect viewport pushViewport(plotViewport(c(5,5,5,5)))
grid.rect()
grid.rect(width=unit(1, "npc")-unit(0.5,'lines'),
          height=unit(1, "npc")-unit(0.5,'lines'))
pushViewport(plotViewport(c(1,1,1,1),
                      layout = grid.layout(4, 2, 
                                           heights =     unit(c(1,5,5,5), "null")))) 
grid.text("Summer Clear Day- August 2, 2012", 
          vp = viewport(layout.pos.row = 1, layout.pos.col = 1:2))
k1 <- ggplot(mtcars, aes(factor(cyl), mpg))  + geom_boxplot()

print(k1, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(k1, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
print(k1, vp = viewport(layout.pos.row = 3, layout.pos.col = 1))
print(k1, vp = viewport(layout.pos.row = 3, layout.pos.col = 2))
print(k1, vp = viewport(layout.pos.row = 4, layout.pos.col = 1))
print(k1, vp = viewport(layout.pos.row = 4, layout.pos.col = 2))
upViewport(2)
-------------------------------------------------------------------------------------------------------
coord_cartesian() scale_y_continuous() limits=c(-1,1) limits= coord_cartesian() ggplot(data=a, mapping=aes(y=test, x=rep(1,10))) +
      geom_boxplot() +
      coord_cartesian(ylim = c(-1,1))+
      scale_y_continuous(breaks=c(-1,0,1))
-------------------------------------------------------------------------------------------------------
df1 <-structure(list(Y1 = c(905L, 941L, 744L, 590L, 533L, 345L, 202L, 
369L, 200L, 80L, 200L, 80L, 50L, 30L, 60L, 20L, 30L, 30L), Y2 = c(774L, 
823L, 687L, 545L, 423L, 375L, 249L, 134L, 45L, 58L, 160L, 60L, 
20L, 40L, 20L, 26L, 19L, 27L), x = c(10L, 10L, 10L, 20L, 20L, 
20L, 40L, 40L, 40L, 50L, 50L, 50L, 70L, 70L, 70L, 90L, 90L, 90L
)), .Names = c("Y1", "Y2", "x"), row.names = c(NA, -18L), class = "data.frame")

df2 <- structure(list(Y3Line = c(384L, 717L, 914L, 359L, 241L, 265L, 
240L, 174L, 114L, 165L, 184L, 96L, 59L, 60L, 127L, 54L, 31L, 
44L), x = c(36L, 36L, 36L, 56L, 56L, 56L, 65L, 65L, 65L, 75L, 
75L, 75L, 85L, 85L, 85L, 99L, 99L, 99L)), .Names = c("A", 
"x"), row.names = c(NA, -18L), class = "data.frame")

library(ggplot2)
library(reshape2)

df_l <- melt(df1, id.vars = "x")

allLevels <- levels(factor(c(df_l$x,df2$x)))
df_l$x <- factor(df_l$x,levels=(allLevels))
df2$x <- factor(df2$x,levels=(allLevels)) ggplot(data=df_l,aes(x = x, y =value))+geom_line(data=df2,aes(x = factor(x), y =A))  + 
geom_boxplot(aes(fill=variable )) ggplot(data=df2,aes(x = factor(x), y =A)) + 
stat_summary(fun.y=mean, geom="line", aes(group=1))  + 
geom_boxplot(data=df_l,aes(x = x, y =value,fill=variable ))
-------------------------------------------------------------------------------------------------------
mar mar d <- data.frame(a=1:5,b=1:5)
boxplot(d)

# your call was
# par(par()$mar+c(10,0,0,0)) which doesn't specify which 
# par is being set (and returns NULL, (A vague hint that it isn't working properly)
par(mar = par('mar') + c(10,0,0,0))
boxplot(d)
-------------------------------------------------------------------------------------------------------
segments first <- 1:10
second <- 2:11
boxplot(first,second, boxwex=0.3)
points(rep(c(1.2,1.8),each=10),c(first,second),pch=19)
segments(rep(1.2,10),first,rep(1.8,10),second,col="gray")
-------------------------------------------------------------------------------------------------------
R matpoints matlines boxplot dd <- data.frame(x=rnorm(15), y= rnorm(15))

boxplot(dd, boxwex = 0.3)
# note that you need to transpose `dd`
matpoints(y= t(dd), x= c(1.17,1.83),pch=19, col='black')
matlines(y= t(dd), x= c(1.2,1.8), lty=1, col = 'black')
-------------------------------------------------------------------------------------------------------
library(ggplot2)

df <- data.frame(baseline=c(1,1,2,2,3,3,4,5,6,7,8,9,10,11),
                 sixmos  =c(5,6,5,7,8,9,10,12,12,2,1,5,2,3))

data <- data.frame(group = factor(1:nrow(df)), 
                   cat=c(rep('baseline',nrow(df)), 
                   rep('sixmos',nrow(df))), 
                   values=c(df$baseline,df$sixmos))

ggplot(data, aes(x=cat, y=values)) + 
  geom_line(aes(group=group)) + 
  geom_point(aes(group=group)) +
  geom_boxplot(data=df, aes(x='baselin', y=baseline)) + 
  geom_boxplot(data=df, aes(x='sixmos2', y=sixmos))
-------------------------------------------------------------------------------------------------------
import pylab as pl

data = pl.array([[1,2],[2,3],[1,3],[2,1],[5,3],[3,2],[3,2],[1,1]])

first = data[:,0]
second = data[:,1]

xs = []
ys = []

for r in data:
   ys += list(r)
   ys.append(None)
   xs += [1.3,1.7]
   xs.append(None)

pl.plot([1.3]*len(first),first,'o',[1.7]*len(second),second,'o',xs,ys)
pl.boxplot(data)
pl.ylim([min(min(first),min(second))-.5,max(max(first),max(second))+.5])
labels = ("first", "second")
pl.xticks([1,2],labels)

pl.show()
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
x x=1 data(ToothGrowth)
ggplot(ToothGrowth,aes(supp,len))+geom_boxplot()+
   annotate("text",x=1,y=32,label=30)
-------------------------------------------------------------------------------------------------------
myboxplot <- ddply(mtcars,
                    .(cyl),
                    summarise,
                    min = min(mpg),
                    q1 = quantile(mpg,0.25),
                    med = median(mpg),
                    q3 = quantile(mpg,0.75),
                    max= max(mpg),
                    lab = length(cyl))
ggplot(myboxplot, aes(x = factor(cyl))) + 
    geom_boxplot(aes(lower = q1, upper = q3, middle = med, ymin = min, ymax = max), stat = "identity") + 
    geom_text(aes(y = max,label = lab),vjust = 0) middle
-------------------------------------------------------------------------------------------------------
stat_summary # function for number of observations 
give.n <- function(x){
  return(c(y = median(x)*1.05, label = length(x))) 
  # experiment with the multiplier to find the perfect position
}

# function for mean labels
mean.n <- function(x){
  return(c(y = median(x)*0.97, label = round(mean(x),2))) 
  # experiment with the multiplier to find the perfect position
}

# plot
ggplot(mtcars, aes(factor(cyl), mpg, label=rownames(mtcars))) +
  geom_boxplot(fill = "grey80", colour = "#3366FF") +
  stat_summary(fun.data = give.n, geom = "text", fun.y = median) +
  stat_summary(fun.data = mean.n, geom = "text", fun.y = mean, colour = "red")
-------------------------------------------------------------------------------------------------------
position="jitter" ggplot_build() group outliers p <- ggplot(mtcars, aes(factor(cyl), mpg)) + 
                geom_boxplot(outlier.shape=10, outlier.size=8)  +
                geom_point(aes(color=mpg),  position="jitter", size=4)
gg<-ggplot_build(p)
gg$data[[1]]
  ymin lower middle upper ymax         outliers notchupper notchlower x PANEL group weight ymin_final
1 21.4 22.80   26.0 30.40 33.9                    29.62055   22.37945 1     1     1      1       21.4
2 17.8 18.65   19.7 21.00 21.4                    21.10338   18.29662 2     1     2      1       17.8
3 13.3 14.40   15.2 16.25 18.7 10.4, 10.4, 19.2   15.98120   14.41880 3     1     3      1       10.4
  ymax_final  xmin  xmax
1       33.9 0.625 1.375
2       21.4 1.625 2.375
3       19.2 2.625 3.375

xx<-gg$data[[1]][c("group","outliers")]
xx
  group         outliers
1     1                 
2     2                 
3     3 10.4, 10.4, 19.2 group cyl xx$group<-c(4,6,8) mtcars mpg outliers cyl out mtcars.new<-merge(mtcars,xx,by.x="cyl",by.y="group")
mtcars.new$out<-apply(mtcars.new,1,function(x) x$mpg %in% x$outliers) geom_boxplot() out scale_shape_manual() scale_size_manual() ggplot(mtcars.new, aes(factor(cyl), mpg)) + 
          geom_boxplot(outlier.shape = NA)  +
          geom_point(aes(color=mpg,shape=out,size=out),  position="jitter")+
          scale_shape_manual(values=c(16,10),guide="none")+
          scale_size_manual(values=c(4,8),guide="none")
-------------------------------------------------------------------------------------------------------
id_outliers <- function(x){
    q <- quantile(x,c(0.25,0.75))
    iqr <- abs(diff(q))
    ifelse((x < q[1] - 1.5*iqr) | (x > q[2] + 1.5*iqr),'Outlier','NotOutlier')
}

mtcars <- ddply(mtcars,
                .(cyl),
                transform,
                out = id_outliers(mpg))

p <- ggplot(mtcars, aes(factor(cyl), mpg)) + 
  geom_boxplot(outlier.colour = NA)  + 
  geom_point(aes(colour = mpg,shape = out),position = "jitter")
-------------------------------------------------------------------------------------------------------
scale_y_log2 library(scales)
g<-ggplot(tmp, aes(Category, Scores)) + 
    stat_boxplot(geom='errorbar', linetype="dashed")+ 
    geom_boxplot(stat="boxplot", aes(fill=Category)) + 
    geom_vline(linetype="dashed") + 
    scale_y_continuous(trans = log_trans(2)) scale_y_log2
-------------------------------------------------------------------------------------------------------
stat_summary() n_fun median() label= n= data.frame() c() paste0() y c() stat_summary() geom="text" n_fun <- function(x){
  return(data.frame(y = median(x), label = paste0("n = ",length(x))))
}

ggplot(mtcars, aes(factor(cyl), mpg, label=rownames(mtcars))) +
  geom_boxplot(fill = "grey80", colour = "#3366FF") + 
  stat_summary(fun.data = n_fun, geom = "text")
-------------------------------------------------------------------------------------------------------
R nlabels <- table(mtcars$cyl)

#  To create the median labels, you can use by
meds <- c(by(mtcars$mpg, mtcars$cyl, median))

ggplot(mtcars, aes(factor(cyl), mpg, label=rownames(mtcars))) +
   geom_boxplot(fill = "grey80", colour = "#3366FF") + 
   geom_text(data = data.frame(), aes(x = names(meds) , y = meds, 
            label = paste("n =", nlabels))) nlables sapply nlabels <- table(mtcars$cyl) c() nlabels <- c(table(mtcars$cyl))
-------------------------------------------------------------------------------------------------------
> DATA_mean <- data.frame(Group ="A", Measure = DATA) #Make a data.frame first
> attach(DATA_mean)                                   #Attach the data
> boxplot( Measure ~ Group)                           #Draw your boxplot as above
> means <- by(Measure, Group, mean)                   #Calculate mean and assign
> points(1, means, pch = 21, cex =1.5, bg = "blue")   #Label mean on boxplot


#The default center is 1 for the boxplots, if you have more than one, it would be 1:2:3...etc
-------------------------------------------------------------------------------------------------------
Xtab <- data.frame(x)
boxplot(Xtab$Freq ~ Xtab$Var1)
-------------------------------------------------------------------------------------------------------
mai ?par par(mfrow=c(1,3), mai = c(1, 0.1, 0.1, 0.1)) library(ggplot2)
library(reshape)
dm <- melt(d, id.vars = "var8")
dm$var8 <- as.factor(dm$var8)

ggplot(dm, aes(x = var8, y = value, fill = var8)) + 
  theme_bw() +
  scale_fill_manual(values = colors, guide = FALSE) +
  geom_boxplot()+ facet_wrap(~ variable)
-------------------------------------------------------------------------------------------------------
# your data
set.seed(0)
data <- c(rnorm(100,0,1), 10, 11) 

# find & remove outliers
outliers <- boxplot(data)$out
data <- setdiff(data, outliers)

# fitting a Gaussian
mu <- mean(data)
sigma <- sd(data)

# testing the fit, check the p-value
reference.data <- rnorm(length(data), mu, sigma)
ks.test(reference.data, data)
-------------------------------------------------------------------------------------------------------
ggtitle ggtitle for (i in 1:length(names)) {
  df.tax <- subset(df, df[,c(counter)] != 0)
  counter = counter + 1L
  meta <- subset(df.tax, select=c(1:16))
  meltmeta <- melt(meta, id=c("Collector", "Year","Week","Cities","Provinces"))
  ppv <- ggplot(meltmeta, aes(factor(Provinces), value))
  ppv <- ppv + geom_boxplot() 
  ppv <- ppv + geom_boxplot(aes(fill=Collector), alpha=I(0.5)) 
  ppv <- ppv + geom_point(aes(color=Collector), size=1) 
  ppv <- ppv + facet_wrap(~variable, scale="free")
  ppv <- ppv + ggtitle(paste(names[i]))
  ggsave(file = paste(names[i], sep=".","provinces_vs_climate.pdf"), width=16, height=8)
}
-------------------------------------------------------------------------------------------------------
month month.name levels= factor() ggplot() month value df$month<-factor(month.name,levels=month.name)
library(reshape2)
df.long<-melt(df,id.vars="month")
ggplot(df.long,aes(month,value))+geom_boxplot()
-------------------------------------------------------------------------------------------------------
m.ret.tab["month"] <- NA                                        
m.ret.tab$month <- month.abb                                    
require('reshape2')
df.m.ret.tab <- melt(m.ret.tab, id.vars = "month")                                                              
ggplot(data = df.m.ret.tab, aes(x = month, y = value)) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
interaction() fill= Species Experiment interaction() scale_fill_manual() values= Species Autumn Species Spring ggplot(DF, aes(Species, Protein, fill=interaction(Species,Experiment), dodge=Experiment)) +
  stat_boxplot(geom ='errorbar')+
  geom_boxplot()+
  scale_fill_manual(values=c("blue","green","red","cyan",
             + "darkblue","darkgreen","darkred","darkcyan"))
-------------------------------------------------------------------------------------------------------
outlier.colour = NULL m <- ggplot(movies, aes(y = votes, x = factor(round(rating)),
    colour = factor(Animation)))
m + geom_boxplot(outlier.colour = NULL) + scale_y_log10() outlier.colour outlier.colour aes ()
-------------------------------------------------------------------------------------------------------
outlier.colour = NULL p <- ggplot(mtcars, aes(x=factor(cyl), y=mpg, col=factor(cyl)))
p + geom_boxplot(outlier.colour = NULL) outlier.colour outlier.colour aes ()
-------------------------------------------------------------------------------------------------------
# grab the means of each column
diving.means <- colMeans(diving[, -(1:5)])


# plot it
plot(diving.means)

# boxplot
boxplot(diving.means) lowerIntervalBound <- gsub("X", "", names(diving)[-(1:5)])

# you can convert these to numeric and plot against them 
lowInts <- as.numeric(lowerIntervalBound)
plot(x=lowInts, y=diving.means)

# ... or taking log
plot(x=log(lowInts), y=diving.means)

# ... or as factors (similar to basic plot)
plot(x=factor(lowInts), y=diving.means) list vector c data.frame(lowInts, diving.means)

# or adding a row id if needed. 
data.frame(rowid=seq(along=diving.means), lowInts, diving.means)
-------------------------------------------------------------------------------------------------------
ylim= boxplot() xlim= hist() set.seed(123)
data <- rnorm(1000)
nf <- layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,3))
par(mar=c(5.1, 4.1, 1.1, 2.1))
boxplot(data, horizontal=TRUE,  outline=FALSE,ylim=c(-4,4))
hist(data,xlim=c(-4,4))
-------------------------------------------------------------------------------------------------------
ls pattern df.names <- ls(pattern = '^df')
# note 
# ls(pattern ='^df[[:digit:]]{2,}')
# may be safer if there are objects starting with df you don't want

df.list <- mget(df.names)
# note if you are using a version of R prior to R 3.0.0
# you will need `envir = parent.frame()`
# mget(ls(pattern = 'df'), envir = parent.frame()) 

# use `lapply` to extract the relevant columns

df.col1 <- lapply(df.list, '[[', 'col1')

# call boxplot   

boxplot(df.col1)
-------------------------------------------------------------------------------------------------------
ggplot(d) + geom_boxplot(aes(factor(group), x))
-------------------------------------------------------------------------------------------------------
geom_point() inherit.aes=FALSE ggplot() library(Hmisc)
library(plyr)
library(ggplot2)
df.wm<-ddply(df, .(category), summarize, 
             wmean=round(wtd.mean(value, weight, na.rm=TRUE), 2))

ggplot(df, aes(x = category, y = value, weight = weight)) + 
  geom_boxplot(width=0.6,  colour = I("#3366FF")) + 
  geom_point(data=df.wm,aes(x=category,y=wmean),shape = 23, 
             size = 3, fill ="white",inherit.aes=FALSE)
-------------------------------------------------------------------------------------------------------
postscript("asd.ps", horizontal=FALSE)
op <- par(mfrow=c(2,2))
boxplot(cats[,2:3])
plot(Bwt, Hwt)
par(op)
dev.off() ## close the device .ps .ps
-------------------------------------------------------------------------------------------------------
N_reg N_var id.vars dfm <- melt(Final_RMSE_MC, id.vars = c("N_reg","N_var"))

head(dfm)
  N_reg N_var  variable     value
1     6     5 RMSE_MC_1 0.5016800
2    10     5 RMSE_MC_1 0.4928764
3     4     4 RMSE_MC_1 0.4890946
4     5     4 RMSE_MC_1 0.5229090
5     9     4 RMSE_MC_1 0.4138625
6     3     3 RMSE_MC_1 0.5135749

ggplot(dfm, aes(x = variable, y = value)) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
z position="dodge" p <- ggplot(xy, aes(x=factor(Var1), y=y,fill=factor(Var2)))
p + geom_boxplot(position="dodge") + geom_jitter(position=position_jitter(width=.2)) + theme_bw() + xlab("X") + ylab("Y") + scale_fill_discrete(name="Var2",breaks=c(0, 1),labels=c("T", "C"))
-------------------------------------------------------------------------------------------------------
col boxplot boxplot(count~spray, data=InsectSprays, col=c("white", "green", "green", "white", "blue", "yellow"))
-------------------------------------------------------------------------------------------------------
> datablock <- apply(countblock[-1], 2, function(x){rep(countblock$value, x)})
> boxplot(datablock)
-------------------------------------------------------------------------------------------------------
ggplot() + 
geom_boxplot(data=diamonds, aes(x=cut, y=y, fill=cut, group=cut)) +
geom_ribbon(data=mtcarsQ, aes(x=x, ymin=ymin, ymax=ymax), alpha=0.2)+
geom_boxplot(data=diamonds, aes(x=cut, y=y, fill=cut, group=cut)) +
coord_cartesian(ylim=c(0, 12))
-------------------------------------------------------------------------------------------------------
scale_x_continuous() labels= breaks= ggplot() + 
  geom_ribbon(data=mtcarsQ, aes(x=x, ymin=ymin, ymax=ymax), alpha=0.2)+
  geom_boxplot(data=diamonds, aes(x=as.numeric(cut), y=y, fill=cut, group=cut)) +
  scale_x_continuous(breaks=1:5,labels=levels(diamonds$cut)) +
  coord_cartesian(ylim=c(0, 12))
-------------------------------------------------------------------------------------------------------
geom_blank ggplot() + 
  geom_blank(data=diamonds, aes(x=cut, y=y)) +
  geom_ribbon(data=mtcarsQ, aes(x=x, ymin=ymin, ymax=ymax), alpha=0.2)+
  geom_boxplot(data=diamonds, aes(x=cut, y=y, fill=cut, group=cut)) +
  coord_cartesian(ylim=c(0, 12))
-------------------------------------------------------------------------------------------------------
library(ggplot2) #data
    df=data.frame(rna=factor(sample(-3:3,100,replace=T)),er=factor(rbinom(100,1,0.3)),type=factor(sample(1:5,100,replace=T)))
    ggplot(df , aes(x=rna , fill=er)) + geom_bar() + facet_grid(~type) #data
df=data.frame(rna=rnorm(100),er=factor(rbinom(100,1,0.3)),type=factor(sample(1:5,100,replace=T)))
 ggplot(df , aes(y=rna , x=er)) + geom_boxplot() + facet_grid(~type) library(plyr)
# Calculate the mean rna for each level of er and type
out <- ddply(df, c("er","type"), summarise, my.mn = mean(rna))
ggplot(out, aes(x = factor(type), y = my.mn, fill=factor(er))) + geom_bar(stat = "identity",position="dodge")
-------------------------------------------------------------------------------------------------------
library(ggplot2)
library(reshape2)

x <- c(2.852672123,0.076840264,1.009542943,0.430716968,5.4016,0.084281843,
       0.065654548,0.971907344,3.325405405,0.606504718)
y <- c(0.122615039,0.844203734,0.002128992,0.628740077,0.87752229,
       0.888600425,0.728667099,0.000375047,0.911153571,0.553786408);
z <- c(0.766445916,0.726801899,0.389718652,0.978733927,0.405585807,
       0.408554832,0.799010791,0.737676439,0.433279599,0.947906524)
w <- c(0.000124984,1.486637663,0.979713013,0.917105894,0.660855127,
       0.338574774,0.211689885,0.434050179,0.955522972,0.014195184)

dat = data.frame(x, y, z, w)
mdat = melt(dat)

anova_results = aov(value ~ variable, data=mdat)
summary(anova_results)
#             Df Sum Sq Mean Sq F value Pr(>F)
# variable     3   5.83  1.9431   2.134  0.113
# Residuals   36  32.78  0.9105 TukeyHSD(anova_results)
#   Tukey multiple comparisons of means
#     95% family-wise confidence level
# 
# Fit: aov(formula = value ~ variable, data = mdat)
# 
# $variable
#            diff       lwr       upr     p adj
# y-x -0.92673335 -2.076048 0.2225815 0.1506271
# z-x -0.82314118 -1.972456 0.3261737 0.2342515
# w-x -0.88266565 -2.031981 0.2666492 0.1828672
# z-y  0.10359217 -1.045723 1.2529071 0.9948795
# w-y  0.04406770 -1.105247 1.1933826 0.9995981
# w-z -0.05952447 -1.208839 1.0897904 0.9990129

plot_1 = ggplot(mdat, aes(x=variable, y=value, colour=variable)) + 
         geom_boxplot() +
         geom_point(size=5, shape=1)
ggsave("plot_1.png", plot_1, height=3.5, width=7, units="in")
-------------------------------------------------------------------------------------------------------
interaction(Dosis, sex) tapply # use of `with` to save typing Daten$ over and over again
means <- with(Daten, tapply(weight, interaction(Dosis, sex), mean)) boxplot boxplot(weight ~ interaction(Dosis, sex, drop=T), dat=Daten) Daten$
-------------------------------------------------------------------------------------------------------
geom_hline 0.4 ggplot(ExampleData, aes(x = Site,y = Aluminum_Dissolved))+
    stat_boxplot(geom='errorbar', linetype=1)+
    geom_boxplot(fill="pink") +
    geom_hline(yintercept = 0.4) scale_x_discrete library(plyr)
xlabels <- ddply(ExampleData, .(Site), summarize, 
                 xlabels = paste(unique(Site), '\n(n = ', length(Site),')'))

ggplot(ExampleData, aes(x = Site,y = Aluminum_Dissolved))+
     stat_boxplot(geom='errorbar', linetype=1)+
     geom_boxplot(fill="pink") + geom_hline(yintercept = 0.4) + 
      scale_x_discrete(labels = xlabels[['xlabels']])
-------------------------------------------------------------------------------------------------------
split lapply(split(InsectSprays,InsectSprays$spray=="A"),summary)
$`FALSE`
     count       spray 
 Min.   : 0.00   A: 0  
 1st Qu.: 3.00   B:12  
 Median : 5.00   C:12  
 Mean   : 8.50   D:12  
 3rd Qu.:13.25   E:12  
 Max.   :26.00   F:12  

$`TRUE`
     count       spray 
 Min.   : 7.00   A:12  
 1st Qu.:11.50   B: 0  
 Median :14.00   C: 0  
 Mean   :14.50   D: 0  
 3rd Qu.:17.75   E: 0  
 Max.   :23.00   F: 0 boxplot(count~(spray=="A"),InsectSprays)
-------------------------------------------------------------------------------------------------------
boxplot(ExampleData$Aluminum_Dissolved ~ ExampleData$Site, col="purple", par(cex.axis=2, cex.lab=1.8), ylab="Dissolved Aluminum")
-------------------------------------------------------------------------------------------------------
par par(cex.axis=2, las=2,mar=c(7,4,4,2)+0.1)
boxplot(Aluminum_Dissolved ~ Site,data = dat, col="purple",ylab = "Dissolved Aluminum",xlab = "Dissolved Aluminum") par(cex.axis=2, las=2,mar=c(7,4,4,2)+0.1)
boxplot(Aluminum_Dissolved ~ Site,data = dat, col="purple",ylab = "Dissolved Aluminum",xlab = "Dissolved Aluminum",axes = FALSE)
axis(...) points lines par par mar ?par
-------------------------------------------------------------------------------------------------------
bp <- ggplot(data=PlantGrowth, aes(x=group, y=weight, fill=group, color=group)) + geom_boxplot()
bp +scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), 
                      name="Experimental\nCondition",
                      breaks=c("ctrl", "trt1", "trt2"),
                      labels=c("legend 1", "legend 1 ", "legend 1  "))  +
    scale_color_manual(values=c("black", "red", "green"), 
                   name="Experimental\nCondition",
                   breaks=c("ctrl", "trt1", "trt2"),
                   labels=c("legend 1", "legend 1 ", "legend 1  "))
-------------------------------------------------------------------------------------------------------
ggplot(x, aes(reorder(country, wing, median, order=TRUE), wing)) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
M <- as.data.frame(M)
boxplot(M$V2~M$V1)
-------------------------------------------------------------------------------------------------------
ggplot2 library(ggplot2)
df = as.data.frame(M)
ggplot = ggplot(df, aes(as.factor(V1), V2)) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
cyl drv xtabs tab <- xtabs( ~ drv + cyl, mpg)

tab

#    cyl
# drv  4  5  6  8
#   4 23  0 32 48
#   f 58  4 43  1
#   r  0  0  4 21 range(mpg$cty)
# [1]  9 35 mpg tmp <- mpg[c("cyl", "drv", "cty")] idx <- which(tab == 0, arr.ind = TRUE)

idx

#   row col
# r   3   1
# 4   1   2
# r   3   2 cty fakeLines <- apply(idx, 1,
                   function(x) 
                     setNames(data.frame(as.integer(dimnames(tab)[[2]][x[2]]), 
                                         dimnames(tab)[[1]][x[1]], 
                                         -1), 
                              names(tmp)))

fakeLines

# $r
#   cyl drv cty
# 1   4   r  -1
# 
# $`4`
#   cyl drv cty
# 1   5   4  -1
# 
# $r
#   cyl drv cty
# 1   5   r  -1 tmp2 <- rbind(tmp, do.call(rbind, fakeLines)) library(ggplot2)
ggplot(tmp2, aes(x = as.factor(cyl), y = cty, fill = as.factor(drv))) + 
  geom_boxplot() +
  coord_cartesian(ylim = c(min(tmp$cty - 3), max(tmp$cty) + 3))
  # The axis limits have to be changed to suppress displaying the fake data.
-------------------------------------------------------------------------------------------------------
lapply for all.box=function(x) {
  res <- lapply(seq_along(x),function(i){
     boxplot(x[,i], main = names(x)[i])
  })
  res
} for xxapply
-------------------------------------------------------------------------------------------------------
for for all.box=function(x) {
  result <- list()
  for (i in seq_along(x)) {
    result[[i]] <- boxplot(x[,i], main = names(x)[i])
  }
  result
}
-------------------------------------------------------------------------------------------------------
xVariables<-names(data[,1:3])
yVariables<-names(data[,4:6]) expand.grid() gg<-expand.grid(xVariables,yVariables)
gg<-data.frame(lapply(gg, as.character), stringsAsFactors=FALSE) apply() aes_string() apply(gg,1,function(x) ggplot(data,aes_string(x=x[1],y=x[2]))+geom_boxplot())
-------------------------------------------------------------------------------------------------------
library(plyr)
library(ggplot2)
summary(dfx) # for example, each variable
dfx$interaction <- interaction(dfx$group, dfx$sex)
ddply(dfx, .(interaction), summary) #group by interaction, summary on dfx
ggplot(dfx, aes(x = sex, y = age, fill = group)) + geom_boxplot() dfx$interaction <- interaction(dfx$group, dfx$sex)
dfx.summary <- ddply(dfx, .(group, sex), summarise, total = length(group)) 
dfx.summary$prop <- with(dfx.summary, total/sum(total))
dfx.summary
# group sex      prop
# 1     A   F 0.06382979
# 2     A   M 0.12158055
# 3     A   U 0.14285714
# 4     B   F 0.12462006
# 5     B   M 0.11854103
# 6     B   U 0.10638298
# 7     C   F 0.10334347
# 8     C   M 0.12158055
# 9     C   U 0.09726444
ggplot(dfx.summary, aes(sex, total, color = group)) + geom_point(size = 5)
-------------------------------------------------------------------------------------------------------
geom_area aes m <- median(esoph$ncases)
Q1 <- quantile(as.numeric(esoph$ncases), c(0.25))
Q3 <- quantile(as.numeric(esoph$ncases), c(0.75))

ggplot(esoph, aes(x=agegp, y=ncases))+
geom_rect(xmin = -Inf , xmax = Inf , ymin = Q1 , ymax = Q3  ,fill = "blue", alpha = .002)+
geom_hline(yintercept= m,colour = "white", size=1)  + geom_boxplot(aes(group=agegp))+ coord_flip() + geom_point() + 
theme_classic()
-------------------------------------------------------------------------------------------------------
par(mar=c(14, 3, 1, 1))
boxplot(values ~ group, data=dat, las=3)
-------------------------------------------------------------------------------------------------------
dat <- data.frame(values = rnorm(100), group = gl(2, 50))
levels(dat$group) <- c("reallyreallylonglabel", 
                       "anevenlooooooooooooongerlabel")


ggplot(dat, aes(factor(group),values)) + stat_boxplot()
-------------------------------------------------------------------------------------------------------
ggplot(df) + geom_boxplot(aes(x=tc, y=td))
-------------------------------------------------------------------------------------------------------
scale_fill_discrete scales::hue_pal library(ggplot2)
library(reshape2)
df = matrix(rnorm(60),6,10)
rownames(df) = paste0(rep(c("A","B","C"),2),1:2)
df=melt(df)
df = cbind(df,grp=substr(df$Var1,1,1))
myplot <- ggplot(df) + geom_boxplot(aes(x=Var1, y=value, fill=grp))

library(scales)
x_cols <- rep(hue_pal()(length(unique(df$grp))), each=2)
myplot <- myplot + theme(axis.text.x = element_text(colour=x_cols) x_cols hue_pal rep
-------------------------------------------------------------------------------------------------------
library(grid)
  axis.ticks.margin=unit(c(4,-4),'cm')) ggplot2 ggplot(df,aes(x=Y,y=X))+
  geom_boxplot()+
  theme(axis.text=element_text(size=20),
        axis.text.x=element_text(angle=45),
        axis.ticks.margin=unit(c(4,-4),'cm'))
-------------------------------------------------------------------------------------------------------
ggplot(RQA, aes(x = Type, y = engagementPercent)) + 
geom_boxplot(aes(fill = Type),alpha = .6,size = 1) + 
scale_fill_brewer(palette = "Set2") + 
stat_summary(fun.y = "mean", geom = "text", label="----", size= 10, color= "white") +
ggtitle("Participation distribution by type") + 
theme(axis.title.y=element_blank()) + theme(axis.title.x=element_blank())
-------------------------------------------------------------------------------------------------------
plyr library(plyr)
library(reshape2)
library(ggplot2)
Hs <- read.table(
  header=TRUE, text='
dates times     gaps
1  2013-06-10 15:40:02.654168 1.426180
2  2013-06-10 15:40:18.936882 2.246462
3  2013-06-10 15:40:35.215668 3.227132
4  2013-06-10 15:40:48.328785 1.331284
5  2013-06-10 15:40:53.809485 1.294128
6  2013-06-10 15:41:04.027745 2.292671
7  2013-06-10 16:41:25.876519 1.293501
8  2013-06-10 16:41:42.929280 1.342166
9  2013-06-10 16:42:11.700626 3.203901
10 2013-06-10 16:42:23.059550 1.304467')
Hs$dates <- paste(Hs$date, Hs$times, sep = " ")
Hs$dates <- strptime(Hs$date, "%Y-%m-%d %H:%M:%S")
class(Hs$dates) # "POSIXlt" "POSIXt" 
Hs$h1 <- Hs$dates$hour
Hs$dates <- as.POSIXct(strptime(Hs$date, "%Y-%m-%d %H:%M:%S"))
class(Hs$dates) # "POSIXct" "POSIXt" 
library(ggplot2)
ggplot(Hs, aes(factor(h1), gaps)) + 
  geom_boxplot(fill="white", colour="darkgreen") # easy way!  Traditional boxplot.
ggplot(Hs, aes(factor(h1), gaps)) + geom_boxplot() +
      stat_boxplot(coef = 1.7, fill="white", colour="darkgreen") cuts <- c(.03, .5, .97, 1)
x <- ddply(Hs, .(h1), function (x)
{summarise(x, y = quantile(x$gaps, cuts))})
x$cuts <- cuts
x <- dcast(x, h1 ~ cuts, value.var = "y")
x.melt <- melt(x, id.vars = "h1") ggplot(x.melt, aes(x = h1, y = value, color = variable)) + geom_point(size = 5) + 
  geom_line() + scale_colour_brewer(palette="RdYlBu") + xlab("hours")
ggplot(x, aes(factor(h1),  ymin = 0, lower = `0.03`, middle = `0.5`,
                     upper = `0.97`, ymax = `1`)) + 
         geom_boxplot(stat = "identity", fill="white", colour="darkgreen")
-------------------------------------------------------------------------------------------------------
ggplot2 library(ggplot2)
ggplot(data = C, aes(x = Site, y = TN.TP, colour = Land.Use)) +
  facet_wrap( ~ Seasonal.Flow, ncol = 1) +
  geom_boxplot() +
  scale_colour_hue("Land use") +
  ggtitle("Collie River TN:TP") +
  ylab("ratio") +
  xlab("Site + Flow regime")
-------------------------------------------------------------------------------------------------------
library(Hmisc)

DF <- data.frame(x=factor(rep(1:2,5)),y=1:10)

label(DF$x)="xLab"
label(DF$y)="yLab"

library(ggplot2)

ggplot(DF,aes(x=x,y=y)) + geom_boxplot()
#Don't know how to automatically pick scale for object of type labelled. Defaulting to continuous

ggplot(DF,aes(x=factor(unclass(x)),y=unclass(y))) + geom_boxplot()
#no warning
-------------------------------------------------------------------------------------------------------
xts boxplot() str(xx) # An ‘xts’ object from 2013-06-07 to 2013-06-16 containing:
#   Data: num [1:10, 1:3] 0.321 -0.462 1.715 0.575 0.83 ...
# - attr(*, "dimnames")=List of 2
# ..$ : NULL
# ..$ : chr [1:3] "a" "b" "c"
# Indexed by objects of class: [Date] TZ: 
#   xts Attributes:  
#   NULL coredata() coredata(xx)
#                a           b            c
# [1,]  0.32120813 -0.07370657 -0.601288169
# [2,] -0.46154742 -1.09475940  3.028664653
# [3,]  1.71515544 -0.31000454 -0.009281175
# [4,]  0.57482616 -0.06260991  1.198034802
# [5,]  0.83015688 -2.49614565 -1.689812377
# [6,]  0.01748081 -0.55332675  2.391426111
# [7,]  0.69852800 -0.10337251 -0.267939285
# [8,]  0.75139113 -0.17427970 -0.561434122
# [9,] -0.68942598  0.18685817 -1.508917140
# [10,] -0.76381007 -2.44387628  0.290524821 boxplot(coredata(xx)) xts index() index(xx)
# [1] "2013-06-07" "2013-06-08" "2013-06-09" "2013-06-10" "2013-06-11" "2013-06-12" "2013-06-13" "2013-06-14" "2013-06-15"
# [10] "2013-06-16"
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
PerformanceAnalytics library(PerformanceAnalytics)
chart.Boxplot(xx) xts data.frame boxplot library(PerformanceAnalytics)
R <- checkData(xx, method = "data.frame")
boxplot(R)
-------------------------------------------------------------------------------------------------------
notch=TRUE boxplot()
-------------------------------------------------------------------------------------------------------
rep data.frame with(data.frame(v1=rep(data$v1,data$count),v2=(data$v2,data$count)),
    boxplot(v1 ~ v2)
) 
-------------------------------------------------------------------------------------------------------
boxplot names set.seed(1)
temp <- as.data.frame(matrix(rnorm(100), ncol = 5))
boxplot(temp) boxplot(temp, names = c("A", "B", "C", "D", "E"))
-------------------------------------------------------------------------------------------------------
> boxplot(decrease ~ treatment, data = OrchardSprays,log = "y", col = "bisque")
-------------------------------------------------------------------------------------------------------
boxplot(m1, m2, names=z)
-------------------------------------------------------------------------------------------------------
code.addRCode("boxplot((1:10),main=\"1-10\")"); code.addRCode("boxplot(c(1:10),main='1-10')"); caller.runAndReturnResultOnline("plot.ts(x)"); caller.runAndReturnResultOnline("boxplot(x)");
-------------------------------------------------------------------------------------------------------
+ - ggplot(combined.data, aes(x = region, y = expression, fill = species)) +
    geom_boxplot() +
    scale_fill_manual(values = c("yellow", "orange")) + 
    ggtitle("Expression comparisons for ACTB") + 
    theme(axis.text.x = element_text(angle=90, face="bold", colour="black")) +
-------------------------------------------------------------------------------------------------------
library(plyr)
library(reshape2)
dd = data.frame(group=c("A","B","C", "D"),
              x1=runif(40),x2=runif(40),x3=runif(40),x4=runif(40)) dd_m = melt(dd, "group")
meds = ddply(dd_m, c("variable", "group"), summarise, m = median(value)) sorted_meds = meds[with(meds, order(variable, -m)), ] for(var in unique(sorted_meds$variable)){
  grp_order = sorted_meds[sorted_meds$variable==var, ]$group
  dd_tmp = dd_m[dd_m$variable==var,]  
  dd_tmp$group = factor(dd_tmp$group, levels = grp_order)
  boxplot(dd_tmp$value ~ dd_tmp$group)
}
-------------------------------------------------------------------------------------------------------
lapply lapply(bpdf[,-1],function(x){
     ## decreasing better than rev here
     y <- sort(tapply(x,bpdf$group,median),decreasing=TRUE)
     boxplot(x~factor(bpdf$group,levels=names(y)))
}) main bpdf lapply(colnames(bpdf[,-1]),function(i){
     ## decreasing better than rev here
     x <- bpdf[,i]
     title <- paste0('title',i) ## you can change it here
     y <- sort(tapply(x,bpdf$group,median),decreasing=TRUE)
     boxplot(x~factor(bpdf$group,levels=names(y)),main=title)
})
-------------------------------------------------------------------------------------------------------
devnull <- lapply(bpdf[-1], print)
# [1] 1 1 2 2 3 3 3 4 4
# [1] 7 5 2 9 7 6 3 1 2
# [1] 4 5 2 9 8 9 7 6 7 par(mfrow = c(1, ncol(bpdf) - 1)

lapply(names(bpdf)[-1], function(var){
  x <- bpdf[[var]]
  y <- sort(tapply(x, bpdf$group, median), decreasing = TRUE)
  boxplot(x ~ factor(bpdf$group,levels=names(y)), main = var)
})
-------------------------------------------------------------------------------------------------------
require(ggplot2)
ggplot(iris,aes(Species,Sepal.Length))+geom_violin()+geom_boxplot(width=.1)
-------------------------------------------------------------------------------------------------------
ggplot2 boxplot bxp xypolygon my.bxp <- function (all.bxp.argument,angle,density, ...) {
    .....#### bxp code
    xypolygon(xx, yy, lty = boxlty[i], lwd = boxlwd[i], 
    border = boxcol[i],angle[i],density[i])  
    .......## bxp code after
    xypolygon(xx, yy, lty = "blank", col = boxfill[i],angle[i],density[i])      
    ......

} require(stats)
set.seed(753)
(bx.p <- boxplot(split(rt(100, 4), gl(5, 20))))
layout(matrix(c(1,2),nrow=1),
       width=c(4,1)) 
angles=c(60,30,40,50,60)
densities=c(50,30,40,50,30)
par(mar=c(5,4,4,0)) #Get rid of the margin on the right side
my.bxp(bx.p,angle=angles,density=densities)
par(mar=c(5,0,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", paste("region", 1:5),
       angle=angles,density=densities)
-------------------------------------------------------------------------------------------------------
ggplot(data = df, aes(x = measurement_option, y = measurement)) + 
geom_boxplot()
-------------------------------------------------------------------------------------------------------
reshape2 library(ggplot2)
library(reshape2)
dt <- read.table(text='
M1 N2 O1 P2 Q1 R2     
A  10 11 12 13 14 15
B  15 14 13 12 11 10 
C  20 21 22 23 24 25
D  25 24 23 22 21 20',header=TRUE)
dt.m <- melt(t(dt))
dt.m$Var1 <- gsub('[A-Z]','',dt.m$Var1) library(ggplot2)
library(gridExtra)
p1 <- ggplot(dt.m) +
   geom_boxplot(aes(x=Var2,y=value,fill=Var1))

p2 <- ggplot(dt.m) +
  geom_boxplot(aes(x=Var2,y=value,fill=Var2))+
  facet_grid(~Var1)

grid.arrange(p1,p2)
-------------------------------------------------------------------------------------------------------
data.frame boxplot(measurement ~ measurement_option, mydf) aggregate data.frame as.vector > aggregate(measurement ~ measurement_option, mydf, as.vector)
  measurement_option     measurement
1            option1      11.3, 12.7
2            option2 19.3, 9.7, 12.1 list
-------------------------------------------------------------------------------------------------------
ggplot(mtcars, aes(cyl, mpg)) + 
   geom_boxplot(aes(fill=as.factor(cyl)), outlier.size = 0) ?geom_boxplot ggplot(mtcars, aes(cyl, mpg)) + 
   geom_boxplot(aes(fill=as.factor(cyl)), outlier.size = 0) +
   geom_jitter(color=factor(cyl))
-------------------------------------------------------------------------------------------------------
position = "identity" ggplot(plot_data,aes(x=loc,y=value,group=class)) +
       geom_boxplot(fill=c("red","green","blue"),position = "identity") geom_boxplot position = "dodge"
-------------------------------------------------------------------------------------------------------
stat_boxplot ggplot2 library(plyr)
DF <- ddply(mtcars, .(cyl), transform, myalpha = length(cyl))

library(ggplot2)
ggplot(DF, aes(factor(cyl), mpg)) + 
  geom_boxplot(aes(alpha = myalpha), fill = "blue")
-------------------------------------------------------------------------------------------------------
plotfun2 <- function(number) {
localenv <- environment()
  ggplot(data = testdata, aes(x = factor(group, levels = c(0:number)), y = value), environment = localenv ) + 
    geom_boxplot(color = 'red') 
}

plotfun2(4)
-------------------------------------------------------------------------------------------------------
## dummy version of your data
mat <- matrix(c(1:17, rep(0, 3)), ncol = 2)

## create object suitable for plotting with boxplot
## I.e. convert to melted or long format
df <- data.frame(values = mat[1:17],
                 vars = rep(c("Col1","Col2"), times = c(10,7)))

## draw the boxplot
boxplot(values ~ var, data = df) df <- data.frame(values = c(mat[,1], mat[1:7, 2]),
                 vars = rep(c("Col1","Col2"), times = c(10,7)))
-------------------------------------------------------------------------------------------------------
plot.spei plot.spei <- 
function (x, ...) 
{
    ## label <- ifelse(as.character(x$call)[1] == "spei", "SPEI", 
    ##     "SPI")

    ser <- ts(as.matrix(x$fitted[-c(1:x$scale), ]), end = end(x$fitted), 
        frequency = frequency(x$fitted))
    ser[is.nan(ser - ser)] <- 0
    se <- ifelse(ser == 0, ser, NA)
    tit <- dimnames(x$coefficients)[2][[1]]
    if (start(ser)[2] == 1) {
        ns <- c(start(ser)[1] - 1, 12)
    }
    else {
        ns <- c(start(ser)[1], start(ser)[2] - 1)
    }
    if (end(ser)[2] == 12) {
        ne <- c(end(ser)[1] + 1, 1)
    }
    else {
        ne <- c(end(ser)[1], end(ser)[2] + 1)
    }
    n <- ncol(ser)
    if (is.null(n)) 
        n <- 1
    par(mar = c(4, 4, 2, 1) + 0.1)
    if (n > 1 & n < 5) 
        par(mfrow = c(n, 1))
    if (n > 1 & n >= 5) 
        par(mfrow = c({
            n + 1
        }%/%2, 2))
    for (i in 1:n) {
        datt <- ts(c(0, ser[, i], 0), frequency = frequency(ser), 
            start = ns, end = ne)
        datt.pos <- ifelse(datt > 0, datt, 0)
        datt.neg <- ifelse(datt <= 0, datt, 0)
        plot(datt, type = "n", xlab = "", main = tit[i], ...)
        if (!is.null(x$ref.period)) {
            k <- ts(5, start = x$ref.period[1, ], end = x$ref.period[2, 
                ], frequency = 12)
            k[1] <- k[length(k)] <- -5
            polygon(k, col = "light grey", border = NA, density = 20)
            abline(v = x$ref.period[1, 1] + (x$ref.period[1, 
                2] - 1)/12, col = "grey")
            abline(v = x$ref.period[2, 1] + (x$ref.period[2, 
                2] - 1)/12, col = "grey")
        }
        grid(col = "black")
        polygon(datt.pos, col = "blue", border = NA)
        polygon(datt.neg, col = "red", border = NA)
        lines(datt, col = "dark grey")
        abline(h = 0)
        points(se, pch = 21, col = "white", bg = "black")
    }
} ylab plot(spi1, ylab = "SPI") ts par(mfrow = c(3, 4))
listofmonths <- split(fitted(spi1), cycle(fitted(spi1)))
names(listofmonths) <- month.abb

require(plyr)
l_ply(seq_along(listofmonths), function(x) {
       plot(x = seq_along(listofmonths[[x]]), y = listofmonths[[x]],
            type = "l", xlab = "", ylab = "SPI")
       title(names(listofmonths)[x])
   }) monthplot(fitted(spi1), labels = month.abb, cex.axis = 0.8)
boxplot(fitted(spi1) ~ cycle(fitted(spi1)), names = month.abb, cex.axis = 0.8)
-------------------------------------------------------------------------------------------------------
boxplot(R, horizontal = TRUE,..)
 boxploR[, column.order], horizontal = horizontal,...
-------------------------------------------------------------------------------------------------------
xlim boxplot B C set.seed(1)
a <- rnorm(100)
b <- rnorm(100)

boxplot(a, at=1, xlim=c(0, 3))
boxplot(b, at=2, add=TRUE)
-------------------------------------------------------------------------------------------------------
boxplot A <- rnorm(21)
B <- rnorm(9)
C <- rnorm(12)
mydf <- data.frame(y=c(A,B,C),x=c(rep(1,length(A)),rep(2,length(B)),rep(3,length(C))))
with(mydf, boxplot(y~x))
-------------------------------------------------------------------------------------------------------
set.seed(90)

t0 <- rnorm(9)
t1 <- rnorm(9)
t2 <- rnorm(9)

times1 <- matrix(c(t0,t1,t2), ncol=6)
> times1
           [,1]       [,2]        [,3]        [,4]       [,5]       [,6]
[1,]  0.0771813  0.4425903 -0.80517064 -0.05976005 -0.5882710  0.1291539
[2,] -0.1510609  1.0055101 -0.08230689 -0.34302853 -0.1315423 -0.3980679
[3,] -0.8840764  0.9144189  0.86718542  0.87410829  1.3159242  0.0771813
[4,] -0.7205931 -0.5663887  1.65919765  0.97977040 -1.2910153 -0.1510609
[5,]  0.7407430  2.3930961 -0.24084853 -0.76047498 -0.3720799 -0.8840764


t0 <- read.table("t0.txt",header=FALSE, sep="\n")
t1 <- read.table("t1.txt",header=FALSE, sep="\n")
t2 <- read.table("t2.txt",header=FALSE, sep="\n")

times2 <- matrix(c(t0,t1,t2), ncol=3)
> times2
     [,1]      [,2]      [,3]     
[1,] Integer,9 Integer,9 Integer,9 times3 <- data.frame(t0,t1,t2)
windows()
  boxplot(times3)
-------------------------------------------------------------------------------------------------------
aes xlab ylab geoms scales x y # given a base plot
baseplot <- ggplot(seednumber, aes(x = Study.Site, y = Seed.Number, colour = Country)) +
            geom_boxplot() labs xlab ylab baseplot + labs(x = "Study Site", y = "Number of seeds in a podr")
# or
baseplot + xlab("Study Site") + ylab("Number of seeds in a podr") labs aes scales scale_..._... baseplot + scale_x_discrete(name = "Study Site") + 
  scale_y_continuous(name = 'Number of seeds in a podr')
-------------------------------------------------------------------------------------------------------
d <- rnorm(1:100, 100, 10)
 boxplot(d, whisklty = 0, staplelty = 0) whisklty staplelty
-------------------------------------------------------------------------------------------------------
plot.title title text p <- ggplot(mtcars, aes(factor(cyl), mpg))

p + 
  geom_boxplot() + 
  ggtitle("Boxplot") p + 
  geom_boxplot() + 
  ggtitle("Boxplot") +
  theme_grey(base_size = 20) #default is 12
-------------------------------------------------------------------------------------------------------
rbind cbind # sample data
A1 <- rnorm(100,1)
B1 <- rnorm(100,2)
C1 <- rnorm(100,3)
D1 <- rnorm(100,4)
E1 <- rnorm(100,5)
A2 <- rnorm(100,3)
B2 <- rnorm(100,4)
C2 <- rnorm(100,5)
D2 <- rnorm(100,6)
E2 <- rnorm(100,7)

dflist <- list(A1=A1,B1=B1,C1=C1,D1=D1,E1=E1,A2=A2,B2=B2,C2=C2,D2=D2,E2=E2)
out <- data.frame(test=do.call(c,dflist))
out$group1 <- rep(1:10,times=sapply(dflist,function(x) length(x)))

# plot
boxplot(test~group1, data=out, at = c(seq(1,13,by=3),seq(2,14,by=3)),
    names=NA, col=rep(c("red","blue"),each=5))
axis(1,at=seq(1.5,13.5,by=3),labels=LETTERS[1:5])
legend(x=1, y=9, legend=c("Type 1","Type 2"), fill=c("red","blue"))
-------------------------------------------------------------------------------------------------------
boxplot b <- boxplot(a,ylim=c(-5,15))
abline(h=b$stats[1,],col="red")
abline(h=b$stats[5,],col="red")
-------------------------------------------------------------------------------------------------------
textOutput() mainPanel NULL library(shiny)
    shinyUI(pageWithSidebar(

headerPanel("Shiny Example"),

    sidebarPanel(


        wellPanel(

        selectInput(    inputId = "variable1",label = "Select First Variable:", 
                choices = c("Binary Variable 1" = "binary1",
                "Binary Variable 2" = "binary2", 
                "Continuous Variable 1" = "cont1",
                "Continuous Variable 2" = "cont2"),
                selected = "Binary Variable 1"
        )
        ),


        wellPanel(

            checkboxInput("bivariate", "Proceed to Bivariate Analysis", FALSE),
        conditionalPanel(
        condition="input.bivariate==true",
        selectInput(inputId = "variable2", 
        label = "Select Second Variable:",
        choices = c("Binary Variable 1" = "binary1",
        "Binary Variable 2" = "binary2", 
        "Continuous Variable 1" = "cont1",
        "Continuous Variable 2" = "cont2"),
        selected = "Binary Variable 2"
    )
    )
    )
    ),
    mainPanel(

    h5("Item Response Rate"),
    verbatimTextOutput("nitem"),

    h5(textOutput("caption2")),
    verbatimTextOutput("out2"),

    h5(textOutput("caption3")),
    verbatimTextOutput("out3"),

    h5(textOutput("caption4")),
    verbatimTextOutput("out4"),

    h5(textOutput("caption5")),
    plotOutput("out5")
    )
    )) binary1 <- rbinom(100,1,0.5)
    binary2 <- rbinom(100,1,0.5)
    cont1   <- rnorm(100)
    cont2   <- rnorm(100)

    dat <- as.data.frame(cbind(binary1, binary2, cont1, cont2))

    dat$binary1 <- as.factor(dat$binary1)
    dat$binary2 <- as.factor(dat$binary2)
    dat$cont1 <- as.numeric(dat$cont1)
    dat$cont2 <- as.numeric(dat$cont2)

    library(shiny)

    shinyServer(function(input, output) {

    inputVar1 <- reactive({
    parse(text=sub(" ","",paste("dat$", input$variable1)))
    })

    inputVar2 <- reactive({
    parse(text=sub(" ","",paste("dat$", input$variable2)))
    })

    output$nitem <- renderPrint({


    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    n <- sum(table(eval(inputVar1())))
    p <- n/100
    out <- cat(paste(n,gsub(" ","",paste("(",round(as.numeric(p)*100,2),"%",")"))),"\n")
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    n <- sum(table(eval(inputVar1())))
    p <- n/100
    out <- cat(paste(n,gsub(" ","",paste("(",round(as.numeric(p)*100,2),"%",")"))),"\n")
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    n <- sum(table(eval(inputVar1()),eval(inputVar2())))
    p <- n/100
    out <- cat(paste(n,gsub(" ","",paste("(",round(as.numeric(p)*100,2),"%",")"))),"\n")
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    n <- sum(table(eval(inputVar1()),eval(inputVar2())))
    p <- n/100
    out <- cat(paste(n,gsub(" ","",paste("(",round(as.numeric(p)*100,2),"%",")"))),"\n")
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    n <- sum(table(eval(inputVar1()),eval(inputVar2())))
    p <- n/100
    out <- cat(paste(n,gsub(" ","",paste("(",round(as.numeric(p)*100,2),"%",")"))),"\n")
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    n <- sum(table(eval(inputVar1()),eval(inputVar2())))
    p <- n/100
    out <- cat(paste(n,gsub(" ","",paste("(",round(as.numeric(p)*100,2),"%",")"))),"\n")
    }
    }
    }
    }
    }
    }

    })

    output$caption2 <- renderText({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    caption2 <- "Univariate Table"
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    caption2 <- "Univariate Summary"
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    captions2 <- "Bivariate Table"
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption2 <- "Numeric Summary First Variable"
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption2 <- "Numeric Summary By Factor"
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    caption2 <- "Numeric Summary By Factor"
    }
    }
    }
    }
    }
    }

    })

    output$out2 <- renderPrint({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    table(eval(inputVar1()))
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    summary(eval(inputVar1()))
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    table(eval(inputVar1()), eval(inputVar2()))
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    summary(eval(inputVar1()))
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    by(eval(inputVar2()), eval(inputVar1()), summary)
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    by(eval(inputVar1()), eval(inputVar2()), summary)
    }
    }
    }
    }
    }
    }

    })

    output$caption3 <- renderText({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    caption3 <- "Univariate Table of Proportions"
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    caption3 <- ""
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    captions3 <- "Bivariate Table of Row Proportions"
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption3 <- "Numeric Summary Second Variable"
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption3 <- "Kruskal Wallis Test"
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    caption3 <- "Kruskal Wallis Test"
    }
    }
    }
    }
    }
    }

    })


    output$out3 <- renderPrint({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    prop.table(table(eval(inputVar1())))
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    NULL
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    prop.table(table(eval(inputVar1()), eval(inputVar2())), margin=1)
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    summary(eval(inputVar2()))
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    kruskal.test(eval(inputVar2()) ~ eval(inputVar1()))
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    kruskal.test(eval(inputVar1()) ~ eval(inputVar2()))
    }
    }
    }
    }
    }
    }

    })

    output$caption4 <- renderText({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    caption4 <- ""
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    caption4 <- ""
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    captions4 <- "Pearsons Chi-Squared Test"
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption4 <- "Spearmans Correlation Coefficient"
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption4 <- ""
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    caption4 <- ""
    }
    }
    }
    }
    }
    }

    })

    output$out4 <- renderPrint({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    NULL
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    NULL
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    chisq.test(table(eval(inputVar1()), eval(inputVar2())))
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    cor(eval(inputVar1()), eval(inputVar2()), method="spearman", use="pairwise.complete.obs")
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    NULL
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    NULL
    }
    }
    }
    }
    }
    }

    })

    output$caption5 <- renderText({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    caption5 <- "Univariate Barplot"
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    caption5 <- "Univariate Histogram"
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    captions5 <- "Bivariate Barplot"
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption5 <- "Bivariate Scatter Graph"
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption5 <- "Bivariate Boxplot"
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    caption5 <- "Bivariate Boxplot"
    }
    }
    }
    }
    }
    }

    })

    output$out5 <- renderPlot({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    barplot(table(eval(inputVar1())))
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    hist(eval(inputVar1()),main="")
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    barplot(table(eval(inputVar1()), eval(inputVar2())), beside=TRUE)
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    plot(eval(inputVar1()), eval(inputVar2()), main="")
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    boxplot(eval(inputVar2()) ~ eval(inputVar1()))
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    boxplot(eval(inputVar1()) ~ eval(inputVar2()))
    }
    }
    }
    }
    }
    }

    })

    })
-------------------------------------------------------------------------------------------------------
library(ggplot2)
p <- ggplot() + geom_point(data=diamonds, aes(x=cut, y=mean(depth), color=clarity), shape=15, size=5)
p <- p + guides(color=guide_legend(title=NULL)) 
p <- p + theme(legend.key = element_blank())
p <- p  + geom_boxplot(data=diamonds,aes(x=cut,fill=factor(clarity),y=depth)) + guides(fill=FALSE)
p
-------------------------------------------------------------------------------------------------------
#create a dummy boxplot that you can modify the data easily
  z<- boxplot(1:10)

  #look at the outbut an assign yout data to stats
  z$stats<- your_data

  #use bxp to plot, via add you can combine all three
  bxp(z)
-------------------------------------------------------------------------------------------------------
as.numeric trans scale_colour_gradient date col geom_jitter geom_boxplot ggplot(df) + geom_boxplot(aes(factor(Location),Value))           +
    geom_jitter(aes(factor(Location),Value, col=Date),size=2)    +  # <~~~ col
    scale_colour_gradient(trans="date", low="red", high="green") +
    xlab("Location") as.numeric as.numeric col geom_jitter geom_boxplot ggplot(df) + geom_boxplot(aes(factor(Location),Value))+
    geom_jitter(aes(factor(Location),Value, col=as.numeric(Date)),size=2) +
    scale_colour_gradient(low='red',high='green') + 
    theme(legend.position="none") + xlab("Location")
-------------------------------------------------------------------------------------------------------
devtools librar(devtools)
install_github("plotflow", "trinker")
library(plotflow) ## Example 1
merge_pdf(3, file = "foo.pdf", widths = c(7, 7, 10), heights = c(6, 10, 7))
plot(1:10)
plot(1:10, pch=19)
plot(1:10, col="red", pch=19)

## Example 2
library(ggplot2)
p <- ggplot(mtcars, aes(factor(cyl), mpg)) + geom_boxplot()
merge_pdf(2, file = "bar.pdf", widths = c(7, 10), heights = c(6, 10))
plot(1:10)
print(p)
-------------------------------------------------------------------------------------------------------
geom_boxplot() stat="identity" geom_boxplot() ggplot(df,aes(x=as.factor(Page_Type),
       ymin=min,lower=X5.,middle=X50.,upper=X75.,ymax=Max,fill=as.factor(ID)))+
  geom_boxplot(stat="identity")
-------------------------------------------------------------------------------------------------------
boxplot() fivenum() AvgVisits <- c(10,4,12)
b1 <- boxplot(AvgVisits)
b1$stats == fivenum(AvgVisits) ggplot2 aes(x=) require(ggplot2)
q1 <- qplot(x=1, b1$stats, geom = "boxplot")
q1 +coord_flip() +
    geom_text(aes(x=1.1,y=b1$stats,label=b1$stats)) +
    opts(
        axis.text.x=theme_blank(),
        axis.text.y=theme_blank(),
        axis.title.x=theme_blank(),
        axis.title.y=theme_blank()
        )
-------------------------------------------------------------------------------------------------------
set.seed(1)
probes <- data.frame(matrix(rnorm(1200*18),ncol=18))
f<-c(rep("positive", 9), rep("negative", 9))
myrows <- sample(1:1200,12,FALSE)
boxplot(unlist(probes[myrows[1],])~f) # first plot
for(i in myrows){
    boxplot(unlist(probes[i,])~f)
    Sys.sleep(1) # wait for each plot for 1 sec
}
-------------------------------------------------------------------------------------------------------
plot(NORM, TEE, ylim = c(-4, 5), main = "NORM and TEE plot") points(NORM[NORM^2 -1> TEE], TEE[ TEE + 1< NORM^2], col = "blue")
legend(legend = c("TEE > NORM^2 - 1 ", "TEE < NORM^2 - 1" ), col = c(1, 4), x = "topright", pch = 1) par(mfrow = c(1, 2))
plot(NORM, TEE, ylim = c(-4, 5), main = "NORM and TEE plot")
plot(NORM, TEE, ylim = c(-4, 5), main = "NORM and TEE plot")
points(NORM[NORM^2 -1> TEE], TEE[ TEE + 1< NORM^2], col = "blue") screen.split(2,2)
#[1] 1 2 3 4
screen(1) # what follows goes in slot (1,1)
hist(RandomNormal, seq(-3.2, 3.2, .2), prob = TRUE)
curve(dnorm(x), add = TRUE, col = "red");
screen(2) # what follows goes in slot (1,2);
boxplot(DATA.oner);
screen(3) # similarly for (2,1);
plot(NORM, TEE, ylim = c(-4, 5), main = "NORM and TEE plot");
screen(4) # similarly for (2,2);
plot(NORM, TEE, ylim = c(-4, 5), main = "NORM and TEE plot");
points(NORM[NORM^2 - 1 > TEE], TEE[TEE + 1 < NORM^2], col = "blue"); screen(1) # Watch the screen (1,1) go blank
boxplot(DATA.oner, main = "Box Plots of DATA.oner")

screen(2) # again for slot (1,2)
hist(RandomNormal, seq(-3.2, 3.2, .2), prob = TRUE)
curve(dnorm(x), add = TRUE, col = "red") split.screen(c(2,1)) # The screen is now split in two
# [1] 1 2
split.screen(c(1,2), screen = 2) # splits the second into 2
# [1] 3 4
screen(1) # note screen 2 is now refered to as 3 and 4
hist(RandomNormal, seq(-3.2, 3.2, .2), prob = TRUE)
curve(dnorm(x), add = TRUE, col = "red")
legend(legend = c("Theoretical N(0, 1)"), col = c(2, 3), x = "topright", lty = 1)

screen(3) # We call on screen 3 and 4, not 2
boxplot(DATA.oner, main = "Box Plot of DATA.oner")

screen(4)
plot(NORM, TEE, ylim = c(-4, 5), main = "NORM and TEE plot")
-------------------------------------------------------------------------------------------------------
position="dodge" stat_summary() geom_boxplot() position="dodge" stat_summary() ggplot(aes(y = boxthis, x = f2, fill = f1), data = df) + 
  stat_summary(fun.data = f, geom="boxplot",position="dodge")
-------------------------------------------------------------------------------------------------------
ggplot2 data.table geom_text pvalue require(data.table)
dt <- data.table(df)
pval <- dt[, list(pvalue = paste0("pval = ", sprintf("%.3f", 
        summary(aov(x ~ type))[[1]][["Pr(>F)"]][1]))), 
        by=list(country, month)]

ggplot(data = df, aes(x=type, y=x)) + geom_boxplot() + 
geom_text(data = pval, aes(label=pvalue, x="river", y=2.5)) + 
facet_grid(country ~ month) + theme_bw() + 
theme(panel.margin=grid::unit(0,"lines"), # thanks to @DieterMenne
strip.background = element_rect(fill = NA), 
panel.grid.major = element_line(colour=NA), 
panel.grid.minor = element_line(colour=NA))
-------------------------------------------------------------------------------------------------------
coord_flip() plot <- ggplot(aes(y = SCORE, x = DATE, fill = CATEGORY), data = data_R1000) 
+ geom_boxplot(width=0.8) + ylim(20,100) + labs(title = "US_MARKETOR") 
+ theme(legend.position="bottom") 
+ theme(panel.background = element_rect(fill = "transparent",colour = NA)) 
+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) 
+ scale_fill_hue(c=50, l=85) 
+ coord_flip()
-------------------------------------------------------------------------------------------------------
library(reshape2)
ggplot(melt(df), aes(variable, value)) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
mapping "red" "red" mapped mapping call aes aes_string set aes fill = 'red' # modified from ?geom_boxplot
p <- ggplot(mtcars, aes(factor(cyl), mpg))

# incorrect
p + geom_boxplot(aes(alpha = factor(am), fill ='red')) + theme_bw() # the correct approach
p + geom_boxplot(aes(alpha = factor(am)), fill ='red') + theme_bw()
-------------------------------------------------------------------------------------------------------
cut aggregate ?cut ?aggregate cut breaks cut boxplot xaxt=FALSE boxplot aggregate length set.seed(1)
example <- data.frame(gene=sample(paste("gene",1:10),size=500,replace=TRUE),pval=sample(seq(0.01,1,0.01),500,replace=TRUE))
example$bin <- cut(example$pval,breaks=10)
boxplot(example$pval~example$bin,xaxt="n",ylab="p value",xlab="number of genes")
ngenes <- aggregate(example$gene,by=list("bin"=example$bin),length)
axis(side=1,labels=ngenes$x,at=1:10)
-------------------------------------------------------------------------------------------------------
set.seed(1)
b <- rnorm(10,2,4)
d <- rnorm(50,5,3)
f <- rnorm(100,1,0.5)
example <- list(b=b,d=d,f=f)
for(i in paste("var",1:3)){
  example[[i]] <- rnorm(sample(100,1),mean=sample(5,1),sd=sample(3,1))
}
boxplot(example)
-------------------------------------------------------------------------------------------------------
par(mfrow = c(8,2))
for(i = 1:8){
  hist(dataframe[,i])
  boxplot(dataframe[,i])
}
-------------------------------------------------------------------------------------------------------
data$Class2 <- factor(
    data$Class2, 
    levels = c("group1:b", "group1:c", "group2:a")
) ggplot(data, aes(x= Class2, y = cM)) + geom_boxplot() + 
  geom_jitter(alpha = 0.4, position = position_jitter(height = .01, width = .35)) +
  coord_flip() + 
  facet_wrap(~Class1)
ggplot(data, aes(x= Class2, y = cM)) + geom_boxplot() + 
  geom_jitter(alpha = 0.4, position = position_jitter(height = .01, width = .35)) +
  coord_flip() + 
  facet_wrap(~Class1, scales = "free_x")
-------------------------------------------------------------------------------------------------------
facet_wrap() facet_grid() scales="free_y" ggplot(mtcars,aes(as.factor(cyl),mpg))+geom_boxplot()+
          facet_wrap(~gear,scales="free_y")
-------------------------------------------------------------------------------------------------------
> testdata <- data.frame(x1=runif(1e3),x2=rnorm(1e3),x3=rnorm(1e3))
> temp <- boxplot(testdata,plot=F)
> cbind(temp$group,temp$out)
      [,1]      [,2]
 [1,]    2  2.765277
 [2,]    2  2.754730
 [3,]    2 -2.714811
 [4,]    2  3.257889
 [5,]    3  2.605549
 [6,]    3 -3.261950
 [7,]    3 -3.057532
 [8,]    3  2.820352
 [9,]    3  2.602933
[10,]    3  2.580897
[11,]    3  2.899350
-------------------------------------------------------------------------------------------------------
show_guide=FALSE stat_summary() ggplot(data=PlantGrowth, aes(x=group, y=weight, fill=group)) + geom_boxplot() +
  stat_summary(fun.y=mean, colour="darkred", geom="point", 
                         shape=18, size=3,show_guide = FALSE)
-------------------------------------------------------------------------------------------------------
layout x <- rnorm(1000)
jpeg("normdist.jpg")
layout(mat=matrix(c(1,1,2,3,4,4),nrow=3,ncol=2,byrow=T))
boxplot(x, horizontal=T)
hist(x)
plot(density(x))
plot(x)
dev.off() ?layout layout
-------------------------------------------------------------------------------------------------------
library(plyr)
xx <- ddply(mtcars,.(cyl),
            transform,
            ymin = min(mpg),
            ymax = max(mpg),
            middle = median(mpg),
            lower = quantile(mpg,0.25),
            upper = quantile(mpg,0.75))

ggplot(data = xx,aes(x = factor(cyl))) + 
    geom_boxplot(aes(ymin = ymin,ymax = ymax,middle = middle,upper = upper,lower= lower),
                 stat = 'identity') ddply
-------------------------------------------------------------------------------------------------------
geom_dotplot() geom_boxplot(outlier.colour = NA) # This returns a data frame with the outliers only
find_outliers <- function(y, coef = 1.5) {
   qs <- c(0, 0.25, 0.5, 0.75, 1)
   stats <- as.numeric(quantile(y, qs))
   iqr <- diff(stats[c(2, 4)])

   outliers <- y < (stats[2] - coef * iqr) | y > (stats[4] + coef * iqr)

   return(y[outliers])
}


library(MASS)  # Use the birthwt data set from MASS

# Find the outliers for each level of 'smoke'
library(plyr)
outlier_data <- ddply(birthwt, .(smoke), summarise, lwt = find_outliers(lwt))


# This draws an ordinary box plot
ggplot(birthwt, aes(x = factor(smoke), y = lwt)) + geom_boxplot()


# This draws the outliers using geom_dotplot
ggplot(birthwt, aes(x = factor(smoke), y = lwt)) +
   geom_boxplot(outlier.colour = NA) +
#also consider:
#  geom_jitter(alpha = 0.5, size = 2)+
   geom_dotplot(data = outlier_data, binaxis = "y",
                stackdir = "center", binwidth = 4)
-------------------------------------------------------------------------------------------------------
ggplot set.seed(1)
df1 <- data.frame(loc=rep(seq(1:3),each=5),
                  conc=rnorm(15))
library(ggplot2)
gg<-ggplot(df1,aes(factor(loc),conc))
gg +
geom_boxplot((aes(fill = factor(loc)))) +
geom_jitter() +
stat_summary(fun.y=median, geom="smooth", aes(group=1))
-------------------------------------------------------------------------------------------------------
> datLines <- readLines(textConnection(" 24     i=6,j=529, Depth Avg
+ 129  1
+ 129.041687011719     1.00000035762787
+ 129.08332824707  .99999988079071
+ 129.125015258789     1.00000011920929
.......
###### snipped many lines
+ 129.833343505859     .99979567527771
+ 129.875030517578     .999777317047119
+ 129.91667175293  .999795794487
+ 129.958358764648     .99979555606842"))

grp <- cumsum(grepl("Depth", datLines)) # cumsum 1/0's creates group var
rdLines <- lapply( split(datLines, grp), # read within each group
                   function(x) read.table(text=x, skip=1) )
str(rdLines[1])
dafrm <- do.call(rbind, rdLines)  # bind in one dataframe
dafrm$grp <- rep(1:24, each=24)   # label them
bpt <- boxplot(V2~grp, data=dafrm) # save values in 'bpt' variable
str(bpt)
lines(1:24, bpt$stats[ 3, ])  # values of medians as y-arg to `lines`
-------------------------------------------------------------------------------------------------------
coord_cartesian ggplot(df, aes(factor(station), value)) + 
  geom_boxplot() +
  coord_cartesian(ylim = c(0.00005, 0.00015))
-------------------------------------------------------------------------------------------------------
text par(mar=c(6, 4.1, 4.1, 2.1))

labels <- paste(c("RB-GL830-[16]-10", 
                  "RB-GL830-[16]-30",
                  "SB-GL834-[11]-10",
                  "SB-GL834-[11]-30",
                  "RB-GL843-[17]-10",
                  "RB-GL843-[17]-30"))

boxplot(count ~ spray, data = InsectSprays,col = "lightgray", xaxt = "n",  xlab = "")

# x axis with ticks but without labels
axis(1, labels = FALSE)

# Plot x labs at default x position
text(x =  seq_along(labels), y = par("usr")[3] - 1, srt = 45, adj = 1,
     labels = labels, xpd = TRUE) x = seq_along(labels) x text ?boxplot at at boxplot seq_along length at plot
-------------------------------------------------------------------------------------------------------
coord_flip grid.arrange() plot1 + geom_rug(sides='r')
-------------------------------------------------------------------------------------------------------
boxplot(y1$Frequency..times., col="grey", outcol="red") boxplot(y1$Frequency..times., col="grey", pars=list(outcol="red")) ?boxplot pars ?bxp
-------------------------------------------------------------------------------------------------------
plot1 <- ggplot(newdatahistogram, aes_string(x=newdatahistogram[RawLocation], fill=(newdatahistogram[,"PQ"]))) + 
  xlab(GGVar) + ylab("Proportion of Observation") + 
  geom_histogram(aes(y=..density..), binwidth=1, colour="black", origin=-0.5) +
  scale_x_continuous(limits=c(-1,6), breaks=seq(0,5,by=1), expand=c(.01,0)) +
  scale_y_continuous(limits=c(-.2,1), breaks=seq(0,1,by=.2))
  theme(plot.margin = unit(c(0,0,0,0), "cm"))      

plot_box <- ggplot(newdatahistogram) +
  geom_boxplot(aes_string(x=1, y=newdatahistogram[RawLocation])) + 
  scale_y_continuous(breaks=(0:5), labels=NULL, limits=c(-1,6), expand=c(.0,-.03)) + 
  scale_x_continuous(breaks=NULL) + xlab(NULL) + ylab(NULL) +
  coord_flip() + theme_bw() +  
  theme(plot.margin = unit(c(0,0,.0,0), "cm"),
        line=element_blank(),text=element_blank(),
        axis.line = element_blank(),title=element_blank(), panel.border=theme_blank())

PB = ggplotGrob(plot_box)
plot1 <- plot1 + annotation_custom(grob=PB, xmin=-1.01, xmax=5.95, ymin=-.3,ymax=0)
-------------------------------------------------------------------------------------------------------
expand p = ggplot(datatest2, aes(x = factor(genotype), y = score))
plot = p+ geom_boxplot()+ labs(x = "genotype",
    y = "PI during final test")+
  scale_fill_grey(start = 0.9, end = 0.9)+ ##allow good bw prints
  scale_y_continuous(expand = c(0,0.005),
                     minor_breaks = NULL,
                     breaks = seq(-1 , 1, 1) ) +

    theme()

plot
-------------------------------------------------------------------------------------------------------
d<-rnorm(30)
boxplot(d)
points(rep(1,length(d)),d)
-------------------------------------------------------------------------------------------------------
data( iris )
iris$Petal.Class <- cut( iris$Petal.Length , 3 )

p1 <- ggplot( iris ) +
  geom_boxplot( aes( Species , Sepal.Width ) ) +
  facet_grid( Species + Petal.Class ~ . )

p2 <- ggplot( iris ) +
  geom_boxplot( aes( Species , Sepal.Width ) ) +
  facet_grid( Species ~ Petal.Class )

require( gridExtra )
grid.arrange( p1 , p2 , nrow = 1 , ncol = 2 ) facet_grid( species + varY ~ .) +
-------------------------------------------------------------------------------------------------------
library(plyr)
library(ggplot2)
library(multcompView)

set.seed(0)
lev <- gl(3, 10)
y <- c(rnorm(10), rnorm(10) + 0.1, rnorm(10) + 3)
d <- data.frame(lev=lev, y=y)

a <- aov(y~lev, data=d)
tHSD <- TukeyHSD(a, ordered = FALSE, conf.level = 0.95)

generate_label_df <- function(HSD, flev){
 # Extract labels and factor levels from Tukey post-hoc 
 Tukey.levels <- HSD[[flev]][,4]
 Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
 plot.labels <- names(Tukey.labels[['Letters']])

 # Get highest quantile for Tukey's 5 number summary and add a bit of space to buffer between    
 # upper quantile and label placement
    boxplot.df <- ddply(d, flev, function (x) max(fivenum(x$y)) + 0.2)

 # Create a data frame out of the factor levels and Tukey's homogenous group letters
  plot.levels <- data.frame(plot.labels, labels = Tukey.labels[['Letters']],
     stringsAsFactors = FALSE)

 # Merge it with the labels
   labels.df <- merge(plot.levels, boxplot.df, by.x = 'plot.labels', by.y = flev, sort = FALSE)

return(labels.df)
} p_base <- ggplot(d, aes(x=lev, y=y)) + geom_boxplot() +
  geom_text(data = generate_label_df(tHSD, 'lev'), aes(x = plot.labels, y = V1, label = labels))
-------------------------------------------------------------------------------------------------------
bty ="l" plot plot(x, y, ylim=c(0, 8), xlim=c(-0.4, 1.2), pch=19, cex.axis=0.8, 
     cex.lab=0.9, xlab="Male/Female expression ratio (log)", 
     ylab="Z/W expression ratio in females", las=1, bty = "l") ?par boxplot() ?boxplot
-------------------------------------------------------------------------------------------------------
aggregate set.seed(1)
example <- data.frame(Rep=rep(100:104,each=4),
                      Quarter=rep(1:4,5),
                      Sales=sample(100,20,replace=TRUE))

> head(example)
  Rep Quarter Sales
1 100       1    27
2 100       2    38
3 100       3    58
4 100       4    91
5 101       1    21
6 101       2    90


> aggregate(example$Sales,by=list(Rep=example$Rep),summary)
  Rep x.Min. x.1st Qu. x.Median x.Mean x.3rd Qu. x.Max.
1 100  27.00     35.25    48.00  53.50     66.25  91.00
2 101  21.00     55.50    78.50  68.25     91.25  95.00
3 102   7.00     15.25    19.50  27.25     31.50  63.00
4 103  39.00     47.25    59.50  58.75     71.00  77.00
5 104  39.00     63.75    75.00  72.25     83.50 100.00 > aggregate(Sales ~ Rep,summary,data=example)
  Rep Sales.Min. Sales.1st Qu. Sales.Median Sales.Mean Sales.3rd Qu. Sales.Max.
1 100      27.00         35.25        48.00      53.50         66.25      91.00
2 101      21.00         55.50        78.50      68.25         91.25      95.00
3 102       7.00         15.25        19.50      27.25         31.50      63.00
4 103      39.00         47.25        59.50      58.75         71.00      77.00
5 104      39.00         63.75        75.00      72.25         83.50     100.00 boxplot boxplot(example$Sales~example$Rep)
-------------------------------------------------------------------------------------------------------
Rcpp R require(Rcpp);require(microbenchmark);require(ggplot2);

limitstretchR <- function(upperlimit,original) {
  remainder  <- 0
  out <- vector(length=length(original))
  for(i in 1:length(original)){
    if(original[i] >= upperlimit){
      out[i]  <- upperlimit
    } else {
      out[i] <- min(remainder,upperlimit)
    }
    remainder  <-  remainder + original[i] - out[i]
  }
  out
} Rcpp cppFunction('
  NumericVector limitstretchC(double upperlimit, NumericVector original) {
    int n = original.size();
    double remainder = 0.0;
    NumericVector out(n);
    for(int i = 0; i < n; ++i) {
        if (original[i] >= upperlimit) {
          out[i] = upperlimit;
        } else {
          out[i] = std::min<double>(remainder,upperlimit);
        }
      remainder = remainder + original[i] - out[i];
    }
    return out;
  }
') x <- c(0,2101,3389,3200,1640,0,0,0,0,0,0,0)
original <- rep(x,20000)
upperlimit <- 2000
system.time(limitstretchR(upperlimit,original))
system.time(limitstretchC(upperlimit,original)) R microbenchmark res <- microbenchmark(list=
    list(limitstretchR=limitstretchR(upperlimit,rep(x,10000)),
    limitstretchC=limitstretchC(upperlimit,rep(x,10000))),
        times=110,
        control=list(order="random",warmup=10))
print(qplot(y=time, data=res, colour=expr) + scale_y_log10())
boxplot(res)
print(res) microbenchmark
-------------------------------------------------------------------------------------------------------
flag <- 0
while(flag==0){                                
  X  <- rnorm(N)                                    
  bp <- boxplot(X, plot=FALSE)  
  if(length(bp$out)!=0){ 
    flag <- 1
  }
}
-------------------------------------------------------------------------------------------------------
for for(s in 3:ncol(mylist[[1]])) { 
  for(i in 1:length(mylist)){ 
    boxplot(mylist[[i]][s])
  }
} par(mfrow=c(num.rows,num.cols)) ?boxplot ggplot2 # Stick your list together.
one.df<-do.call(rbind,mylist)
# Convert to "long-form".
library(reshape)
melted.df<-melt(one.df,id.vars=c('name','date'))
# Plot with ggplot2
ggplot(melted.df,aes(x=name,y=value)) + 
geom_boxplot() + facet_grid(variable~.,scales='free')
-------------------------------------------------------------------------------------------------------
fatten geom_boxplot library(ggplot2)
p <- ggplot(mtcars, aes(factor(cyl), mpg))
p + geom_boxplot(fatten = 0) p + geom_boxplot(fatten = 4)
-------------------------------------------------------------------------------------------------------
Método Estimativa0 stat_summary Estimativa0 geom_boxplot stat_summary aes(fill=factor(Estimativa0)) fill=factor(Estimativa0) aes(Método, NM.Intra1, fill=factor(Estimativa0)) p <- ggplot(data, aes(Método, NM.Intra1, fill=factor(Estimativa0)))
p <- p + geom_boxplot() + ylab('Vício') + xlab('Método') + scale_fill_discrete("Estatística") + ggtitle('Gráfico maluco da Greice') + geom_hline(yintercept=0)
p + stat_summary(fun.y=mean, colour="red", geom="point", position=position_dodge(width=0.75), shape=2)
-------------------------------------------------------------------------------------------------------
[[ [ boxplot(simPF[[2]]~simPF[[1]]) [ [ str(simPF[1])
# 'data.frame': 10000 obs. of  1 variable:
# $ répétition: num  10 10 10 10 10 10 10 10 10 10 ... [[ str(simPF[[1]])
# num [1:10000] 10 10 10 10 10 10 10 10 10 10 ... [ boxplot(fréquence~répétition, simPF)
-------------------------------------------------------------------------------------------------------
d$l1.num <- as.numeric(d$l1)
d$l2.num <- (as.numeric(d$l2)/3)-(1/3 + 1/6)
d$x <- d$l1.num + d$l2.num

ggplot(d, aes(l1, y, colour = l2)) + geom_boxplot(fill = NA) +
  geom_point(aes(x = x), position = position_jitter(width = 0.15), alpha = 0.5) + theme_bw()
-------------------------------------------------------------------------------------------------------
# a plot with no dodging or jittering of the points 
dp <- ggplot(d, aes(x=l1, y=y, colour=l2)) + 
  geom_point(alpha=0.5) +
  geom_boxplot(fill=NA)

# build the plot for rendering
foo <- ggplot_build(dp)
# now replace the 'x' values in the data for layer 1 (unjittered and un-dodged points)
# with the appropriately dodged and jittered points
foo$data[[1]][['x']] <- jitter(foo$data[[2]][['x']][foo$data[[1]][['group']]],amount = 0.2)
# now draw the plot (need to explicitly load grid package)
library(grid)
grid.draw(ggplot_gtable(foo))
# note the following works without explicitly loading grid
plot(ggplot_gtable(foo))
-------------------------------------------------------------------------------------------------------
ggplot2 library(reshape2)
dfm <- melt(df) library(ggplot2)
ggplot(data=dfm) + geom_boxplot(aes(x=Strain,y=value)) + facet_wrap(~variable)
-------------------------------------------------------------------------------------------------------
TGS = data.frame(A = rnorm(100), B = rnorm(100), C=rnorm(100)) boxplot(TGS, outline=F) identity identify(x=rep(1:ncol(TGS), each=nrow(TGS)), 
     y=as.vector(unlist(TGS)), 
     label=rep(colnames(TGS), each=nrow(TGS)))
-------------------------------------------------------------------------------------------------------
geom_boxplot plyr # load packages
require(plyr)
require(ggplot2)
# find outliers
df <- ddply(mtcars, "cyl", function(x){
  iqr <- quantile(x[,"mpg"], c(.25, .75)) # inter-quartile-range
  whisker <- iqr+c(-1.5, 1.5)*diff(iqr)   # whiskers-range
  x[,"shape"] <- ifelse(x[,"mpg"] < whisker[1] | x[,"mpg"]>whisker[2], 1, 16)
  return(x)
})
# plot
p <- ggplot(df, aes(factor(cyl), mpg))
p + geom_boxplot() # without jittering
# adding shape manualy
p + geom_boxplot(outlier.size=-Inf) + 
  geom_jitter(aes(shape=factor(shape))) + 
  scale_shape_manual(guide=FALSE, values=c("16"=16, "1"=1))
-------------------------------------------------------------------------------------------------------
interaction boxplot( HAMD ~ interaction(treatment,week), data=MP )
boxplot( HAMD ~ interaction(week,treatment), data=MP )
boxplot( HAMD ~ interaction(week,treatment), data=MP,
    at= c(1:6, 8:13) ) library(lattice)
bwplot( HAMD ~ week|treatment, data=MP )
bwplot( HAMD ~ treatment|week, data=MP )
bwplot( HAMD ~ treatment|week, data=MP, layout=c(6,1) ) library(ggplot2)
p <- qplot(interaction(treatment,week), HAMD, data=MP, geom="boxplot")
p
p + aes(fill=week)
-------------------------------------------------------------------------------------------------------
rnorm geom_boxplot geom_jitter alpha install.packages("gridExtra"); install.packages("ggplot2")
library(gridExtra); library(ggplot2)

df <- data.frame(list(our_rand_var = rnorm(10000, mean = 0, sd = 1)))

p1 <- ggplot(df, aes(x = our_rand_var)) +
  geom_density(fill = "white") +
  ylab("") +
  xlab("") +
  theme(axis.text = element_text(size = 20),
        axis.title.y = element_blank(),
        axis.text.y = element_blank())

p2 <- ggplot(df, aes(x = "Our Variable", y = our_rand_var)) +
  geom_jitter(alpha = 0.2) +
  geom_boxplot(alpha = 0.9, colour = "red", size = 2) +
  ylab("Standard Deviations") +
  coord_flip() +
  theme(axis.text = element_text(size = 20),
        axis.title.y = element_blank(),
        axis.text.y = element_blank())

grid.arrange(p1, p2, ncol = 1, 
             main = "Standard Normal Distribution (~Z)")
-------------------------------------------------------------------------------------------------------
set.seed(1)
d1 <- c(rbeta(5,1,1), runif(5))
boxplot(d1) graphics::boxplot.default boxplot.stats grDevices stats::fivenum x x <- sort(x)
n4 <- floor((length(x) + 3) / 2) / 2
d <- c(1, n4, (length(x) + 1) / 2, length(x) + 1 - n4, length(x))
0.5 * (x[floor(d)] + x[ceiling(d)])
-------------------------------------------------------------------------------------------------------
dist dist ggplot(cars) + geom_boxplot(aes(factor(dist), speed)) cars$bin <- cut(cars$dist, c(1, 10, 30, 50, 200))
ggplot(cars) + geom_boxplot(aes(bin, speed))
-------------------------------------------------------------------------------------------------------
df.so1 <- runif(10); df.so2 <- runif(10); df.so3 <- runif(10)
list.so = list(df.so1, df.so2, df.so3)
df.so = melt(list.so)

ggplot(df.so, aes(factor(L1), value)) + 
  geom_boxplot(outlier.size=1.5, colour="black") + 
  xlab("Xlabel") + ylab("Ylabel") +
  theme_classic() + 
  theme(
    axis.text.x = element_text(size=12),
    axis.text.y = element_text(size=12),
    axis.title.x = element_text(size=14),
    axis.title.y = element_text(size=14, angle=90),
    axis.line = element_line(size=0.75)
  ) + 
  scale_x_discrete(breaks = c(1,3))
-------------------------------------------------------------------------------------------------------
ggplot(myboxplot, aes(x=JibStat)) +  
    geom_boxplot(aes(lower = q1, upper = q3, middle = med, 
               ymin = min, ymax = max), stat = "identity")
-------------------------------------------------------------------------------------------------------
log10 value log10 log="y" set.seed(123)
x<-sample(100,1000,T)
var<-sample(letters[1:5],1000,T) boxplot(log10(x) ~ var,yaxt="n")
axis(side=2,labels=round(10^(seq(log10(min(x)),log10(max(x)),len=5)),2),at=seq(log10(min(x)),log10(max(x)),len=5)) boxplot(x ~ var,yaxt="n",log="y")
axis(side=2,labels=seq(min(x),max(x),len=5),at=seq(min(x),max(x),len=5)) at log="y" axis(side=2,labels=round(exp(seq(log(min(x)),log(max(x)),len=5)),2),at=exp(seq(log(min(x)),log(max(x)),len=5)))
-------------------------------------------------------------------------------------------------------
p <- ggplot(mtcars, aes(factor(gear), mpg, fill=factor(gear)))
p <- p + scale_x_discrete()
p <- p + geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf, fill=(typeColor)))
p <- p + geom_boxplot()
p <- p + facet_grid(. ~ type)
p <- p + scale_fill_manual( values = c("black" = "black","white" = "white","3" = "green","4" = "red","5" = "blue"))
show(p)
-------------------------------------------------------------------------------------------------------
geom_rect ggplot(mtcars, aes(factor(gear), mpg, fill=factor(gear))) + 
        scale_x_discrete() + 
        geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf, fill=(typeColor)),
                  show_guide = FALSE) + 
        geom_boxplot() + 
        facet_grid(. ~ type) + 
        scale_fill_manual(values = c("black" = "black","white" = "white","3" = "green","4" = "red","5" = "blue"), 
                          limits=c("3","4","5"))
-------------------------------------------------------------------------------------------------------
ylim ylim boxplot(
    visits ~ yearmo, data=myData, main="Organic Visits",
    xlab="Year-Month", ylab="Visits", col= "orange", yaxt="n"
)
-------------------------------------------------------------------------------------------------------
boxplot(visits ~ as.factor(year), data=myData) myData$yearmo <- year(myData$date)*100 + month(myData$date)
-------------------------------------------------------------------------------------------------------
fig.show opts_chunk$set(fig.show='hold') <<two-high, fig.width=3, fig.height=2.5, fig.show='hold', out.width='0.49\\linewidth'>>=
plot(cars)
boxplot(cars$dist,xlab='dist')
@
-------------------------------------------------------------------------------------------------------
c range ylim boxplot(aerobic1, at = 1, xlim = c(0.5, 3.5), 
  ylim = range(c(aerobic1, aerobic2, aerobic3)))
boxplot(aerobic2, at = 2, add = TRUE)
boxplot(aerobic3, at = 3, add = TRUE)
-------------------------------------------------------------------------------------------------------
set.seed(4)
TOTAL.LACE      <- rep(1:19, each=1000)
zero.prob       <- rbinom(19000, size=1, prob=.01)
DAYS.TO.FAILURE <- rpois(19000, lambda=15)
DAYS.TO.FAILURE <- ifelse(zero.prob==1, DAYS.TO.FAILURE, 0) cex.axis boxplot(DAYS.TO.FAILURE~TOTAL.LACE, cex.axis=.8) TOTAL.LACE plot() boxplot plot(TOTAL.LACE, DAYS.TO.FAILURE) plot(as.factor(TOTAL.LACE), DAYS.TO.FAILURE) DAYS.TO.FAILURE pch=unique(psymbol) psymbol <- unique(FAILURE + 1) pch=(FAILURE + 1)
-------------------------------------------------------------------------------------------------------
\documentclass{report}

\begin{document}
\title{Sequencing Quality Report}
\author{Deep Sequencing Group - SFB655}
\maketitle


<<knitr_option, cache=FALSE, echo=FALSE, results='hide'>>=
library(knitr)
## set global chunk options
opts_chunk$set(fig.align='center', fig.width=14, fig.heigth=8, out.width="1.2\\textwidth",  par=TRUE)
@


<<R_arguments, cache=FALSE, echo=FALSE, include=FALSE>>=

###### Libraries ######
library(reshape)
library(ggplot2)
theme_set(theme_bw(16)) # removes grey grid and increases letter size. Ideal for presentations
library(RColorBrewer)
library(plyr)
library(scales) # for natural numbers in axis
library(xtable)
library(rattle) # needed to generate a table in knitr?
#######################


###### Function definitions ######
## ggplot theme with extra space between legends and axis
gg.axis.space <- theme(axis.title.y=element_text(vjust=0.2), axis.title.x=element_text(vjust=0.2))

@


\chapter{Preamble}

This an automated quality control report generated for the following fastq files:

<<table_files, echo=FALSE, results="asis">>=
##############################################
## loop over fastQC folder and parse txt files:

## list and read fastqc_data.temp old files
# testing #
# setwd("/projects/seq-work/analysis/martinad/p0196-totalRNA/")
folder <- "./"
filenames <- list.files(path=folder, pattern="fastqc_data.temp", recursive=TRUE) 
fq_fastqc.folders <- unique(dirname(filenames)) # the folders that contain fastQC
fastq.libs <- data.frame(Libraries = gsub(".*/(L.*)\\.fq_fastqc", "\\1", fq_fastqc.folders, perl=T))
xtable(fastq.libs)
@



\chapter{FastQC}

<<loop_n_plots, echo=FALSE, results="asis">>=
## do the plotting
# sapply(fq_fastqc.folders[1:3], ReturnStatsPlotsAndTables)
for (fqc.folder in fq_fastqc.folders[1:2]){
   # for(fqc.folder in fq_fastqc.folders){
   ######################################
   ## for each folder in the vector will
   ## plot stats and 
   ## print tables of fastQC results
#    print(fqc.folder)
   ## which library is being analysed?
   fastq.lib <- data.frame(Libraries = gsub(".*/(L.*)\\.fq_fastqc", "\\1", fqc.folder, perl=T))
   print(xtable(fastq.lib))

   ## Basic statistics - table ##
   stats.path <- paste(fqc.folder, "/", "Basic_Statistics_fastqc_data.temp", sep="")
   basic.stats <- read.table(stats.path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
#    basic.stats[ ,1:2]
   print(xtable(basic.stats[ ,1:2])) 


   ## Summary of filters - table ##
   stats.path <- paste(fqc.folder, "/", "filters_summary_fastqc_data.temp", sep="")
   summary.filters <-  read.table(stats.path, 
      header = TRUE, sep = "\t", stringsAsFactors = FALSE)
#    summary.filters
   print(xtable(summary.filters))


   ## Per base sequence quality ##
   stats.path <- paste(fqc.folder, "/", "Per_base_sequence_quality_fastqc_data.temp", sep="")
   base.qual <- read.table(stats.path, 
      header = TRUE, sep = "\t", stringsAsFactors = FALSE)


   base.qual$Base <- factor(base.qual$Base, as.character(base.qual$Base)) # re-order the levels by order of appearance in DF

   plot.new()
   base.qual.p <- ggplot(base.qual, aes(x = Base, ymin = X10th.Percentile, lower = Lower.Quartile, middle = Median, upper = Upper.Quartile, ymax = X90th.Percentile, fill = Lower.Quartile)) + geom_boxplot(stat = "identity") + 
      theme(axis.text.x = element_text(angle=30, hjust=1, vjust=1)) + 
      annotate("rect", xmin=-Inf, xmax=Inf, ymin=0, ymax=20, alpha=0.1, fill="red") +
      annotate("rect", xmin=-Inf, xmax=Inf, ymin=20, ymax=28, alpha=0.1, fill="yellow") +
      annotate("rect", xmin=-Inf, xmax=Inf, ymin=28, ymax=Inf, alpha=0.1, fill="green") +
      ggtitle("Per base sequence quality") + ylab("Quality score (Phred score) ") + xlab("Position of base in read")

   print(base.qual.p)

}
@

\end{document}
-------------------------------------------------------------------------------------------------------
selections <- matrix(nrow = nrow(df), ncol = 4)
selections[,1] <- df$Test_11 == "A"
selections[,2] <- df$Test_11 == "B"
selections[,3] <- df$Test_12 == "A"
selections[,4] <- df$Test_12 == "B"
# etc...
par(mfcol = c(2, 2)) # here you should customize at will...
for (i in 1:4) {
  z <- subset(df, selections[,i])
  plot(z$LVL11, z$Score_X_11, varwidth = TRUE, 
       notch = TRUE, xlab = 'LVL', 
       ylab = 'score')
} z$Score_X_11 z[,string] string paste v <- c("X", "Y")
n <- c("11", "12")
for (i in 1:2) {
  for (j in 1:2) {
    string <- paste("Score", v[i], n[i], sep = "_")
    print(string)
  }
} z$LVLXX # df <- read.table("data.txt", header = TRUE, na.string = "NA")
require(reshape2)
require(ggplot2)

# Melt your data.frame, using the scores as the "values":
mdf <- melt(df[,-1], id = c("LVL11", "LV12", "Test_11", "Test_12"))

# loop through level types:
for (lvl in c("LVL11", "LV12")) {
  # looping through values of test11
  for (test11 in c("A", "B")) {
    # Note the use of subset before ggplot
    p <- ggplot(subset(mdf, Test_11 == test11), aes_string(x=lvl, y="value"))
    # I added the geom_jitter as in the example given there were only a few points
    g <- p + geom_boxplot(aes(fill = variable)) + geom_jitter(aes(shape = variable))
    print(g) # it is necessary to print p explicitly like this in order to use ggplot in a loop
    # Finally, save each plot with a relevant name:
    savePlot(paste0(lvl, "-t11", test11, ".png")) 
    # (note that savePlot has some problems with RStudio iirc)

  }
  # Same as before, but with test_12
  for (test12 in c("A", "B")) {
    p <- ggplot(subset(mdf, Test_12 == test12), aes_string(x=lvl, y="value"))
    g <- p + geom_boxplot(aes(fill = variable)) + geom_jitter(aes(shape = variable))
    print(g) 
    savePlot(paste0(lvl, "-t12", test12, ".png"))
  }
} facet_grid
-------------------------------------------------------------------------------------------------------
boxplot boxplot(var1) boxplot(var1 ~ cut(var2, 12))
-------------------------------------------------------------------------------------------------------
is.factor(ELISA_Mussel$ELISA)
# TRUE
nlevels(ELISA_Mussel$ELISA)
# [1] 3 ELISA_Mussel$ELISA <- droplevels(ELISA_Mussel$ELISA) droplevels boxplot boxplot(ELISA_Mussel$conc2 ~ droplevels(ELISA_Mussel$ELISA),
        main="ELISA", ylab=expression(paste(mu,"g/L"))) names
-------------------------------------------------------------------------------------------------------
data geom_path data ggplot geom_path geom_path geom_path data data2 <- data.frame(x = c(1, 1, 2, 2), y = c(25, 26, 26, 25))

ggplot(data = data1, aes(x = factor(island), y = count)) +
  geom_boxplot() +
  geom_path(data = data2, aes(x = x, y = y))
-------------------------------------------------------------------------------------------------------
order() rank() data <- data.frame(response=rnorm(160), fact=factor(rep(1:8), labels=letters[1:8]))
boxplot(response~fact, data=data, notch=TRUE, xlab="treatments", ylab="response")

data$ordered <- rank(tapply(data$response, data$fact, median))
boxplot(response~ordered, data=data, notch=TRUE, xlab="treatments", ylab="response")
-------------------------------------------------------------------------------------------------------
x = read.csv('dataFile.csv', header=T)

#is it numeric?
class(x$value)
# if it is already numeric you shouldn't have to convert it,
# if it strictly numeric I don't know any reason why it 
# should be read as strings but it happens.

aggregate(x,by=list(x$code),FUN="median")

boxplot(value~code,data=x)
# and you can do ?boxplot to look into its options.
-------------------------------------------------------------------------------------------------------
x
    V1   V2   V3   V4   V5
1   g1 10.5 12.0 13.0 14.0
2   g2 11.0 13.0 10.5 12.0
3   g3 10.0  9.0 11.0 10.0
4   g4  9.0  8.0  6.0  5.0
5   g5 16.0  4.0  4.0  6.0
6   g6 11.0 12.0  5.0  4.0
7   g7 10.0  6.0 13.0 12.0
8   g8  5.0  4.0 12.0 12.0
9   g9 11.0 12.0 10.0 11.5
10 g10  8.9  7.8  7.6  5.8


x.m<-melt(x, id.var="V1")
x.m$control<-ifelse(x.m$variable %in% c("V2", "V3"), "Control","Treatment")
x.m$L<-ifelse(x.m$variable %in% c("V2", "V4"), "L1","L2")

ggplot(x.m, aes(x=L,y=value,  fill=control))+geom_boxplot()
-------------------------------------------------------------------------------------------------------
facet_wrap( ~ Group2, scales = 'free') library(ggplot2)
library(reshape2)

control <- ## read in control data
control$group <- rep('control', nrow(control))
control <- melt(control, id.vars = 'group')

treatment <- ## read in control data
treatment$group <- rep('treatment', nrow(treatment))
treatment <- melt(treatment, id.vars = 'group')

allData <- rbind(control, treatment)

ggplot(allData, aes(x = variable, y = value, group = variable)) +
  geom_boxplot() +
  facet_wrap( ~ group, scales = 'free') library(gdata)
library(reshape2)
library(ggplot2)

control <- ## read in control data
control$group <- rep('control', nrow(control))
control <- melt(control, id.vars = 'group')

treatment <- ## read in treatment data
treatment$group <- rep('treatment', nrow(treatment))
treatment <- melt(treatment, id.vars = 'group')

allData <- rbind(control, treatment)

compA <- subset(allData, 
              variable == 'L1' | 
              variable == 'S1' | 
              variable == 'S2')
compB <- subset(allData, 
              variable == 'L2' | 
              variable == 'L3' | 
              variable == 'S3' | 
              variable == 'S4' | 
              variable == 'S5')
compC <- subset(allData, 
              variable == 'L4' | 
              variable == 'L5' | 
              variable == 'S4' | 
              variable == 'S5')

allData <- combine(compA, compB, compC)

ggplot(allData, aes(x = variable, y = value, group = variable, fill = group)) +
  geom_boxplot() +
  facet_wrap( ~ source, scales = 'free_x')
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
color=animals fill=animal scale_color_brewer() scale_fill_brewer() qplot(animals, value, data = data, fill=animals)+ 
  geom_boxplot() + facet_grid(~region) + scale_fill_brewer()
-------------------------------------------------------------------------------------------------------
facet_grid() geom_point() library(ggplot2)

plot1 = ggplot(mtcars, aes(x=factor(gear), y=mpg, colour=factor(gear))) +
        geom_boxplot(space=0) + 
        facet_grid(. ~ cyl, labeller="label_both")

plot2 = plot1 + geom_point()

library(gridExtra)
ggsave(filename="plots.png", plot=arrangeGrob(plot1, plot2, ncol=2), 
       width=10, height=4, dpi=120)
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
ggplot(df, aes(x = BAR, y = FOO)) + 
  geom_boxplot(outlier.shape = NA, fill = "grey80",alpha = 0.3, width=0.5) + 
  geom_point(position = position_jitter(w = 0.15, h = 0)) + 
  theme_bw()
-------------------------------------------------------------------------------------------------------
aggregate means <- aggregate(weight ~  group, PlantGrowth, mean) geom_text library(ggplot2)
ggplot(data=PlantGrowth, aes(x=group, y=weight, fill=group)) + geom_boxplot() +
  stat_summary(fun.y=mean, colour="darkred", geom="point", 
               shape=18, size=3,show_guide = FALSE) + 
  geom_text(data = means, aes(label = weight, y = weight + 0.08)) + 0.08
-------------------------------------------------------------------------------------------------------
d1 d2 Total d2 <- d1
d2$x <- "Total" d1 d2 x coord_flip() ggplot()+geom_point(data=d1,aes(x=x,y=v1))+
  geom_boxplot(data=d2,aes(x=x,y=v1))+
  facet_wrap(~group ,
             scales = "free_x") grid.arrange() gridExtra library(gridExtra)

p1<-ggplot()+geom_point(data=subset(d1,group=="g1"),aes(x=x,y=v1))+
  geom_boxplot(data=subset(d2,group=="g1"),aes(x=x,y=v1))+
  coord_flip()+
  facet_grid(group~.)+
  scale_y_continuous(limits=c(-2,2.5))+
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())

p2<-ggplot()+geom_point(data=subset(d1,group=="g2"),aes(x=x,y=v1))+
  geom_boxplot(data=subset(d2,group=="g2"),aes(x=x,y=v1))+
  coord_flip()+
  facet_grid(group~.)+
  scale_y_continuous(limits=c(-2,2.5))+
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())

p3<-ggplot()+geom_point(data=subset(d1,group=="g3"),aes(x=x,y=v1))+
  geom_boxplot(data=subset(d2,group=="g3"),aes(x=x,y=v1))+
  coord_flip()+
  facet_grid(group~.)+
  scale_y_continuous(limits=c(-2,2.5))

grid.arrange(p1,p2,p3)
-------------------------------------------------------------------------------------------------------
fun_mean <- function(x){
  return(data.frame(y=mean(x),label=mean(x,na.rm=T)))}


ggplot(PlantGrowth,aes(x=group,y=weight)) +
geom_boxplot(aes(fill=group)) +
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)
-------------------------------------------------------------------------------------------------------
ggplot(df1, aes(x = factor(f), y = as.numeric(x))) +
  geom_boxplot(size = 2) + 
  geom_boxplot(size = 1, color = "white") library('plyr')
flat <- subset(ddply(df1, .(f), summarise, flat = length(unique(x))), flat == 1)$f
flat <- df1[df1$f %in% flat,]

ggplot(df1, aes(x = factor(f), y = as.numeric(x))) +
  geom_boxplot()
  geom_boxplot(data = flat, size = 2) + 
  geom_boxplot(data = flat, size = 1, color = "white")
-------------------------------------------------------------------------------------------------------
droplevels subset dfMod <- subset(df, c %in% c("x1", "x2"))    
dfMod$c <- droplevels(dfMod$c)
boxplot(x ~ c,data=dfMod) class factor character boxplot class(df) <- c("numeric", "character")
boxplot(x ~ c, subset=c %in% c("x1", "x2"),  data=df)
-------------------------------------------------------------------------------------------------------
show_guide=FALSE geom_boxplot() override.aes= guide_legend() guides() paste() expression() ggplot()+
  geom_boxplot(data=r2df.realtime,aes(as.factor(yr),r2phvrcn,col='model1'),
                                           outlier.shape=3,show_guide=FALSE)+
  geom_boxplot(data=r2df,aes(x=as.factor(yr),y=r2phv,col='model2'),show_guide=FALSE)+
  geom_point(data=r2df,aes(x=as.factor(yr),y=r2recon,col='model3'),shape=6)+
  geom_point(data=r2df.sameyr,aes(x=as.factor(yr),y=r2phvrcn,col='model4'),shape=6)+
  scale_color_manual(values=c('blue','red','green','black'))+
  facet_grid(~mth)+
  guides(color=guide_legend('Model',override.aes=list(shape=c(1,1,6,6))))+
  labs(title=expression(paste("Real-time Ensemble of Cross-Validated Skill Scores 
                                                                (",r^2,")",sep='')))
-------------------------------------------------------------------------------------------------------
sapply(1:50, function(x) {a <- rexp(100,10); 
                          b <- ifelse(mean(a) < median(a), 1,0)
                          pdf(paste0(x,"hist.pdf"))
                          boxplot(a)
                          dev.off()
                          return(b)
                          }
                          )
-------------------------------------------------------------------------------------------------------
graphs figure > data(mtcars)
# par(mfrow=c(row, col))  and "row" is the number of plots you put in a row and same for "col"
> par(mfrow=c(1,2))
> barplot(mtcars$mpg)
> boxplot(mtcars$mpg ~ as.factor(mtcars$cyl))
-------------------------------------------------------------------------------------------------------
yourfunction <- (yourdata) {summary(yourdata$ZScoreA)
boxplot(yourdata$ZScoreA, yourdata$ZScoreB, main="ZScores", xlab="Group", ylab="ZScorevalue", names=c("A","B"))
plot(yourdata$ZScoreA)
library(ggplot2)
qplot(ZScoreA, data=yourdata)
} yourfunction(yourdata1)
yourfunction(yourdata2)
yourfunction(yourdata3)
-------------------------------------------------------------------------------------------------------
set.seed(123)
dat <- data.frame( 
  x=rep( c(1, 2, 3, 4), times=25 ),
  y=rnorm(100), 
  gp=rep(1:2, each=50) 
)

p <- ggplot(dat, aes(x=factor(x), y=y))
p + geom_boxplot(aes(fill = factor(gp))) #example 1 (position = position_dodge(.)) geom_boxplot geom_bar p + geom_boxplot(aes(fill = factor(gp)),position=position_dodge(1))
-------------------------------------------------------------------------------------------------------
interaction Date Date group library(ggplot2)
library(scales)
library(RColorBrewer)

# convert Date to class 'Date'
NDVI_ts$date <- as.Date(NDVI_ts$Date, format = "%d/%m/%Y")

# A possible way to create suitable colours for the boxes
# create one palette of colours for each level of Treatment
# e.g. blue colour for 'HighN', red for 'LowN'
# one colour for each level of Trial.group

# number of levels of Trial.group
n_col <- length(unique(NDVI_ts$Trial.group))

# create blue colours
blues <- brewer.pal(n = n_col, "Blues")
# Warning message:
#   In brewer.pal(n = n_col, "Blues") :
#   minimal value for n is 3, returning requested palette with 3 different levels

# create red
reds <- brewer.pal(n = n_col, "Reds")

# Here I manually pick the first and the last 'blue' and 'red'
# From the plot in the question, it seems like you have more than two levels of Trial.group
# so you should be able to use the 'blues' and 'reds' vectors in scale_fill_manual.

# group boxes by date, Trial.group and Treatment
ggplot(data = NDVI_ts, aes(x = date, y = NDVI)) +
  geom_boxplot(aes(fill = interaction(Trial.group, Treatment),
                   group = interaction(factor(date), Trial.group, Treatment))) + 
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_x_date(breaks = "1 week", labels = date_format("%d-%b")) +
  scale_fill_manual(name = "Treatment",
                    values = c("#FEE0D2", "#DE2D26", "#DEEBF7", "#3182BD"))
  #  scale_fill_manual(values = c(reds, blues))
-------------------------------------------------------------------------------------------------------
position_dodge() p + geom_boxplot(outlier.size = 0, aes(fill=factor(treatment))) + 
  geom_point(aes(color = factor(treatment)), position = position_dodge(width = 0.75))
-------------------------------------------------------------------------------------------------------
library(ggplot2)
library(gridExtra)
ggp <- ggplot(dat)
p1  <- ggp + geom_boxplot(aes(x=m1, y=mse))
p2  <- ggp + geom_boxplot(aes(x=m2, y=mse))
p3  <- ggp + geom_boxplot(aes(x=m3, y=mse))

grid.arrange(p1,p2,p3,nrow=1) library(reshape2)
xx=melt(dat, id.vars="mse", measure.vars=c("m1","m2","m3"),
   variable.name="facet", value.name="facet.variable")
ggplot(xx) + 
   geom_boxplot(aes(x=facet.variable,y=mse)) + 
   facet_grid(~facet,scales="free") + 
   labs(x="") rnorm(...)
-------------------------------------------------------------------------------------------------------
bwplot ggplot ggplot(data = mpg, aes(x = class, y = hwy, fill = factor(year))) +
  geom_boxplot() +
  coord_flip() +
  scale_fill_grey(start = 0.5, end = 0.8) +
  theme_classic()
-------------------------------------------------------------------------------------------------------
ggplot() +
  geom_boxplot(data = dat, aes(x=id, y=val)) +
  geom_point(data = dat, aes(x=id, y=val)) ggplot() +
  geom_point(data = dat, aes(x=id, y=val)) +
  geom_boxplot(data = dat, aes(x=id, y=val))
-------------------------------------------------------------------------------------------------------
layers ## For example:
P$layers <- c(geom_boxplot(), P$layers) insertLayer <- function(P, after=0, ...) {
  #  P     : Plot object
  # after  : Position where to insert new layers, relative to existing layers
  #  ...   : additional layers, separated by commas (,) instead of plus sign (+)

      if (after < 0)
        after <- after + length(P$layers)

      if (!length(P$layers))
        P$layers <- list(...)
      else 
        P$layers <- append(P$layers, list(...), after)

      return(P)
    }
-------------------------------------------------------------------------------------------------------
ggplot2 grid blankRows ## MOCK up confidence interval data in the form:
## ID (level from groupData), low (2.5%) high (97.5%), target
CI_Data<-ddply(hazardData[!is.na(hazardData$HR),],.(ID),summarize,low=min(HR),high=max(HR),target=mean(HR)) geom_boxplot(fill=boxColor,size=0.5, alpha=0.8, notch=F) geom_point(data=CI_Data,aes(x = factor(ID), y = target),shape=22,size=5,fill=boxColor,vjust=0) + 
  geom_errorbar(data=CI_Data,aes(x=factor(ID),y=target,ymin =low, ymax=high),width=0.5)+ ## REQUIRED PACKAGES
require(grid)
require(ggplot2)
require(plyr)

############################################
### CUSTOMIZE APPEARANCE WITH THESE     ####
############################################
blankRows<-2    # blank rows under boxplot
titleSize<-4
dataSize<-4
boxColor<-"pink"
############################################
############################################

## BASIC THEMES (SO TO PLOT BLANK GRID)
theme_grid <- theme(
  axis.line = element_blank(), 
  axis.text.x = element_blank(), 
  axis.text.y = element_blank(),
  axis.ticks = element_blank(), 
  axis.title.x = element_blank(), 
  axis.title.y = element_blank(), 
  axis.ticks.length = unit(0.0001, "mm"),
  axis.ticks.margin = unit(c(0,0,0,0), "lines"), 
  legend.position = "none", 
  panel.background = element_rect(fill = "transparent"), 
  panel.border = element_blank(), 
  panel.grid.major = element_line(colour="grey"), 
  panel.grid.minor = element_line(colour="grey"), 
  panel.margin = unit(c(-0.1,-0.1,-0.1,-0.1), "mm"), 
  plot.margin = unit(c(5,0,5,0.01), "mm")
)

theme_bare <- theme_grid +
  theme(
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank()
  )

## LOAD GROUP DATA AND P values from csv file
groupData<-read.csv(file="groupdata.csv",header=T)

## SYNTHESIZE SOME PLOT DATA - you can load csv instead
## EXPECTS 2 columns - integer for 'ID' matching groupdatacsv
## AND 'HR' Hazard Rate
hazardData<-expand.grid(ID=1:nrow(groupData),HR=1:6)
hazardData$HR<-1.3-runif(nrow(hazardData))*0.7
hazardData<-rbind(hazardData,ddply(groupData,.(Group),summarize,ID=max(ID)+0.1,HR=NA)[,2:3])
hazardData<-rbind(hazardData,data.frame(ID=c(0,-1:(-2-blankRows),max(groupData$ID)+1,max(groupData$ID)+2),HR=NA))

## Make the min/max mean labels
hrlabels<-ddply(hazardData[!is.na(hazardData$HR),],.(ID),summarize,lab=paste(round(mean(HR),2)," (",round(min(HR),2),"-",round(max(HR),2),")",sep=""))

## Points to plot on the log scale
scaledata<-data.frame(ID=0,HR=c(0.2,0.6,0.8,1.2,1.8))

## Pull out the Groups & P values
group_p<-ddply(groupData,.(Group),summarize,P=mean(P_G),y=max(ID)+0.1)

## identify the rows to be highlighted, and 
## build a function to add the layers
hl_rows<-data.frame(ID=(1:floor(length(unique(hazardData$ID[which(hazardData$ID>0)]))/2))*2,col="lightgrey")
hl_rows$ID<-hl_rows$ID+blankRows+1
hl_rect<-function(col="white",alpha=0.5){
  rectGrob(   x = 0, y = 0, width = 1, height = 1, just = c("left","bottom"), gp=gpar(alpha=alpha, fill=col))
}

## DATA FOR TEXT LABELS
RtLabels<-data.frame(x=c(rep(length(unique(hazardData$ID))-0.2,times=3)),
                      y=c(0.6,6,10),
                      lab=c("Hazard Ratio\n(95% CI)","P Value","P Value for\nInteraction"))

LfLabels<-data.frame(x=c(rep(length(unique(hazardData$ID))-0.2,times=2)),
                     y=c(0.5,4),
                     lab=c("Subgroup","No. of\nPatients"))

LegendLabels<-data.frame(x=c(rep(1,times=2)),
                     y=c(0.5,1.8),
                     lab=c("Off-Pump CABG Better","On-Pump CABG Better"))

## BASIC PLOT
haz<-ggplot(hazardData,aes(factor(ID),HR))+ labs(x=NULL, y=NULL)

## RIGHT PANEL WITH LOG SCALE
rightPanel<-haz + 
  apply(hl_rows,1,function(x)annotation_custom(hl_rect(x["col"],alpha=0.4),as.numeric(x["ID"])-0.5,as.numeric(x["ID"])+0.5,-20,20)) +
  geom_segment(aes(x = 2, y = 1, xend = 1.5, yend = 1)) + 
  geom_hline(aes(yintercept=1),linetype=2, size=0.5)+
  geom_boxplot(fill=boxColor,size=0.5, alpha=0.8)+ 
  scale_y_log10() + coord_flip() +
  geom_text(data=scaledata,aes(3,HR,label=HR), vjust=0.5, size=dataSize) +
  geom_text(data=RtLabels,aes(x,y,label=lab, fontface="bold"), vjust=0.5, size=titleSize) +
  geom_text(data=hrlabels,aes(factor(ID),4,label=lab),vjust=0.5, hjust=1, size=dataSize) +
  geom_text(data=group_p,aes(factor(y),11,label=P, fontface="bold"),vjust=0.5, hjust=1, size=dataSize) +
  geom_text(data=groupData,aes(factor(ID),6.5,label=P_S),vjust=0.5, hjust=1, size=dataSize) +
  geom_text(data=LegendLabels,aes(x,y,label=lab, fontface="bold"),hjust=0.5, vjust=1, size=titleSize) +
  geom_point(data=scaledata,aes(2.5,HR),shape=3,size=3) + 
  geom_point(aes(2,12),shape=3,alpha=0,vjust=0) + 
  geom_segment(aes(x = 2.5, y = 0, xend = 2.5, yend = 13)) + 
  geom_segment(aes(x = 2, y = 1, xend = 2, yend = 1.8),arrow=arrow(),linetype=1,size=1) + 
  geom_segment(aes(x = 2, y = 1, xend = 2, yend = 0.2),arrow=arrow(),linetype=1,size=1) + 
  theme_bare

## LEFT PANEL WITH NORMAL SCALE
leftPanel<-haz + 
  apply(hl_rows,1,function(x)annotation_custom(hl_rect(x["col"],alpha=0.4),as.numeric(x["ID"])-0.5,as.numeric(x["ID"])+0.5,-20,20)) +
  coord_flip(ylim=c(0,5.5)) +
  geom_point(aes(x=factor(ID),y=1),shape=3,alpha=0,vjust=0) + 
  geom_text(data=group_p,aes(factor(y),0.5,label=Group, fontface="bold"),vjust=0.5, hjust=0, size=dataSize) +
  geom_text(data=groupData,aes(factor(ID),1,label=Subgroup),vjust=0.5, hjust=0, size=dataSize) +
  geom_text(data=groupData,aes(factor(ID),5,label=NoP),vjust=0.5, hjust=1, size=dataSize) +
  geom_text(data=LfLabels,aes(x,y,label=lab, fontface="bold"), vjust=0.5, hjust=0, size=4, size=titleSize) +
  geom_segment(aes(x = 2.5, y = 0, xend = 2.5, yend = 5.5)) + 
  theme_bare

## PLOT THEM BOTH IN A GRID SO THEY MATCH UP
grid.arrange(leftPanel,rightPanel, widths=c(1,3), ncol=2, nrow=1)
-------------------------------------------------------------------------------------------------------
bx1<-boxplot(pb,las=2,cex.axis=.8)
if(length(bx1$out)!=0){
  ## get the row of each outlier
  out.rows<-sapply(1:length(bx1$out),function(i) which(vv[,bx1$group[i]]==bx1$out[i]))
  text(bx1$group,bx1$out,
     rownames(vv)[out.rows],
     pos=4
  )
}
-------------------------------------------------------------------------------------------------------
reshape2 library(reshape2)
DOData2 <- melt(DOData) library(ggplot2)
ggplot(DOData2) +
  geom_boxplot(aes(y = value, x = Months, colour = variable))
-------------------------------------------------------------------------------------------------------
dtw ggplot() curve meas open.begin open.end FALSE meas curve require(ggplot2)
require(scales)
require(gridExtra)
require(dtw)
require(plyr)

# use ggplot default to smooth the 10 point curve
meas.plot.smooth<-ggplot(meas, aes(x = distance, y = value)) + geom_line() + labs(title = "ggplot smoothed (blue curve)")+geom_smooth()
# use ggplot_build() to get the smoothed points
meas.curve.smooth<-ggplot_build(meas.plot.smooth)$data[[2]]

orig.align<-dtw(meas$value,curve$value,keep=T,step.pattern=symmetric1)
orig.freqs<-count(orig.align$index1)
# reference the matching points (which are effectively dates)
orig.freqs$cumsum<-cumsum(orig.freqs$freq)  

g.10<-ggplot() + geom_line(data = curve, aes(x = date, y = value)) +
  geom_line(aes(x = curve[orig.freqs$cumsum,"date"], y = meas$value),color="red") +
  geom_text(aes(x = curve[orig.freqs$cumsum,"date"], y = meas$value, label=orig.freqs$x),color="red",size=5) + 
  scale_x_date(name = "Month", breaks = date_breaks("months"), labels = date_format("%b")) + 
  labs(title = "Native 10 pt curve - dtw mapped")


smooth.align<-dtw(meas.curve.smooth$y,curve$value,keep=T,step.pattern=symmetric1)
smooth.freqs<-count(smooth.align$index1)
smooth.freqs$cumsum<-cumsum(smooth.freqs$freq)

g.80<-ggplot() + geom_line(data = curve, aes(x = date, y = value)) +
  geom_line(aes(x = curve[smooth.freqs$cumsum,"date"], y = meas.curve.smooth$y),color="red") +
  scale_x_date(name = "Month", breaks = date_breaks("months"), labels = date_format("%b")) + 
  geom_text(aes(x = curve[smooth.freqs$cumsum,"date"], y = meas.curve.smooth$y, label=smooth.freqs$x),color="red",size=3.5,position="jitter") + 
  labs(title = "80 point loess curve - dtw mapped")

grid.arrange(meas.plot.smooth,g.10,g.80,ncol=1) rand.align<-dtw(meas.curve.smooth$ymin+(meas.curve.smooth$ymax-meas.curve.smooth$ymin)*runif(length(meas.curve.smooth$ymin)),curve$value,keep=T,step.pattern=symmetric1)
rand.freqs<-count(rand.align$index1)
rand.freqs$cumsum<-cumsum(rand.freqs$freq)

g.rand<-ggplot() + geom_line(data = curve, aes(x = date, y = value)) +
  geom_line(aes(x = curve[rand.freqs$cumsum,"date"], y = meas.curve.smooth$y),color="red") +
  scale_x_date(name = "Month", breaks = date_breaks("months"), labels = date_format("%b")) + 
  geom_text(aes(x = curve[rand.freqs$cumsum,"date"], y = meas.curve.smooth$y, label=rand.freqs$x),color="red",size=3.5,position="jitter") + 
  labs(title = "Random curve within standard CI - dtw mapped")

grid.arrange(meas.plot.smooth,g.10,g.80,g.rand,ncol=1) geom_smooth() get_scenario<-function(i){
  set.seed(i)
  # create random curve within the CI
  rand.align<-dtw(meas.curve.smooth$ymin+(meas.curve.smooth$ymax-meas.curve.smooth$ymin)*runif(length(meas.curve.smooth$ymin)),curve$value,keep=T,step.pattern=symmetric1)
  rand.freqs<-count(rand.align$index1)
  rand.freqs$cumsum<-cumsum(rand.freqs$freq)
  growth.index<-data.frame(cumsum=curve$index,val=curve$value)
  merged<-merge(growth.index,rand.freqs,by="cumsum")
  return(data.frame(x=merged$cumsum,growth=cumsum(merged$val*merged$freq),scenario=i))  
}

scenario.set <- ldply(lapply(1:1000,function(l)get_scenario(l)), data.frame)

g.s<-ggplot(scenario.set,aes(x,growth)) + 
      geom_line(aes(,group=scenario,color=scenario),alpha=0.25) + 
      scale_colour_gradient(low = "yellow", high = "orangered") +
      xlab("Days from start") + ylab("Cumulative Growth")
g.xmax<-max(scenario.set$x)  # get the final day (or set to another day)
g.xmin<-g.xmax-30            # thirty day window from end
b<-ggplot_build(g.s)
build.data<-b$data[[1]]
ylims<-build.data[build.data$x<=g.xmax & build.data$x>=g.xmin,]$y

g.subplot<-g.s+geom_point(aes(x,growth,color=scenario),alpha=0.25,size=5,position="jitter")+coord_cartesian(xlim=c(g.xmin,g.xmax),ylim=c(min(ylims),max(ylims)))

grid.arrange(meas.plot.smooth,g.s,g.subplot,ncol=1) g.s<-ggplot(scenario.set,aes(x,growth)) + 
      geom_line(aes(,group=scenario,color=scenario),alpha=0.25) + 
      scale_colour_gradient(low = "yellow", high = "orangered") +
      xlab("Days from start") + ylab("Cumulative Growth")
g.xmax<-max(scenario.set$x)  # get the final day (or set to another day)
g.xmin<-g.xmax-50            # thirty day window from end
b<-ggplot_build(g.s)
build.data<-b$data[[1]]
ylims<-build.data[build.data$x<=g.xmax & build.data$x>=g.xmin,]$y

g.subplot<-g.s+geom_point(aes(x,growth,color=scenario),alpha=0.25,size=5,position="jitter")+coord_cartesian(xlim=c(g.xmin,g.xmax),ylim=c(min(ylims),max(ylims)))

grid.arrange(meas.plot.smooth,g.s,g.subplot,ncol=1)    

g.box<-ggplot(build.data)+
  geom_boxplot(aes(x,y,group=cut(x,max(x)/7),fill=cut(x,max(x)/7)),alpha=0.5)+ # bucket by group
  theme(legend.position="none")+
  coord_cartesian(xlim=c(g.xmin,g.xmax),ylim=c(min(ylims)-50,max(ylims)+50))

build.data.sum<-ddply(build.data,.(x),summarise,ymax=max(y),ymin=min(y),mean=mean(y))

g.spots<-ggplot(build.data)+
  geom_point(aes(x,y,color=group),size=10,alpha=0.25,position="jitter")+
  theme(legend.position="none")+scale_colour_gradient(low = "yellow", high = "orangered")+
  geom_ribbon(data=build.data.sum,aes(x,ymax=ymax,ymin=ymin),alpha=0.25)+
  coord_cartesian(xlim=c(g.xmax-50,g.xmax+1),ylim=c(min(ylims)-50,max(ylims)+50))+geom_smooth(aes(x,y),n=max(build.data$x))

grid.arrange(g.box,g.spots,ncol=1)
-------------------------------------------------------------------------------------------------------
library(ggplot2)
library(plyr)
data1 <- ddply(data1,.(Physicians_Out,Physicians_In),transform,label = length(share))
ggplot(data1,aes(x=Physicians_In,y=share,fill=Physicians_In))+ 
    geom_boxplot() + 
    stat_sum_single(mean) +
    facet_grid(.~Physicians_Out,labeller=label_both,scales='free_x') +
    stat_summary(fun.y=min,aes(label=paste0('N=',label)),geom='text',col='blue',cex=5)
-------------------------------------------------------------------------------------------------------
open <- subset(data1, Physicians_Out == "Open")
restr <- subset(data1, Physicians_Out == "Restricted")
closed <- subset(data1, Physicians_Out == "Closed") labs.open <- paste(gsub("/","-\n",names(table(open$Physicians_In)),fixed=T),
               "\n(N=",table(open$Physicians_In),")",sep="")
labs.restr <- paste(gsub("/","-\n",names(table(restr$Physicians_In)),fixed=T),
               "\n(N=",table(restr$Physicians_In),")",sep="")
labs.closed <- paste(gsub("/","-\n",names(table(closed$Physicians_In)),fixed=T),
               "\n(N=",table(closed$Physicians_In),")",sep="") mytheme <- theme(
  axis.title.y = element_blank(),
  axis.text.y = element_blank(),
  axis.ticks.y = element_blank()
) p1 <- ggplot(open,aes(x=Physicians_In,y=share,fill=Physicians_In)) +
  geom_boxplot() + stat_sum_single(mean) + 
  geom_jitter(position = position_jitter(width = .2),color="blue") +
  guides(fill=FALSE) +
  ggtitle(paste("Physician Access (Out): Open\nN = (", nrow(open), ")\n")) +
  scale_y_continuous("Gammagard Share",labels=percent) +
  scale_x_discrete("\nPhysician Access (In Hospital)",labels=labs.open) +
  theme_bw()

p2 <- ggplot(restr,aes(x=Physicians_In,y=share,fill=Physicians_In)) +
  geom_boxplot() + stat_sum_single(mean) + 
  geom_jitter(position = position_jitter(width = .2),color="blue") +
  guides(fill=FALSE) +
  ggtitle(paste("Physician Access (Out): Restricted\nN = (", nrow(restr), ")\n")) +
  scale_x_discrete("\nPhysician Access (In Hospital)",labels=labs.restr) +
  theme_bw() + mytheme

p3 <- ggplot(closed,aes(x=Physicians_In,y=share,fill=Physicians_In)) +
  geom_boxplot() + stat_sum_single(mean) + 
  geom_jitter(position = position_jitter(width = .2),color="blue") +
  guides(fill=FALSE) +
  ggtitle(paste("Physician Access (Out): Closed\nN = (", nrow(closed), ")\n")) +
  scale_x_discrete("\nPhysician Access (In Hospital)",labels=labs.closed) +
  theme_bw() + mytheme

library(gridExtra)

grid.arrange(p1, p2, p3, ncol=3)
-------------------------------------------------------------------------------------------------------
categs = sample(LETTERS[1:3], 120, TRUE)
y = c(rnorm(40), rnorm(40, 3, 2), rnorm(40, 5, 3))

# example dataset
dados = data.frame(categs, y)

require(ggplot2)
ggplot(dados) + geom_boxplot(aes(x = categs, y = y))

#  categs          y
#1      B  0.7392673
#2      B -0.1694076
#3      A -2.3804024
#4      B  0.5999949
#5      A  0.5816400
#6      A  2.1263669
-------------------------------------------------------------------------------------------------------
geom_dotplot() binaxis="y" counts stackdir="center" dotsize= ggplot(df,aes(class,count))+geom_boxplot()+
  geom_dotplot(aes(fill=class),binaxis="y",stackdir="center",dotsize=0.5)
-------------------------------------------------------------------------------------------------------
bquote(atop("first line",
            "second line" ~ x ^ 2)) bquote expression demo(plotmath) atop boxplot boxplot(data, main = '')
title(bquote(atop("first line", "second line" ~ x ^ 2)))
-------------------------------------------------------------------------------------------------------
df <- data.frame(
  Phase = factor(c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9)),
  HR = c(67, 70, 70, 73, 82, 83, 104, 106, 73, 86, 74, 65, 86, 82, 94, 108, 73, 81, 67, 68),
  Gender = factor(c("female", "male", "female", "male", "female", "male", "female", "male", "female", "male", "female", "male", "female", "male", "female", "male", "female", "male", "female", "male")),
  ) df2 = subset(df,df$Gender=="female") graphics 
boxplot(HR~Phase, data=df2,main="Heart Rate of Females",xlab="Phase",ylab="Heart Rate (beats/min)",ylim=c(60,130),par(font.lab=4,font.main=2))
-------------------------------------------------------------------------------------------------------
ifelse() element_text() ggplot(iris,aes(Species,Petal.Length))+geom_boxplot()+
  theme(axis.text.x=
          element_text(face=ifelse(levels(iris$Species)=="setosa","bold","italic"))) element_text() ggplot(iris,aes(Species,Petal.Length))+geom_boxplot()+
 theme(axis.text.x = element_text(face=c("bold","italic","bold"),
                                   size=c(11,12,13)))
-------------------------------------------------------------------------------------------------------
X1 X2 X3 Z1 scale_x_discrete() limits= levels() siteno Z1 ggplot(xData, aes(x = siteno , y = V1)) +
  stat_summary(fun.y=mean, colour="red", geom="point") +
  geom_boxplot (aes(fill=siteno), alpha=.5, outlier.colour = "dark gray", outlier.size = 1) +
  geom_boxplot(data=zData, aes(x = siteno , y = V1))+
  scale_x_discrete(limits=c(levels(xData$siteno),"Z1"))
-------------------------------------------------------------------------------------------------------
text pos attach(mtcars)
par(mfrow=c(2,2))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
boxplot(wt, main="Boxplot of wt")
txt <- structure(c("am", "carb", "cyl", "disp", "drat", "gear", "hp", 
                   "mpg", "qsec", "vs", "wt", "this"), .Dim = 3:4)

plot.new()
sapply(1:4, function(i) text(i/4, .5, paste(txt[,i],collapse='\n'), pos=4)) attach(mtcars)
par(mfrow=c(2,2))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
boxplot(wt, main="Boxplot of wt")
txt <- structure(c("am", "carb", "cyl", "disp", "drat", "gear", "hp", 
                   "mpg", "qsec", "vs", "wt", "this"), .Dim = 3:4)

plot.new()
sapply(1:4, function(i) text(i/4, (1:3)/3, rev(txt[,i]), pos=4))
-------------------------------------------------------------------------------------------------------
v <- stack(mymatrix[-1])
v$Treatment <- mymatrix$Treatment
boxplot(values~Treatment+ind, v) data.frame values ind
1      13  c1
2      93  c1
...
11     82  c1
12     33  c5
...
22      9  c5
23     96  c3
...
55     25 c12 Treatment reshape v <- melt(mymatrix, id.vars="Treatment")
boxplot(value~Treatment+variable, v)
-------------------------------------------------------------------------------------------------------
ggplot2 reshape2 str(mymatrix)
'data.frame':   11 obs. of  6 variables:
... dfm <- melt(mymatrix, id.vars="Treatment") ggplot2 Treatment variable ggplot(dfm, aes(x=Treatment, y=value, fill=variable)) + 
  geom_boxplot()
-------------------------------------------------------------------------------------------------------
na.rm=TRUE tapply Alltubes <- tapply(datIn$Material.loss.interval,
                   list(as.factor(datIn$Measurement.location),
                        as.factor(datIn$Tube.number)),
                   sd, na.rm=TRUE) par(mfrow=c(2,2), mar=c(4,4,1,1), oma=c(1,1,1,1))

boxplot(Alltubes, names=colnames(Alltubes), xlab="Tube numbers",
        ylab="standard deviation")

boxplot(t(Alltubes), names=rownames(Alltubes), 
        xlab="Measurement locations", ylab="standard deviation")

matplot(colnames(Alltubes), t(Alltubes), xlab="Tube numbers", 
        ylab="standard deviation", type="b", lty=1, pch=19)

matplot(rownames(Alltubes), Alltubes, xlab="Measurement locations", 
        ylab="standard deviation", type="b", lty=1, pch=19)
-------------------------------------------------------------------------------------------------------
library(rgdal)
library(ggplot2)
library(RColorBrewer)
library(reshape)
library(gridExtra)

setwd("<directory with all your files...>")

get.centroids = function(x){   # extract centroids from polygon with given ID
  poly = wmap@polygons[[x]]
  ID   = poly@ID
  centroid = as.numeric(poly@labpt)
  return(c(id=ID, c.long=centroid[1], c.lat=centroid[2]))
}

wmap   <- readOGR(dsn=".", layer="ne_110m_admin_0_countries")
wyield <- read.csv(file = "AllWorldCountries_CCShocksGTAP.csv", header=TRUE)
wyield <- transform(wyield, ID_1 = substr(ID_1,3,10))  #strip leading "TR"

# wmap@data and wyield have common, unique field: name
wdata  <- data.frame(id=rownames(wmap@data),name=wmap@data$name)
wdata  <- merge(wdata,wyield, by="name")
labs   <- do.call(rbind,lapply(1:17,get.centroids)) # extract polygon IDs and centroids from shapefile
wdata  <- merge(wdata,labs,by="id")
wdata[c("c.lat","c.long")] <- sapply(wdata[c("c.lat","c.long")],function(x) as.numeric(as.character(x)))

wmap.df <- fortify(wmap)                # data frame for world map
wmap.df <- merge(wmap.df,wdata,by="id") # merge data to fill polygons

palette <- brewer.pal(11,"Spectral")    # ColorBrewewr.org spectral palette, 11 colors
ggmap   <- ggplot(wmap.df, aes(x=long, y=lat, group=group))
ggmap   <- ggmap + geom_polygon(aes(fill=AVG))
ggmap   <- ggmap + geom_path(colour="grey50", size=.1)
ggmap   <- ggmap + geom_text(aes(x=c.long, y=c.lat, label=ID_1),size=3)
ggmap   <- ggmap + scale_fill_gradientn(name="% Change",colours=rev(palette))
ggmap   <- ggmap + theme(plot.title=element_text(face="bold"),legend.position="left")
ggmap   <- ggmap + coord_fixed()
ggmap   <- ggmap + labs(x="",y="",title="Average Yield Impacts across SRES Scenarios (% Change)")
ggmap   <- ggmap + theme(plot.margin=unit(c(0,0.03,0,0.05),units="npc"))
ggmap

box.df       <- wdata[order(as.numeric(wdata$ID_1)),]    # order by ID_1
box.df$label <- with(box.df, paste0(name_long," [",ID_1,"]")) # create labels for boxplot
box.df       <- melt(box.df,id.vars="label",measure.vars=c("A1B","A1BLow","A1F","A1T","A2","B1","B1Low","B2"))
box.df$label <- factor(box.df$label,levels=unique(box.df$label)) # need this so orderin is maintained in ggplot

ggbox   <- ggplot(box.df,aes(x=label, y=value))
ggbox   <- ggbox + geom_boxplot(fill="grey", outlier.colour = "blue", outlier.shape = 16, outlier.size = 4)
ggbox   <- ggbox + stat_summary(fun.y=mean, geom="point", shape=21, size= 4, color= "red")
ggbox   <- ggbox + coord_flip()
ggbox   <- ggbox + labs(x="", y="% Change", title="Distribution of Yield Impacts by GTAP region")
ggbox   <- ggbox + theme(plot.title=element_text(face="bold"), axis.text=element_text(color="black"))
ggbox   <- ggbox + theme(plot.margin=unit(c(0,0.03,0,0.0),units="npc"))
ggbox

grid.newpage()
pushViewport(viewport(layout=grid.layout(2,1,heights=c(0.40,0.60))))
print(ggmap, vp=viewport(layout.pos.row=1,layout.pos.col=1))
print(ggbox, vp=viewport(layout.pos.row=2,layout.pos.col=1)) ggplot coord_fixed() ## re-order the shapefile
wyield <- cbind(id=rownames(wmap@data),wyield) wmap@data wyield wyield name wmp.df id wdata  <- data.frame(id=rownames(wmap@data),name=wmap@data$name)
wdata  <- merge(wdata,wyield, by="name")
...
wmap.df <- fortify(wmap)                # data frame for world map
wmap.df <- merge(wmap.df,wdata,by="id") # merge data to fill polygons
-------------------------------------------------------------------------------------------------------
Final.Result str() > str(df2)
'data.frame':   66 obs. of  3 variables:
 $ Location    : Factor w/ 17 levels "BOON KENG RD BLK 6 (DS)",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Parameter   : Factor w/ 54 levels "Aluminium","Ammonia (as N)",..: 37 37 37 37 37 37 37 37 37 37 ...
 $ Final.Result: Factor w/ 677 levels "< 0.0005","< 0.001",..: 645 644 654 653 647 643 647 647 646 646 ... df2 "< 0.0005","< 0.001" df2$Final.Result2<-as.numeric(as.character(df2$Final.Result))
ggplot(df2,aes(x = factor(Location),y=Final.Result2)) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
border= plot(df.agg$Group.1, df.agg$x, border="red") boxplot() boxplot(df.agg$x~df.agg$Group.1, , border="red")
-------------------------------------------------------------------------------------------------------
sapply(names(mydata_x)[-1], function(name){
  # Histogram
  h.name <- paste0("hist_mydata_x_", name)
  png(paste0(h.name,".jpg"))
  hist(mydata_x[,name], main=h.name, xlab=name)
  dev.off()
  # Boxplot
  b.name <- paste0("boxplot_mydata_x_", name)
  png(paste0(b.name, ".jpg"))
  boxplot(mydata_x[,name], main=b.name, xlab=name)
  dev.off()
  # Density
  d.name <- paste0("density_mydata_x_", name)
  png(paste0(d.name, ".jpg"))
  plot(density(mydata_x[,name]), main=d.name)
  dev.off()
}) mydata_x sapply(names(mydata_x)[-1], function(name){...}) mydata_x sex png() hist_mydata_x_height_chad1.jpg
-------------------------------------------------------------------------------------------------------
par par(font.axis = 2) # 2 means 'bold'
boxplot(1:10) axis boxplot(1:10, yaxt = "n") # suppress y axis
axis(side = 2, font = 2)  # 'side = 2' means y axis par(font.axis = 1)
-------------------------------------------------------------------------------------------------------
tt[[1]] unlist(tt) tt boxplot(param~grp,data=snp,horizontal=TRUE,names=tt[[1]]) names tt
-------------------------------------------------------------------------------------------------------
par(mfrow=c(1, 2))
boxplot(as.numeric(values) ~ s1,
        data=subset(data, data$s1=="AA" | data$s1=="AC"))
stripchart(as.numeric(values) ~ s1,
           data=data, add=TRUE, vertical=TRUE, pch=1, lwd=1)

boxplot(as.numeric(values) ~ s2,
        data=subset(data, data$s1=="AA" | data$s1=="AG"))
stripchart(as.numeric(values) ~ s2,
           data=data, add=TRUE, vertical=TRUE, pch=1, lwd=1)
-------------------------------------------------------------------------------------------------------
melt reshape2 library(reshape2)
library(ggplot2)
df$highlight <- c(TRUE, rep(FALSE, nrow(df) - 1L))  # tag first row as interesting
df.2 <- melt(df)  # convert df to long format
ggplot(subset(df.2, !highlight), aes(x=variable, y=value)) + 
  geom_boxplot() + scale_y_log10() +
  geom_point(                               # add the highlight points
    data=subset(df.2, highlight), 
    aes(x=variable, y=value), 
    color="red", size=5
  ) df <- read.table(text="    CDH     1KG     NHLBI
CDH 301     688     1762
RS0 204     560     21742
RS1 158     1169    1406
RS2 182     1945    1467
RS3 256     2371    1631
RS4 198     580     1765
RS5 193     524     1429
RS6 139     2551    1469
RS7 188     702     1584
RS8 142     4311    1461
RS9 223     916     1591
RS10 250    794     1406
RS11 185    539     1270
RS12 228    641     1786
RS13 152    557     1677
RS14 225    1970    1619
RS15 196    458     1543
RS16 203    2891    1528
RS17 221    1542    1780
RS18 258    1173    1850
RS19 202    718     1651
RS20 191    6314    1564", header=T)
-------------------------------------------------------------------------------------------------------
p <- qplot(wt, mpg, data = mtcars)
p <- p + geom_smooth(aes(group=cyl), method="lm", se=FALSE)
p <- p + facet_grid(cyl~.)
print(p) p <- ggplot(data,aes(factor(country),price)) + 
  geom_violin(aes(fill=country,trim=FALSE)) + 
  geom_boxplot(aes(fill=country),position=position_dodge(0.9),width=.1) + 
  geom_jitter(alpha=0.5) + 
  facet_wrap(organic~location+fruit) +
  xlab("Fruit") +
  ylab("Price") +
  labs(fill="country")
p <- p + geom_smooth(aes(group=1,color=country), method="lm", se=FALSE)
p
-------------------------------------------------------------------------------------------------------
df boxplot(Score~Gender,data=df) library(ggplot2)
ggplot(df) + geom_boxplot(aes(x=Gender, y=Score, color=Gender))
-------------------------------------------------------------------------------------------------------
# If the data looks like this:
> str(DF_1)
'data.frame':   6 obs. of  3 variables:
 $ V1: Factor w/ 6 levels "A","B","C","D",..: 1 2 3 4 5 6
 $ V2: Factor w/ 2 levels "Number.of.Reads.After",..: 2 2 2 1 1 1
 $ V3: int  35453882 34100584 42248349 15397090 10999641 13304229

ggplot(data = DF_1, aes(x = "X Label", y = V3)) + geom_boxplot()
-------------------------------------------------------------------------------------------------------
