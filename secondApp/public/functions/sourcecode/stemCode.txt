options(width=as.integer(system("stty -a | head -n 1 | awk '{print $7}' | sed 's/;//'", intern=T)))
-------------------------------------------------------------------------------------------------------
jpeg("/tmp/foo%02d.jpg")
for (i in 1:5) {
  my.plot(i)
}
dev.off() make.mov <- function(){
     unlink("plot.mpg")
     system("convert -delay 0.5 plot*.jpg plot.mpg")
}
-------------------------------------------------------------------------------------------------------
system()
-------------------------------------------------------------------------------------------------------
options(showWarnCalls=T, showErrorCalls=T) options(repos=c("http://cran.cnr.Berkeley.edu","http://cran.stat.ucla.edu")) Sys.setenv(R_HISTSIZE='100000') if f = pipe("uname")
if (.Platform$GUI == "X11" && readLines(f)=="Darwin") {
  # http://www.rforge.net/CarbonEL/
  library("grDevices")
  library("CarbonEL")
  options(device='quartz')
  Sys.unsetenv("DISPLAY")
}
close(f); rm(f) library(plyr)
library(stringr)
library(RColorBrewer)
if (file.exists("~/util.r")) {
  source("~/util.r")
} if ( (numcol <-Sys.getenv("COLUMNS")) != "") {
  numcol = as.integer(numcol)
  options(width= numcol - 1)
} else if (system("stty -a &>/dev/null") == 0) {
  # mac specific?  probably bad in the R GUI too.
  numcol = as.integer(sub(".* ([0-9]+) column.*", "\\1", system("stty -a", intern=T)[1]))
  if (numcol > 0)
    options(width=  numcol - 1 )
}
rm(numcol) .Rprofile util.r
-------------------------------------------------------------------------------------------------------
ps <-readline(prompt="get the password in ") mypass <- system("zenity --entry --hide-text",intern=TRUE)
-------------------------------------------------------------------------------------------------------
Sweave.engine ~/Library/TeXShop/Engines/ #!/usr/bin/env Rscript
args <- commandArgs(T)

fname <- strsplit(args[1],'\\.')[[1]][2]

Sweave(paste(fname,'Rnw',sep='.'))

system(paste('pdflatex',paste(fname,'tex',sep='.'))) % !TEX TS-program = Sweave
-------------------------------------------------------------------------------------------------------
sink() file() R CMD BATCH file.R write.table() write.csv() R> X <- rnorm(100)
R> summary(X)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 -2.480  -0.618  -0.223  -0.064   0.609   2.440 
R> write.table(matrix(summary(X)[c(1,3,6)], nrow=1), \
               file="/tmp/foo.txt", col.names=FALSE, row.names=FALSE)
R> system("cat /tmp/foo.txt")
-2.48 -0.223 2.44
R> summary()
-------------------------------------------------------------------------------------------------------
as.numeric((gsub("[^0-9]+", "", system(paste("wc -l ", file_name, sep=""), intern=T)))) function(fname){sapply(read.table(fname, header=T, nrows=5), class)} system.time(read.table("tdata01.txt.gz", sep=","))
=>  user  system elapsed 
    6.173   0.245   **6.450** 

system.time(load("tdata01.RData"))
=> user  system elapsed 
    0.912   0.006   **0.912**
-------------------------------------------------------------------------------------------------------
system() list.files() dir() file.copy
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
C:\Program Files\Java\jre6\bin\ C:\Program Files\R\R-2.10.1\bin\ C:\Program Files\R java -version system("java -version") JAVA_HOME C:\Sun\SDK\
-------------------------------------------------------------------------------------------------------
C:\>java -version
java version "1.6.0_13"
Java(TM) SE Runtime Environment (build 1.6.0_13-b03)
Java HotSpot(TM) Client VM (build 11.3-b02, mixed mode, sharing) C:\>set path
Path=;C:\JDKs\jdk1.6.0_13\bin; > system("java -version")
java version "1.6.0_15"
Java(TM) SE Runtime Environment (build 1.6.0_15-b03)
Java HotSpot(TM) Client VM (build 14.1-b02, mixed mode, sharing)
>
-------------------------------------------------------------------------------------------------------
%windir%\SysWoW64\cmd.exe java -version > system("java -version")
java version "1.6.0_20"
Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
Java HotSpot(TM) Client VM (build 16.3-b01, mixed mode, sharing) > system("java -version")
java version "1.6.0_18"
Java(TM) SE Runtime Environment (build 1.6.0_18-b07)
Java HotSpot(TM) 64-Bit Server VM (build 16.0-b13, mixed mode) shell(
    "java -version",
    shell = file.path(Sys.getenv("windir"),"SysWoW64/cmd.exe")
)
java version "1.6.0_20"
Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
Java HotSpot(TM) Client VM (build 16.3-b01, mixed mode, sharing)
-------------------------------------------------------------------------------------------------------
system("clear")
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
help(system) R> system("echo Hello")
Hello 
R> system("echo Hello", intern=TRUE)
[1] "Hello"
R>
-------------------------------------------------------------------------------------------------------
system Sys.*() ls x <- system("ls *.csv", intern=TRUE)
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
/ C: cmd.1 <- shQuote("C:Python26/python.exe C:/Documents and Settings/USER/Desktop/UGA New Website", type="cmd")
system(cmd.1)
-------------------------------------------------------------------------------------------------------
cmd.1 <- shQuote('C:\\Python26\\python.exe "C:\\Documents and Settings\\USER\\Desktop\\UGA New Website"', type="cmd")
system(cmd.1) \ \\ / cd
-------------------------------------------------------------------------------------------------------
<<>>
source('/path/to/script.r')
@ Sweave('/path/to/report.Rnw'); system('pdflatex report.tex')
-------------------------------------------------------------------------------------------------------
system system("aplay -t wav /usr/share/sounds/phone.wav") # for auditive bell (an I mean it literary)
system("zenity --title=\"R script info\" --text=\"Script has finished with zero exit status\" --info") # for GTK dialog system sudo rm -rf *.*
-------------------------------------------------------------------------------------------------------
system()
-------------------------------------------------------------------------------------------------------
.First .Last graphics.off() .Last <- function() {
    graphics.off()
    save.image()  # optionally, you can define specific file/folder
    system(paste("cowsay", "Goodbye @ ", date()))  # if you're running GNU/Linux ___________________________________ 
< Goodbye @ Wed Aug 4 22:49:46 2010 >
 ----------------------------------- 
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
-------------------------------------------------------------------------------------------------------
mpack /tmp/foo.RData system("mpack -s Data /tmp/foo.RData you@some.where.com")
-------------------------------------------------------------------------------------------------------
#! /usr/bin/env r

require(Hmisc)

cat(argv[1], "\n") 2>/dev/null #! /usr/bin/perl

use warnings;
use strict;

open my $command_out, "-|", "./prog.r foo 2>/dev/null"
  or die "$0: could not start prog.r";

while (<$command_out>) {
  print "got: $_";
} qx// #! /usr/bin/perl

use warnings;
use strict;

(my $command_out = `./prog.r foo 2>/dev/null`) =~ s/^/got: /mg;
print $command_out; system #! /usr/bin/perl

use warnings;
use strict;

system("./prog.r foo 2>/dev/null") == 0
  or warn "$0: prog.r exited " . ($? >>8); #! /usr/bin/perl

use warnings;
use strict;

my $pid = open my $command_out, "-|";
die "$0: fork: $!" unless defined $pid;

if ($pid == 0) {
  # child
  open STDERR, ">", "/dev/null" or die "$0: open: $!";
  exec "./prog.r", "foo & bar"  or exit 1;  # STDERR silent now
}

while (<$command_out>) {
  print "got: $_";
}

close $command_out or warn "$0: prog.r exited " . ($? >> 8); "-|" fork STDERR /dev/null exec close $command_out STDERR STDOUT 2>&1 open my $command_out, "-|", "./prog.r foo 2>&1" or die; dup if ($pid == 0) {
  # child
  open STDERR, ">&", \*STDOUT  or die "$0: open: $!";
  exec "./prog.r", "foo & bar" or die "$0: exec: $!";
} open >& close $command_out
-------------------------------------------------------------------------------------------------------
head() tail() tail(head)) system("more", input=as.character(rnorm(1000))) input more myDF <- data.frame(a=rnorm(1000), b=rnorm(1000))

more <- function(dataFrame) {
  myTempFile <- tempfile()
  write.csv(dataFrame, file=myTempFile, row.names = F)
  system(paste("more", myTempFile))
}

more(myDF)
-------------------------------------------------------------------------------------------------------
more more<-function(x){
    tempfile()->fn;
    sink(fn);print(x);sink();
    system(sprintf('more %s',fn));
    system(sprintf('rm %s',fn));
} less less<-function(x){
    tempfile()->fn;
    sink(fn);print(x);sink();
    system(sprintf('less %s',fn));
    system(sprintf('rm %s',fn));
} edit
-------------------------------------------------------------------------------------------------------
system("ftp ...") # where ... is the argument list
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
r ~/svn/littler/examples$ ls -l . | awk '!/^total/ {print $5}' 
87
1747
756
988
959
871
~/svn/littler/examples$ ls -l . | awk '!/^total/ {print $5}' | ./fsizes.r 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
     87     785     915     901     981    1750 

  The decimal point is 3 digit(s) to the right of the |

  0 | 1
  0 | 89
  1 | 00
  1 | 7

~/svn/littler/examples$ cat fsizes.r 
#!/usr/bin/r -i

fsizes <- as.integer(readLines())
print(summary(fsizes))
stem(fsizes) summary() median() mean() stem median() mean()
-------------------------------------------------------------------------------------------------------
system() help(system)
-------------------------------------------------------------------------------------------------------
aes(colour=que_id) _ NULL if (width > 0) p1 <- ggplot(plot_info, aes(elevation, area))
p1 <- p1 + geom_point(aes(colour=que_id))


# Add a name that is easier for humans to read than the variable name
p1 <- p1 + scale_colour_brewer(name="Que ID")


# Or, replace the underscore with the appropriate LaTeX escape sequence
p1 <- p1 + scale_colour_brewer(name="que\\textunderscore id") % $ { } ^ tikzSanitizeCharacters tikzReplacementCharacters # Add underscores to the sanitization list
options(tikzSanitizeCharacters = c('%','$','}','{','^', '_'))
options(tikzReplacementCharacters = c('\\%','\\$','\\}','\\{',
  '\\^{}', '\\textunderscore'))


# Turn on string sanitization when starting the plotting device
tikz('myPlot.tex', standAlone = TRUE, sanitize = TRUE)
print(p1)
dev.off() system() width NULL
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
system() Rscript.exe
-------------------------------------------------------------------------------------------------------
filename = '' # set archive filename
loc = ''      # set location, if not done before
setwd(loc)
zipCmd = paste("zip -r ", filename, " .", sep='')
system(zipCmd, invisible = TRUE)
-------------------------------------------------------------------------------------------------------
files path list.files tar() list.files() tar() tar2() list.files() tar2("foo.tar", path = ".", pattern = "bar.csv", recursive = FALSE, 
     full.names = FALSE, all.files = FALSE) all.files = FALSE "bar.csv" recursive = FALSE full.names = FALSE TRUE list.files() "./bar.csv" tar() FALSE list.files() "bar.csv" ^ $ tar2("foo.tar", path = ".", pattern = "^bar.csv$", recursive = FALSE, 
     full.names = FALSE, all.files = FALSE) tar() tar2() tar2 <- function (tarfile, files = NULL, compression = c("none", "gzip", 
    "bzip2", "xz"), compression_level = 6, tar = Sys.getenv("tar"),
    pattern = NULL, all.files = TRUE, recursive = TRUE, full.names = TRUE) 
{
    if (is.character(tarfile)) {
        TAR <- tar
        if (nzchar(TAR) && TAR != "internal") {
            flags <- switch(match.arg(compression), none = "cf", 
                gzip = "zcf", bzip2 = "jcf", xz = "Jcf")
            cmd <- paste(TAR, flags, shQuote(tarfile), paste(shQuote(files), 
                collapse = " "))
            return(invisible(system(cmd)))
        }
        con <- switch(match.arg(compression), none = file(tarfile, 
            "wb"), gzip = gzfile(tarfile, "wb", compress = compression_level), 
            bzip2 = bzfile(tarfile, "wb", compress = compression_level), 
            xz = xzfile(tarfile, "wb", compress = compression_level))
        on.exit(close(con))
    }
    else if (inherits(tarfile, "connection")) 
        con <- tarfile
    else stop("'tarfile' must be a character string or a connection")
    files <- list.files(files, recursive = recursive, all.files = all.files, 
        full.names = full.names, pattern = pattern)
    bf <- unique(dirname(files))
    files <- c(bf[!bf %in% c(".", files)], files)
    for (f in unique(files)) {
        info <- file.info(f)
        if (is.na(info$size)) {
            warning(gettextf("file '%s' not found", f), domain = NA)
            next
        }
        header <- raw(512L)
        if (info$isdir && !grepl("/$", f)) 
            f <- paste(f, "/", sep = "")
        name <- charToRaw(f)
        if (length(name) > 100L) {
            if (length(name) > 255L) 
                stop("file path is too long")
            s <- max(which(name[1:155] == charToRaw("/")))
            if (is.infinite(s) || s + 100 < length(name)) 
                stop("file path is too long")
            warning("storing paths of more than 100 bytes is not portable:\n  ", 
                sQuote(f), domain = NA)
            prefix <- name[1:(s - 1)]
            name <- name[-(1:s)]
            header[345 + seq_along(prefix)] <- prefix
        }
        header[seq_along(name)] <- name
        header[101:107] <- charToRaw(sprintf("%07o", info$mode))
        uid <- info$uid
        if (!is.null(uid) && !is.na(uid)) 
            header[109:115] <- charToRaw(sprintf("%07o", uid))
        gid <- info$gid
        if (!is.null(gid) && !is.na(gid)) 
            header[117:123] <- charToRaw(sprintf("%07o", gid))
        size <- ifelse(info$isdir, 0, info$size)
        header[137:147] <- charToRaw(sprintf("%011o", as.integer(info$mtime)))
        if (info$isdir) 
            header[157L] <- charToRaw("5")
        else {
            lnk <- Sys.readlink(f)
            if (is.na(lnk)) 
                lnk <- ""
            header[157L] <- charToRaw(ifelse(nzchar(lnk), "2", 
                "0"))
            if (nzchar(lnk)) {
                if (length(lnk) > 100L) 
                  stop("linked path is too long")
                header[157L + seq_len(nchar(lnk))] <- charToRaw(lnk)
                size <- 0
            }
        }
        header[125:135] <- charToRaw(sprintf("%011o", as.integer(size)))
        header[258:262] <- charToRaw("ustar")
        header[264:265] <- charToRaw("0")
        s <- info$uname
        if (!is.null(s) && !is.na(s)) {
            ns <- nchar(s, "b")
            header[265L + (1:ns)] <- charToRaw(s)
        }
        s <- info$grname
        if (!is.null(s) && !is.na(s)) {
            ns <- nchar(s, "b")
            header[297L + (1:ns)] <- charToRaw(s)
        }
        header[149:156] <- charToRaw(" ")
        checksum <- sum(as.integer(header))%%2^24
        header[149:154] <- charToRaw(sprintf("%06o", as.integer(checksum)))
        header[155L] <- as.raw(0L)
        writeBin(header, con)
        if (info$isdir || nzchar(lnk)) 
            next
        inf <- file(f, "rb")
        for (i in seq_len(ceiling(info$size/512L))) {
            block <- readBin(inf, "raw", 512L)
            writeBin(block, con)
            if ((n <- length(block)) < 512L) 
                writeBin(raw(512L - n), con)
        }
        close(inf)
    }
    block <- raw(512L)
    writeBin(block, con)
    writeBin(block, con)
    invisible(0L)
}
-------------------------------------------------------------------------------------------------------
inline system() system()
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
[status, result] = system(’dir’); dir system('command') [status, result] = system('command')
-------------------------------------------------------------------------------------------------------
havingIP <- function() {
  if (.Platform$OS.type == "windows") {
    ipmessage <- system("ipconfig", intern = TRUE)
  } else {
    ipmessage <- system("ifconfig", intern = TRUE)
  }
  validIP <- "((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)[.]){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
  any(grep(validIP, ipmessage))
} > havingIP()
[1] TRUE
-------------------------------------------------------------------------------------------------------
canPingSite <- function(test.site) {
    !as.logical(system(paste("ping", test.site)))
} > t1 <- canPingSite("www.yahoo.com")
[...]

> t2 <- canPingSite(";lkjsdflakjdlfhasdfhsad;fs;adjfsdlk")
[...]

> t1; t2
[1] TRUE
[1] FALSE
-------------------------------------------------------------------------------------------------------
system('C:/cygwin/bin/ls.exe'); export PATH="$PATH:/cygdrive/c/Programme/R-2.9.2/bin" Rgui.exe system('ls')
-------------------------------------------------------------------------------------------------------
get_password <- function() {
cat("Password: ")
system("stty -echo")
a <- readline()
system("stty echo")
cat("\n")
return(a)
}

> a <- get_password()
Password: 
> a
[1] "sdfs"
>
-------------------------------------------------------------------------------------------------------
system("path")
-------------------------------------------------------------------------------------------------------
system() R> res <- system("echo 4/3 | bc -l", intern=TRUE)
R> res
[1] "1.33333333333333333333"
R>
-------------------------------------------------------------------------------------------------------
sh start-server.sh system system("ls", wait = FALSE)
-------------------------------------------------------------------------------------------------------
stdout stderr # Setup
system('mkfifo output.fifo')
p_out <- fifo('output.fifo', 'r')
p_in <- pipe('pdflatex &> output.fifo', 'w')

# See what TeX said on startup
readLines(p_out)
[1] "This is pdfTeX, Version 3.1415926-1.40.11 (TeX Live 2010)"

readLines(p_out)
character(0) # TeX has nothing more to say

# Tell TeX to do something
writeLines('\\documentclass{article}', p_in)
flush(p_in)

# See what it said in response
readLines(p_out)
[1] "**entering extended mode"                                                       
[2] "LaTeX2e <2009/09/24>"                                                           
[3] "Babel <v3.8l> and hyphenation patterns for english, dumylang, nohyphenation, ba"
[4] "sque, danish, dutch, finnish, french, german, ngerman, swissgerman, hungarian, "
[5] "italian, bokmal, nynorsk, polish, portuguese, spanish, swedish, loaded."        
[6] "" fifo
-------------------------------------------------------------------------------------------------------
system() system(paste("cd",getwd() "&& bgame -y 2010 2010bos.eva >2010bos.txt",sep=" ")) cd getwd() > system("bgame -y 2010 2010bos.eva > 2010bos.txt") ?system shell • The most important difference is that on a Unix-alike
      ‘system’ launches a shell which then runs ‘command’.  On
      Windows the command is run directly - use ‘shell’ for an
      interface which runs ‘command’ _via_ a shell (by default the
      Windows shell ‘cmd.exe’, which has many differences from the
      POSIX shell).

      This means that it cannot be assumed that redirection or
      piping will work in ‘system’ (redirection sometimes does, but
      we have seen cases where it stopped working after a Windows
      security patch), and ‘system2’ (or ‘shell’) must be used on
      Windows.
-------------------------------------------------------------------------------------------------------
gzfile() gzcon() R> foo <- data.frame(a=LETTERS[1:3], b=rnorm(3))
R> foo
  a        b
1 A 0.586882
2 B 0.218608
3 C 1.290776
R> write.table(foo, file="/tmp/foo.csv")
R> system("gzip /tmp/foo.csv")             # being very explicit file() gzfile() R> read.table(gzfile("/tmp/foo.csv.gz"))   
  a        b
1 A 0.586882
2 B 0.218608
3 C 1.290776
R>
-------------------------------------------------------------------------------------------------------
R CMD build "R CMD build" system("R CMD build myPackage.tar.gz")
-------------------------------------------------------------------------------------------------------
myCommand <- paste("/path/to/java", argument1, argument2, sep=" ")
system(shQuote(myCommand)) .jinit()
v <- .jnew("java/util/Vector")
rVector <- as.character(1:10)
addToV <- function( item ){
  v$add( item )
}
sapply(rVector, addToV) 1> v$
v$add(                 v$hashCode()           v$contains(            v$size()               v$elementAt(           v$capacity()           v$containsAll(         v$firstElement()       v$removeElement(       v$iterator()           v$wait()
v$get(                 v$clone()              v$isEmpty()            v$toArray()            v$remove(              v$ensureCapacity(      v$removeAll(           v$insertElementAt(     v$removeElementAt(     v$listIterator()       v$getClass()
v$equals(              v$indexOf(             v$lastIndexOf(         v$toArray(             v$elements()           v$trimToSize()         v$retainAll(           v$lastElement()        v$setElementAt(        v$listIterator(        v$notify()
v$toString()           v$clear()              v$addAll(              v$addElement(          v$set(                 v$subList(             v$copyInto(            v$removeAllElements()  v$setSize(             v$wait(                v$notifyAll()
1> v$
-------------------------------------------------------------------------------------------------------
system system("cat yourfile.txt")
-------------------------------------------------------------------------------------------------------
> library("ape")
> gcPhylo <- read.tree(file = "gc.tree")
> plot(gcPhylo, show.node.label = TRUE) > library(ade4)
> newickString <- system("cat gc.tree", intern = TRUE)
> gcPhylog <- newick2phylog(newickString)
> plot(gcPhylog, clabel.nodes=1)
-------------------------------------------------------------------------------------------------------
system("which convert", intern=TRUE) Sys.setenv(PATH=...)
-------------------------------------------------------------------------------------------------------
> sessionInfo()
R version 2.13.0 (2011-04-13)
Platform: x86_64-pc-linux-gnu (64-bit)

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=C              LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] animation_2.0-4 system() convert ignore.stdout
-------------------------------------------------------------------------------------------------------
system(sprintf('sleep %d', seconds))
-------------------------------------------------------------------------------------------------------
wc scan() skip lastline <- function(filename) {
  ## filename is of mode character
  out <- system(sprintf("wc -l %s",filename),intern=TRUE)
  n <- as.integer(sub(sprintf("[ ]*([0-9]+)[ ]%s",filename),"\\1",out))
  print(n)
  scan(filename,what="",skip=n-1,nlines=1,sep="\n",quiet=TRUE)
}

> lastline("myfile")
-------------------------------------------------------------------------------------------------------
gawk system("gawk 'END {print}' myfile", intern = TRUE)
-------------------------------------------------------------------------------------------------------
.Rprofile makeActiveBinding("refresh", function() { shell("Rgui"); q("no") }, .GlobalEnv)

makeActiveBinding("refresh", function() { system("R"); q("no") }, .GlobalEnv) refresh
-------------------------------------------------------------------------------------------------------
/proc/meminfo $ grep MemFree /proc/meminfo 
MemFree:          573660 kB
$ awk '/MemFree/ {print $2}' /proc/meminfo 
565464 system(..., intern=TRUE)
-------------------------------------------------------------------------------------------------------
system('R CMD BATCH infile outfile');
-------------------------------------------------------------------------------------------------------
system [status] = system('R CMD BATCH [options] script.R [outfile]')
-------------------------------------------------------------------------------------------------------
write.table() write.csv() R> write.table(trees, file="/tmp/trees.csv", 
+              row.names=FALSE, col.names=FALSE, sep=",")
R> system("head /tmp/trees.csv")
8.3,70,10.3
8.6,65,10.3
8.8,63,10.2
10.5,72,16.4
10.7,81,18.8
10.8,83,19.7
11,66,15.6
11,75,18.2
11.1,80,22.6
11.2,75,19.9
R>
-------------------------------------------------------------------------------------------------------
CountUnixCPUs  <- function(cpuinfo = "/proc/cpuinfo"){
tmpCmd  <- paste("grep processor ", cpuinfo, " | wc -l", sep = "")
numCPU  <- as.numeric(system(tmpCmd, intern = TRUE))
return(numCPU)
} library(Matrix)
ptable <- which(triu(matrix(1, ncol = 20, nrow = 20))==1, arr.ind = TRUE)
foreach(ix_row = 1:nrow(ptable)) %dopar% { myFunction(ptable[ix_row,])}
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
system2 ping <- function(x,stderr=FALSE,stdout=FALSE,...){
    pingvec <- system2("ping",x,
                       stderr=FALSE,
                       stdout=FALSE,...)
    if (pingvec == 0) TRUE else FALSE
}
> ping("google.com")
[1] FALSE
> ping("ugent.be")
[1] TRUE stdout="" > X <- system("ping ugent.be",intern=TRUE)
> X
 [1] ""                                                         "Pinging ugent.be [157.193.43.50] with 32 bytes of data:" 
 [3] "Reply from 157.193.43.50: bytes=32 time<1ms TTL=62"       "Reply from 157.193.43.50: bytes=32 time<1ms TTL=62"      
 [5] "Reply from 157.193.43.50: bytes=32 time<1ms TTL=62"       "Reply from 157.193.43.50: bytes=32 time<1ms TTL=62"      
 [7] ""                                                         "Ping statistics for 157.193.43.50:"                      
 [9] "    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss)," "Approximate round trip times in milli-seconds:"          
[11] "    Minimum = 0ms, Maximum = 0ms, Average = 0ms" intern=TRUE
-------------------------------------------------------------------------------------------------------
save() load() R> foo <- 1:3
R> save(foo, file="/tmp/SimpleDemo.RData")
R> Sys.chmod("/tmp/SimpleDemo.RData", mode="0444")
R> system("ls -l /tmp/SimpleDemo.RData")
-r--r--r-- 1 edd edd 62 2011-08-15 16:26 /tmp/SimpleDemo.RData
-------------------------------------------------------------------------------------------------------
choose.dir file.choose list.files file.info file.access files
-------------------------------------------------------------------------------------------------------
system() FOO='test123' $FOO system("echo $FOO") $FOO setenv Sys.setenv
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
system("echo 'rootpassword' | sudo halt")
-------------------------------------------------------------------------------------------------------
sudo /etc/sudoers <username> ALL=(ALL) PASSWD: ALL, NOPASSWD: /sbin/halt system('sudo halt')
-------------------------------------------------------------------------------------------------------
system()
-------------------------------------------------------------------------------------------------------
> system("wmic desktopmonitor get screenheight")
ScreenHeight  
900 system (scr_width <- system("wmic desktopmonitor get screenwidth", intern=TRUE))
# [1] "ScreenWidth  \r" "1440         \r" "\r"
(scr_height <- system("wmic desktopmonitor get screenheight", intern=TRUE))
# [1] "ScreenHeight  \r" "900           \r" "\r" [1] "ScreenWidth  \r" "1600         \r" "1600         \r" "" as.numeric(c(
  scr_width[-c(1, length(scr_width))], 
  scr_height[-c(1, length(scr_height))]
))
# [1] 1440  900
-------------------------------------------------------------------------------------------------------
\documentclass{article}

\usepackage{listings}

\begin{document}

\begin{lstlisting}
<<echo=F, results=tex>>=
y<- c(50, 26, 31, 57, 19, 24, 22, 23, 38, 13, 50, 13, 34, 23, 30, 49, 13, 15, 51)
stem(y)
@ 
\end{lstlisting}

\end{document}
-------------------------------------------------------------------------------------------------------
stem sink("stem.out")
stem(y)
sink() latex latex(readLines("stem.out")
#--------file output follows----
% latex.default(readLines("stem.out")) 
%
\begin{table}[!tbp]
 \begin{center}
 \begin{tabular}{l}\hline\hline
\multicolumn{1}{c}{}\tabularnewline
\hline
\tabularnewline
  The decimal point is 1 digit(s) to the right of the |\tabularnewline
\tabularnewline
  1 | 33359\tabularnewline
  2 | 23346\tabularnewline
  3 | 0148\tabularnewline
  4 | 9\tabularnewline
  5 | 0017\tabularnewline
\tabularnewline
\hline
\end{tabular}

\end{center}

\end{table}
#---------  end of file ------
-------------------------------------------------------------------------------------------------------
print capture.output latexTranslate HMisc library(Hmisc)
latexTranslate(capture.output(stem(y)))

[1] ""                                                         
[2] "  The decimal point is 1 digit(s) to the right of the $|$"
[3] ""                                                         
[4] "  1 $|$ 33359"                                            
[5] "  2 $|$ 23346"                                            
[6] "  3 $|$ 0148"                                             
[7] "  4 $|$ 9"                                                
[8] "  5 $|$ 0017"                                             
[9] ""
-------------------------------------------------------------------------------------------------------
system("youBatFile.bat")
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
system() return_value=system("C:\PathToR\Rscript.exe Rfile.r input output >info.txt 2>&1")

if(return_value==0)
{
  #Hooray, it worked!
}else
{
  #Boo, it didn't work!
}
-------------------------------------------------------------------------------------------------------
intern = TRUE system system.time(system(paste('rsync -outi', '~/dir/files* ', 'serverhost:')))
   user  system elapsed 
  0.060   0.020   0.552 system rsync rsync <-  function (from, to, pattern = "") {
    system(paste("rsync -outi", from, to, sep = " "), intern = TRUE)
  }
system.time(rsync(from = '~/dir/files*', to = 'serverhost:'))
   user  system elapsed 
  0.040   0.030   3.825 intern = TRUE rsync <-  function (from, to, pattern = "") {
    system(paste("rsync -outi", from, to, sep = " "))
  }
system.time(rsync(from = '~/dir/files*', to = 'serverhost:'))
   user  system elapsed 
  0.070   0.020   0.504
-------------------------------------------------------------------------------------------------------
bash <- function() system("bash")
-------------------------------------------------------------------------------------------------------
bash <- function() system("bash") > bash <- function() system("bash")
> bash()
[gavin@prometheus cocorresp_check]$ exit
> ls()
 [1] "a"       "b"       "bash"    "cars.lo" "dat"     "Dbig"    "Djackal"
 [8] "foo"     "i"       "jack.t"  "jackal"  "mat"     "mat2"    "meanDif"
[15] "mod"     "N"       "perm"    "x"       "Xa"      "Xab"     "Xb"     
[22] "xct"     "y"
> match.fun("bash")
function() system("bash") bash() system("bash")
-------------------------------------------------------------------------------------------------------
vrmlgen require(vrmlgen)
example(bar3d) require(stringr)
browseURL(str_replace_all(file.path(outdir, 'barplot.html'), fixed('\\'), '/')) setwd(outdir)
aopt <- 'C:/PROGRA~1/INSTAN~1/bin/aopt' # Path to conversion program
vrml <- 'barplot.wrl'
x3dom <- 'barx.html'
command <- paste(aopt, '-i', vrml, '-N', x3dom)
system(command)
# LOG   Avalon   Init: 47/616, V2.0.0 build: R-21023 Jan 12 2011
# LOG   Avalon   Read url
# LOG   Avalon   Read time: 0.074000
# ============================================
# Call: writeHTML with 1 param 
# Write raw-data to barx.html as text/html
# WARNING   Avalon   Run NodeNameSpace "scene" destructor and _nodeCount == 3
# WARNING   Avalon   Try to remove nodes from parents
# WARNING   Avalon   PopupText without component, cannot unregister
# WARNING   Avalon   Avalon::exitSystem() call and node/obj left: 0/3331
browseURL(file.path(outdir, 'barx.html'))
setwd(curdir)
-------------------------------------------------------------------------------------------------------
Ctrl-L .RProfile cat("\014") # or cat("\f") cat(rep("\n", 50)) cls <- function() {
       require(rcom)
       wsh <- comCreateObject("Wscript.Shell")
       comInvoke(wsh, "SendKeys", "\014")
       invisible(wsh)
} system("clear")
-------------------------------------------------------------------------------------------------------
source(foo.R) foo.R foo.R x <- 5 x <- 6 x 5 system("Rscript foo.R") Rscript foo.R
-------------------------------------------------------------------------------------------------------
source("foo.R") "foo.R" system("Rscript foo.R") "foo.R" Rscript system() show.output.on.console=FALSE
-------------------------------------------------------------------------------------------------------
system(paste("fc", <file1>, <file2>, "> difference.txt"))
-------------------------------------------------------------------------------------------------------
foo.rb sh: ./test.rb: Permission denied foo.rb #!/usr/bin/env ruby

puts 'Hello world' > system('ls -l test.rb')
-rw-r--r--  1 jcolby  staff  40 Oct 21 08:23 test.rb
> system('./test.rb')
sh: ./test.rb: Permission denied
> system('chmod a+x test.rb')
> system('./test.rb')
Hello world
-------------------------------------------------------------------------------------------------------
/bin edd@max:~/svn/littler/examples$ ls -l /bin/ | awk '{print $5}' | ./fsizes.r 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      4    5736   23580   61180   55820 1965000       1 

  The decimal point is 5 digit(s) to the right of the |

   0 | 00000000000000000000000000000000111111111111111111111111111122222222+36
   1 | 01111112233459
   2 | 3
   3 | 15
   4 | 
   5 | 
   6 | 
   7 | 
   8 | 
   9 | 5
  10 | 
  11 | 
  12 | 
  13 | 
  14 | 
  15 | 
  16 | 
  17 | 
  18 | 
  19 | 6

edd@max:~/svn/littler/examples$ edd@max:~/svn/littler/examples$ cat fsizes.r 
#!/usr/bin/r -i

fsizes <- as.integer(readLines())
print(summary(fsizes))
stem(fsizes)
-------------------------------------------------------------------------------------------------------
stem | stem_with_dot <- function(x, ...){
   h = capture.output(stem(x, ...))
   stem_plot = sub("\\| ([0-9]{2})", "| \\1.", h)
   writeLines(stem_plot)
   return(invisible)
}
-------------------------------------------------------------------------------------------------------
stem(v/100)
-------------------------------------------------------------------------------------------------------
var page = new WebPage();
page.open('http://www.menne-biomed.de/uni/JavaButton.html', function (status) {
    if (status !== 'success') {
        console.log('Unable to access network');
    } else {
        var ua = page.evaluate(function () {
            var t =  document.getElementById('tk1').href;
            var re = new RegExp('\((.*)\)');
            return eval(re.exec(t)[1]); 
        });
        console.log(ua);// Outputs http://cran.at.r-project.org/
    }
    phantom.exit();
}); <!DOCTYPE html >
<head>
<script>
inaccesibleJavascriptVar = 'http://' + 'cran.at.r-project.org/';
function doPostBack(myref)
          {
            window.location.href= myref;
            return false;
        }
</script>
</head>
<body>
<a id="tk1" href="javascript:doPostBack(inaccesibleJavascriptVar)" >Click here</a>
</body>
</html>
-------------------------------------------------------------------------------------------------------
sendmailR sendmail_options(smtpPort = 587) sendmail() BasePy  = scan("sendmail_base.py", what = "character", sep = "\n")
OutPy = gsub("your_email@gmail.com", "yourRealEmailAddress", InFile)
OutPy = gsub("your_password", "yourRealPassword", OutFile) cat(OutPy, file = "sendmail_new.py", sep = "\n")
system("chmod u+x sendmail_new.py; ./sendmail_new.py")
-------------------------------------------------------------------------------------------------------
s/(\"[^\",]+),([^\"]+\")/$1_$2/g "...,..." x <- read.csv.sql("temp.csv", 
        filter = "perl -e 's/(\"[^\",]+)_([^\"]+\")/$1_$2/g'", 
        header=FALSE) x > x
    V1       V2      V3   V4
1 1001      Amy 9:43:00 99.2
2 1002 "Ben_Jr" 9:43:00 99.2
3 1003 "Ben_Sr" 9:44:00 99.3 s{(\"[^\",]+),([^\"]+\")}{$_= $&, s/,/_/g, $_}eg / {} , _ $& system("touch temp.csv")
system("echo '1001, Amy,9:43:00, 99.2\n1002,\"Ben,Jr,More,Commas\",9:43:00, 99.2\n1003,\"Ben,Sr\",9:44:00, 99.3' > temp.csv") 1001,                 Amy,9:43:00, 99.2
1002,"Ben,Jr,More,Commas",9:43:00, 99.2
1003,            "Ben,Sr",9:44:00, 99.3 x <- read.csv.sql("temp.csv", 
       filter = "perl -p -e 's{(\"[^\",]+),([^\"]+\")}{$_= $&, s/,/_/g, $_}eg'", 
       header=FALSE)
> x
    V1                   V2      V3   V4
1 1001                  Amy 9:43:00 99.2
2 1002 "Ben_Jr_More_Commas" 9:43:00 99.2
3 1003             "Ben_Sr" 9:44:00 99.3
-------------------------------------------------------------------------------------------------------
system() stop()
-------------------------------------------------------------------------------------------------------
$ R --vanilla
R version 2.14.0 (2011-10-31)

> system("R CMD SHLIB -otest.so test.c")
> dyn.load("test.so")
> truelength = function(x)invisible(.Call("truelength",x))
> 
> truelength("A")
'A' has length 1 and truelength 0
> truelength("ABC")
'ABC' has length 3 and truelength 0
> A=123
> truelength("A")
'A' has length 1 and truelength 65    # 65 is the HASHPRI, for bound variable A
> truelength("ABC")
'ABC' has length 3 and truelength 0    # no variable ABC so truelength unused
> ABC=456
> truelength("ABC")
'ABC' has length 3 and truelength 17763   # now ABC symbol is bound
> 
> foo = 7
> truelength("foo")               
'foo' has length 3 and truelength 27999   # bound
> truelength("bar")               
'bar' has length 3 and truelength 0       # not bound
> .Internal(inspect("foo"))
@876eb08 16 STRSXP g0c1 [NAM(2)] (len=1, tl=0)   # tl=0 of STRSXP vector
  @81759e8 09 CHARSXP g0c1 [gp=0x21] "foo"       # tl of CHARSXP not shown by inspect // test.c
#include <R.h>
#include <Rdefines.h> 

SEXP truelength(SEXP v)
{
    SEXP s = STRING_ELT(v,0);
    Rprintf("'%s' has length %d and truelength %d\n",
                  CHAR(s), LENGTH(s), TRUELENGTH(s));
    return(R_NilValue);
}
-------------------------------------------------------------------------------------------------------
dat_rec <- lapply(strsplit(paste(dat,collapse="\n"),split="\n\n")[[1]],
                  function(x) strsplit(x,split="\n")[[1]]) dat_rec_vn <- lapply(dat_rec,function(x) {
                           vn <- gsub(" ","_",sub("  ","",
                                        gsub("^(\\D*) \\d.*$","\\1", x[-length(x)])))
                           y <- gsub("^(\\D*) (\\d.*)$","\\2",x[-length(x)])
                           names(y) <- vn
                           return(y)}) vn <- unique(unlist(lapply(dat_rec_vn,names),use.names=FALSE)) dat_mat <- do.call(rbind,lapply(dat_rec_vn,function(x) {
                     y <- vector(mode="character",length=length(vn))
                     y[match(names(x),vn)] <- x
                     return(y)}))

colnames(dat_mat) <- vn gawk_cmd <- "gawk 'BEGIN{FS=\"\\n\";RS=\"\";OFS=\"\\t\";ORS=\"\\n\"} 
                        {$1=$1; print $0}' test_multi.txt"
dat <- strsplit(system(gawk_cmd,intern=TRUE),split="\t")
NF <- do.call(max,lapply(dat,length))
M <- do.call(rbind,lapply(dat,"[",seq(NF)))
-------------------------------------------------------------------------------------------------------
system("iexplore.exe http://www.foo.bar/eggs.html")
-------------------------------------------------------------------------------------------------------
stem gstem require(fmsb)
  gstem(beaver1$temp)
-------------------------------------------------------------------------------------------------------
file= .dot output.type="dot" \includegraphics .Rnw pathDiagram sw.rnw \documentclass{article}
\usepackage{graphicx}
\begin{document}
<<echo=TRUE>>=
library(sem)
R.DHP <- readMoments("sem.cov", diag=FALSE, 
                     names=c('ROccAsp', 'REdAsp', 'FOccAsp', 
                       'FEdAsp', 'RParAsp', 'RIQ', 'RSES',  
                       'FSES', 'FIQ', 'FParAsp'))
model.dhp <- specifyModel(file="sem.mod")
sem.dhp <- sem(model.dhp, R.DHP, 329,
               fixed.x=c('RParAsp', 'RIQ', 'RSES', 'FSES', 'FIQ', 'FParAsp'))            
capture.output(pathDiagram(sem.dhp, min.rank='RIQ, RSES, RParAsp, FParAsp, FSES, FIQ', 
            max.rank='ROccAsp, REdAsp, FEdAsp, FOccAsp'), file="sem.dot")
@
<<echo=FALSE>>=
system("dot -Tpdf -o fig1.pdf  sem.dot")
@

And here is the path diagram.

\begin{center}
\includegraphics{fig1}
\end{center}

\end{document} sem.cov sem.mod capture.output() system() echo=FALSE $ R CMD Sweave sw.rnw
$ R CMD texi2pdf sw.tex
-------------------------------------------------------------------------------------------------------
error_reporting(E_ALL);
ini_set('display_errors','On'); <?php function php_call_r() {
    $cmd = "echo 'argv <- \"r_command.r\"; source(argv)' | " .
    "/usr/bin/R --vanilla --slave";
    $ret = system($cmd);
    echo $ret;
}
?>
-------------------------------------------------------------------------------------------------------
jpeg() Cairo jpeg ?jpeg Rscript www-data echo system("pwd");
-------------------------------------------------------------------------------------------------------
Sweave # Create the template file, "test.Rnw"
template <- "test.Rnw"
cat("
\\documentclass{article}
\\title{\\Sexpr{namelist[i]}}
\\begin{document}
\\maketitle
\\end{document}
", file=template)

# Parameters
namelist <- c("Tom","Dick","Harry","John","Jacob")

# Main loop: just compile the file, 
# it will use the current value of the loop variable "i".
for(i in 1:length(namelist)) {
  Rnw_file <- paste("test_", i, ".Rnw", sep="")
  TeX_file <- paste("test_", i, ".tex", sep="")
  file.copy(template, Rnw_file)
  Sweave(Rnw_file)
  system(paste("pdflatex --interaction=nonstopmode",  TeX_file))
}
-------------------------------------------------------------------------------------------------------
runYacas()
### You should not need to type any of what follows. Just use the command above.
runYacas <- function(method = "system", yacas.args = "", yacas.init = "") {
   cmd <- yacasInvokeString(method = method, yacas.args = yacas.args, yacas.init = yacas.init)
   if (.Platform$OS.type == "windows") 
      system(cmd, wait = FALSE, invisible = FALSE)
   else system(cmd, wait = FALSE)
}
-------------------------------------------------------------------------------------------------------
my $path_to_r = "C:/Program Files/R/bin/Rscript.exe";

my $cmd = "x<-c(1,2,3,4,5);";
$cmd .= "y<-c(5,4,3,2,1);";
$cmd .= 'jpeg("C:/temp.jpg");';
$cmd .= "plot(x,y);";
$cmd .= "dev.off()";

system($path_to_r . " -e '" . $cmd . "'");
-------------------------------------------------------------------------------------------------------
system("Rscript -e 'Sweave(\"test.Rnw\");save.image(file=\"mySweaveEnv.Rda\")'")
-------------------------------------------------------------------------------------------------------
write.zoo R> write.zoo
function (x, file = "", index.name = "Index", row.names = FALSE, 
    col.names = NULL, ...) 
{
    if (is.null(col.names)) 
        col.names <- !is.null(colnames(x))
    dx <- as.data.frame(x)
    stopifnot(all(names(dx) != index.name))
    dx[[index.name]] <- index(x)
    dx <- dx[, c(ncol(dx), 1:(ncol(dx) - 1))]
    write.table(dx, file = file, row.names = row.names, col.names = col.names, 
        ...)
}
<environment: namespace:zoo>
R> R> mat <- matrix(rnorm(20),5,4, dimnames=list(NULL, LETTERS[1:4]))
R> mat
              A          B         C         D
[1,] -2.5304768  0.5454043  0.754670  0.330617
[2,] -0.5199045  0.3943289 -1.271524 -2.243113
[3,] -0.0996277 -0.0513063 -0.846310 -0.140727
[4,]  0.3819981  0.5230709  1.131108  2.398311
[5,]  1.4366976 -1.7750772  0.193936  1.047754
R> xmat <- xts(mat, order.by=Sys.Date() + seq(-4,0))
R> xmat
                    A          B         C         D
2012-01-19 -2.5304768  0.5454043  0.754670  0.330617
2012-01-20 -0.5199045  0.3943289 -1.271524 -2.243113
2012-01-21 -0.0996277 -0.0513063 -0.846310 -0.140727
2012-01-22  0.3819981  0.5230709  1.131108  2.398311
2012-01-23  1.4366976 -1.7750772  0.193936  1.047754 R> write.zoo(xmat, file="/tmp/demo.csv", sep=",")
R> system("cat /tmp/demo.csv")
"Index","A","B","C","D"
2012-01-19,-2.53047680387774,0.545404313269755,0.754669841541681,0.330616876246245
2012-01-20,-0.519904544868541,0.394328857686792,-1.27152367237311,-2.24311276135881
2012-01-21,-0.0996276931028331,-0.0513062656752562,-0.846309564748021,-0.14072731914499
2012-01-22,0.381998053276389,0.523070920853495,1.13110826400249,2.39831100812159
2012-01-23,1.43669757366164,-1.77507724264279,0.193935657150967,1.04775355172344
R> row.names=FALSE TRUE row.names=FALSE
-------------------------------------------------------------------------------------------------------
path.expand dir.create("~/bin")
download.file("http://links.tedpavlic.com/shell_scripts/skim",
              dest="~/bin/skim")
Sys.chmod("~/bin/skim","0755")
system("~/bin/skim")  ## test: should get a usage message
## Usage: skim [-help] [-a] [-o] FILE [LINE [SOURCE]]
options(pdfviewer=path.expand("~/bin/skim")) library(bbmle)
vignette("mle2") ~/.Rprofile
-------------------------------------------------------------------------------------------------------
X # generate some artificial data
reset
set sample 200
set table 'rnd.dat'
plot invnorm(rand(0))
unset table

# display the CDF
unset key
set yrange [0:1]
perc80=system("cat rnd.dat | sed '1,4d' | awk '{print $2}' | sort -n | \
          awk 'BEGIN{i=0} {s[i]=$1; i++;} END{print s[int(NR*0.8-0.5)]}'")
set arrow from perc80,0 to perc80,0.8 nohead lt 2 lw 2
set arrow from graph(0,0),0.8 to perc80,0.8 nohead lt 2 lw 2
plot 'rnd.dat' using 2:(1./200.) smooth cumulative perc90 arrow 0.8 table trunc(rank(x))/length(x) Rscript -e 'x=read.table("~/rnd.dat")[,2]; sort(x)[trunc(length(x)*.8)]' rnd.dat quantile x <- rnorm(200)
xs <- sort(x)
xf <- (1:length(xs))/length(xs)
plot(xs, xf, xlab="X", ylab="Cumulative frequency")
## quick outline of the 80th percentile rank
perc80 <- xs[trunc(length(x)*.8)]
abline(h=.8, v=perc80) 
## alternative solution
plot(ecdf(x))
segments(par("usr")[1], .8, perc80, .8)
segments(perc80, par("usr")[3], perc80, .8)
-------------------------------------------------------------------------------------------------------
system('your awk command here') awk awk system > system('echo \'hello guy!\' ')
hello guy!
-------------------------------------------------------------------------------------------------------
multicore $! Sys.getpid() oRphanKilleR system('(sleep 20) & echo $! >> ~/childPIDs.txt', wait = FALSE) tempfile() do while
-------------------------------------------------------------------------------------------------------
$GLOBALS["pathRscript"] = '"c:\\Program Files\\R\\R-2.14.1\\bin\\Rscript.exe"';
$GLOBALS["webAppRInterface"] = "c:\\WebApp\\R\\WebAppR.R";

function WebAppR($rExpression) {

    $command = $GLOBALS["pathRscript"] . " " . $GLOBALS["webAppRInterface"] . " " . $rExpression;    
    system($command);
} ## Sink any error messages to an error log file
errorLog <- file("c:/WebApp/R/error.log", open="wt")
sink(errorLog, type="message")

## Do an R call from a string passed from PHP
## Quotes in the string must be sent from PHP using the backquote "`"
eval(parse(text=gsub("`", "'", paste(commandArgs(T), collapse=" ")))) WebAppR() " "`" source() cat() cat()
-------------------------------------------------------------------------------------------------------
system( "Rscript -e 'install.packages(\"XML\")'", intern=TRUE )
-------------------------------------------------------------------------------------------------------
diff -y cat(capture.output( print(l1) ), sep="\n", file="tmp1")
cat(capture.output( print(l2) ), sep="\n", file="tmp2")
system("diff -y tmp1 tmp2")
-------------------------------------------------------------------------------------------------------
system() system('clear')
-------------------------------------------------------------------------------------------------------
/bin/ls awk edd@max:~/svn/littler/examples$ ls -l /boot/ | \
                                    awk '!/^total/ {print $5}' | ./fsizes.r 
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
      24   130300   730700  3336000  4527000 14670000 

  The decimal point is 6 digit(s) to the right of the |

   0 | 0000000000000011111111122777777777
   2 | 777777777
   4 | 555577777
   6 | 
   8 | 
  10 | 
  12 | 5
  14 | 24466677

edd@max:~/svn/littler/examples$ fsizes.r edd@max:~/svn/littler/examples$ cat fsizes.r 
#!/usr/bin/r -i

fsizes <- as.integer(readLines())
print(summary(fsizes))
stem(fsizes)
edd@max:~/svn/littler/examples$
-------------------------------------------------------------------------------------------------------
read.table(text= system('cat tt'), header=TRUE) b <- read.table(file='tt', header=TRUE)
b$s1
-------------------------------------------------------------------------------------------------------
system system("gawk --version", intern=TRUE)
-------------------------------------------------------------------------------------------------------
system("awk ...", intern=TRUE) pipe() R> sizes <- read.table(pipe("ls -l /tmp | awk '!/^total/ {print $5}'"))
R> summary(sizes)
       V1          
 Min.   :       0  
 1st Qu.:     482  
 Median :    4096  
 Mean   :   98746  
 3rd Qu.:   13952  
 Max.   :27662342  
R> awk awk R> cmd <- "ls -l /tmp | awk '!/^total/ {sum = sum + $5} END {print sum}'"
R> totalsize <- scan(pipe(cmd), quiet=TRUE)
R> totalsize
[1] 116027050
R>
-------------------------------------------------------------------------------------------------------
?system Rgui intern=TRUE show.output.on.console=TRUE system('NetHack.exe',invisible=FALSE,wait=FALSE) if ( .Platform$GUI == "Rgui" )
-------------------------------------------------------------------------------------------------------
foreach set.seed(1)
N <- 1e6
M <- 1e6
edgelist <- cbind(sample(1:N,M,replace=TRUE),
                  sample(1:N,M,replace=TRUE))
colnames(edgelist) <- c("sender","receiver")
write.table(edgelist,file="edgelist-small.csv",sep=",",
            row.names=FALSE,col.names=FALSE) system("
for i in $(seq 1 10) 
do 
  cat edgelist-small.csv >> edgelist.csv 
done") bigtabulate read.big.matrix() library(bigtabulate)
x <- read.big.matrix("edgelist.csv", header = FALSE, 
                     type = "integer",sep = ",", 
                     backingfile = "edgelist.bin", 
                     descriptor = "edgelist.desc")
nrow(x)  # 1e7 as expected bigtable() outdegree <- bigtable(x,1)
head(outdegree) # Check table worked as expected for first "node"
j <- as.numeric(names(outdegree[1]))  # get name of first node
all.equal(as.numeric(outdegree[1]),   # outdegree's answer
          sum(x[,1]==j))              # manual outdegree count bigtable(x,2)
-------------------------------------------------------------------------------------------------------
dev=c('pdf', 'png') PATH knit_hooks$set(convert = function(before, options, envir) {
  # quit if before a chunk or no figures in this chunk
  if (before || (n <- options$fig.num) == 0L) return()
  # only convert pdf files
  if (options$fig.ext != 'pdf') return()

  # use ImageMagick to convert all pdf to png
  name = fig_path()  # figure filename
  owd = setwd(dirname(name)); on.exit(setwd(owd))
  files = paste(basename(name), if (n == 1L) '' else seq(n), sep = '')
  lapply(files, function(f) {
    system(sprintf('convert %s.pdf %s.png', f, f))
  })
  NULL
}) convert foo.pdf foo.png <<test-png, convert=TRUE>>=
  plot(1); plot(2)
@ convert system() png()
-------------------------------------------------------------------------------------------------------
knitr knitr dev system() knitr knitr <img src='foobar.pdf' /> <img src='foobar.jpeg' />
-------------------------------------------------------------------------------------------------------
RCurl system()
-------------------------------------------------------------------------------------------------------
intern x<-system("ls -t -r | tail -n 1", intern=TRUE)
-------------------------------------------------------------------------------------------------------
rj RTerm rj RTerm rj RCOM system() rj RTerm rj
-------------------------------------------------------------------------------------------------------
system assignInNamespace(
  "system", 
  function(...) stop("system calls are not allowed"), 
  getNamespace("base")
)

system("pwd")  #throws an error trace trace(system, quote(stop("You have called system")))  #you may also want print = FALSE
-------------------------------------------------------------------------------------------------------
stats:::model.frame.default e lm() trace() as.formula() disable.system.call <- function(...) {
    mc <- match.call()
    if (grepl('system', deparse(mc[[2]])))
        stop('NONO')
    eval(mc, env = .GlobalEnv)        
}
e <- new.env()
eval(parse(text = 'as.formula <- disable.system.call'), envir = e)


# (1) trace custom 'as.formula()' in environment e
trace(e$as.formula)


# Calling model.frame() **does not** call the the custom as.formula()
eval(parse(text = 'model.frame(\'1 ~ system("ls -la")\')'), envir = e)
#   1 system("ls -la")
# 1 1              127

# (2) trace stats:::as.formula()
trace(stats:::as.formula)

# Calling model.frame() **does** call stats:::as.formula()
eval(parse(text = 'model.frame(\'1 ~ system("ls -la")\')'), envir = e)
# trace: as.formula
#   1 system("ls -la")
# 1 1              127 model.frame() lm() lm() lm() model.frame() lm() model.frame() data lm() lm mf <- match.call(expand.dots = FALSE)
...
mf[[1L]] <- as.name("model.frame")
mf <- eval(mf, parent.frame())
-------------------------------------------------------------------------------------------------------
pipe() system() library(stringr)
txt <- system("awk -v FIELDWIDTHS='34 2 3 2 2 1 2 2 1 1 2 2 1 2 2 2 65' -v OFS=',' '($2=='07'){ $1=$1 ''; print }' < pipe.txt | cut --delimiter=',' --fields=2-", intern=T)
do.call(rbind, str_split(txt, ","))
-------------------------------------------------------------------------------------------------------
export NUM=10
R -q -e "rnorm($NUM)" littler # code in a file named myfirstpythonfile.py

a = 1 
b = 19
c = 3 
mylist = [a, b, c]
for item in mylist:
    print item > system('python myfirstpythonfile.py')
1
19
3 python /path/to/your/python/file.py python myfirstpythonfile.py > system('python -c "import sys; sys.stdout.write(file(\'myfirstpythonfile.py\', \'r\').read());"; python myfirstpythonfile.py')
a = 1
b = 19
c = 3
mylist = [a, b, c]
for item in mylist:
    print item
1
19
3 -m $ python -m trace --trace myfirstpythonfile.py
 --- modulename: myfirstpythonfile, funcname: <module>
myfirstpythonfile.py(1): a = 1
myfirstpythonfile.py(2): b = 19
myfirstpythonfile.py(3): c = 3
myfirstpythonfile.py(4): mylist = [a, b, c]
myfirstpythonfile.py(5): for item in mylist:
myfirstpythonfile.py(6):     print item
1
myfirstpythonfile.py(5): for item in mylist:
myfirstpythonfile.py(6):     print item
19
myfirstpythonfile.py(5): for item in mylist:
myfirstpythonfile.py(6):     print item
3
myfirstpythonfile.py(5): for item in mylist:
 --- modulename: trace, funcname: _unsettrace
trace.py(80):         sys.settrace(None)
-------------------------------------------------------------------------------------------------------
system("...that_string...")
-------------------------------------------------------------------------------------------------------
system("R CMD BATCH foo.R") main(){system("R CMD BATCH test.R");}
-------------------------------------------------------------------------------------------------------
system("ulimit") ulimit system("cd dir") system("export ENV_VAR=foo") mmap vm.overcommit_memory vm.overcommit_ratio
-------------------------------------------------------------------------------------------------------
system sysdrivereport <- system("wmic logicaldisk get caption", intern = TRUE)
substr(sysdrivereport[-c(1, length(sysdrivereport))], 1, 1)

[1] "C" "D" "E" "F"
-------------------------------------------------------------------------------------------------------
datasets path <- find.package('datasets')
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", 
    "Rd2pdf",shQuote(path)))
-------------------------------------------------------------------------------------------------------
x dmtxwrite x = 10
system(sprintf("dmtxwrite %s -o image.png", x)) paste system(paste("dmtxwrite", x, "-o image.png")) sprintf
-------------------------------------------------------------------------------------------------------
inp.tbl <- read.table(text = system(command,intern=TRUE) )
-------------------------------------------------------------------------------------------------------
shQuote() shQuote() \"echo HelloWorld\" cmd system(shQuote("echo HelloWorld")) system("echo HelloWorld")
# HelloWorld shQuote() system(paste(shQuote("echo"), shQuote("HelloWorld")))
# HelloWorld
-------------------------------------------------------------------------------------------------------
fun <- "sin(x)"
plot(function(x) eval(parse(text=fun))) eval(parse(...)) # PLOTTING THIS FUNCTION AS ABOVE WILL DELETE EVERYTHING IN YOUR GLOBAL WORKSPACE
fun <- "{rm(list=ls(pos=1),pos=1); x}"
# DON'T SAY I DIDN'T WARN YOU! system()
-------------------------------------------------------------------------------------------------------
intern=TRUE a <- system("ls ", intern=TRUE)
-------------------------------------------------------------------------------------------------------
str vec.len nhcar.max > str(mtcars, vec.len=Inf)
'data.frame':   32 obs. of  11 variables:
 $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26 30.4 15.8 19.7 15 21.4
 $ cyl : num  6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4
 $ disp: num  160 160 108 258 360 225 360 146.7 140.8 167.6 167.6 275.8 275.8 275.8 472 460 440 78.7 75.7 71.1 120.1 318 304 350 400 79 120.3 95.1 351 145 301 121
 $ hp  : num  110 110 93 110 175 105 245 62 95 123 123 180 180 180 205 215 230 66 52 65 97 150 150 245 175 66 91 113 264 175 335 109
 $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 3.92 3.07 3.07 3.07 2.93 3 3.23 4.08 4.93 4.22 3.7 2.76 3.15 3.73 3.08 4.08 4.43 3.77 4.22 3.62 3.54 4.11
 $ wt  : num  2.62 2.88 2.32 3.21 3.44 3.46 3.57 3.19 3.15 3.44 3.44 4.07 3.73 3.78 5.25 5.42 5.34 2.2 1.61 1.83 2.46 3.52 3.44 3.84 3.85 1.94 2.14 1.51 3.17 2.77 3.57 2.78
 $ qsec: num  16.5 17 18.6 19.4 17 20.2 15.8 20 22.9 18.3 18.9 17.4 17.6 18 18 17.8 17.4 19.5 18.5 19.9 20 16.9 17.3 15.4 17.1 18.9 16.7 16.9 14.5 15.5 14.6 18.6
 $ vs  : num  0 0 1 1 0 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 0 0 0 1
 $ am  : num  1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1
 $ gear: num  4 4 4 3 3 3 3 4 4 4 4 3 3 3 3 3 3 4 4 4 3 3 3 3 3 4 5 5 5 5 5 4
 $ carb: num  4 4 1 1 2 1 4 2 2 4 4 3 3 3 4 4 4 1 2 1 1 2 2 4 2 1 2 2 4 6 8 2 dput > dput(mtcars, file = 'mtcars')
> mtcars2 <- mtcars
> mtcars2$am <- 0
> dput(mtcars2, file = 'mtcars2')
> system('diff mtcars mtcars2')
23,25c23,25
<     0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1), am = c(1, 
<     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 
<     0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1), gear = c(4, 4, 4, 3, 
---
>     0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1), am = c(0, 
>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), gear = c(4, 4, 4, 3, > library(digest)
> apply(mtcars, 2, digest)
                               mpg                                cyl 
"6b33fae3fd79bb2081e21798c7001c1f" "fb8453e241dd708f9b17c412e94ab884" 
                              disp                                 hp 
"feae4e282905d11380533c3cfa3fa997" "2afa2fea47856dc4fa23eb543f1d08a4" 
                              drat                                 wt 
"345237ccc9e9b4f523ccdfde31e2f7c5" "558e5730ef0af2f50f23fe86363855ed" 
                              qsec                                 vs 
"e777220d1d85545fd98767bb39f10967" "16ff5701471198a294b5c45a90dad3ca" 
                                am                               gear 
"abf0f4ab68322a6dd0fc078570892202" "7f9bb11d36a531de7ab0d6e71fd532c9" 
                              carb 
"793a7b0812e7597d508be29fc432ff49" mtcars > apply(mtcars, 2, digest) == apply(mtcars2, 2, digest)
  mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb 
 TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE
-------------------------------------------------------------------------------------------------------
system('C:\\Python26\\ArcGIS10.0\\python.exe Checkpythonverion.py') 2.6.5 (r265:79096, Mar 19 2010, 21:48:26) [MSC v.1500 32 bit (Intel)]
-------------------------------------------------------------------------------------------------------
filename <- system("ls /dir/",intern=TRUE)

for(i in 1:length(filename)){

file <- read.table(filename[i],header=TRUE) ## if you have headers in your files ##
mean <- mean(file$V4)

write.table(mean,file=paste("/dir",paste("mean",filename[i],sep="."),sep="/")) 
##if you wish to write the means of all the files in seperate files rather than one.
}
-------------------------------------------------------------------------------------------------------
filename <- system("ls /dir/",intern=TRUE)

column_names <- data.frame(filename = "filename", mean = "mean")
write.table(column_names, file = "output.csv", row.names = FALSE, 
            append = FALSE, col.names = FALSE, sep = ", ", quote = TRUE)

for(i in 1:length(filename)){
  file <- read.table(filename[i],header=FALSE)
  newline <- data.frame(t(c(filename[i], mean(as.numeric(file$V4)))))
  write.table(newline, file = "output.csv", row.names = FALSE, 
              append = TRUE, col.names = FALSE, sep = ", ")
} filename <- system("ls /dir/",intern=TRUE)

results <- data.frame(filename = "filename", mean = "mean")

for(i in 1:length(filename)){
  file <- read.table(filename[i],header=FALSE)
  newline <- data.frame(t(c(filename = filename[i], mean = mean(as.numeric(file$V4)))))
  results <- rbind(results, newline)
}
write.table(results, file = "output.csv", row.names = FALSE, 
            append = FALSE, col.names = TRUE, sep = ", ")
-------------------------------------------------------------------------------------------------------
paste for (file in filenames) {
  file <- paste('/home/yyy/xx', file, sep='/')
  system(paste('python', 'pylib/filefunction.py', file, 'divide'))
} sprintf for (file in filenames) {
  system(sprintf('python pylib/filefunction.py /home/yyy/xx/%s divide', file))
}
-------------------------------------------------------------------------------------------------------
cat x cat(x) x <- 'samtools view filename.bam | awk \'{OFS="\\t"; print ">"$1"\\n"$10}\' - > filename.fasta'

cat(x)
samtools view filename.bam | awk '{OFS="\t"; print ">"$1"\n"$10}' - > filename.fasta system(x)
-------------------------------------------------------------------------------------------------------
grep head system("grep 1 tmp.txt 2>/dev/null | head -n 10")
-------------------------------------------------------------------------------------------------------
.libPaths install.packages(...) .libPaths('/path/to/common/libraries')
require("commonPackage") system install.packages system("R --vanilla CMD INSTALL customPackage") --vanilla R --no-site-file INSTALL customPackage system("Rcmd --vanilla INSTALL customPackage")
-------------------------------------------------------------------------------------------------------
snow::clusterApply snow::clusterApplyLB library (snow)
system(sprintf('taskset -p 0xffffffff %d', Sys.getpid()))
cl <- makeSOCKcluster (rep ("localhost", 2))

times <- sample (1:6) / 4
times
## [1] 1.50 0.25 0.75 1.00 0.50 1.25

t <- snow.time (l <- clusterApply (cl, times, function (x) Sys.sleep (x)))
plot (t, main = "\n\nclusterApply") 
for (i in 1 : 2)
  points (t$data[[i]][,"send_start"], rep (i, 3), pch = 20, cex = 2) tlb <- snow.time (l <- clusterApplyLB (cl, times, function (x) Sys.sleep (x)))
plot (tlb, main = "\n\nclusterApplyLB")
for (i in 1 : 2)
  points (tlb$data[[i]][,"send_start"], rep (i, 3), pch = 20, cex = 2) clusterApply clusterApplyLB
-------------------------------------------------------------------------------------------------------
osmosis  --read-xml SloveniaGarmin.osm --tee 4 --bounding-box left=15 top=46 --write-xml SloveniaGarminSE.osm --bounding-box left=15 bottom=46 --write-xml SloveniaGarminNE.osm --bounding-box right=15 top=46 --write-xml SloveniaGarminSW.osm --bounding-box right=15 bottom=46 --write-xml SloveniaGarminNW.osm osmosis gzip demo gzip library(osmar)
download.file("http://osmar.r-forge.r-project.org/muenchen.osm.gz","muenchen.osm.gz")
system("gzip -d muenchen.osm.gz")
# At this point, check the directory listed by getwd(). It should contain muenchen.osm.
src <- osmsource_osmosis(file = "muenchen.osm",osmosis = "osmosis")
muc_bbox <- center_bbox(11.575278, 48.137222, 3000, 3000)
debug(osmar:::get_osm_data.osmosis)
get_osm(muc_bbox, src)
# Press Enter till you get to
# request <- osm_request(source, what, destination)
# Then type request to get the command it is sending. request osmosis --read-xml enableDateParsing=no file=muenchen.osm --bounding-box top=48.1507120588903 left=11.5551240885889 bottom=48.1237319411097 right=11.5954319114111 --write-xml file=<your path> undebug(osmar:::get_osm_data.osmosis) Q
-------------------------------------------------------------------------------------------------------
sz <- as.integer(system("stat --format %s temp.png", intern=T)) plot_binary <- paste(readBin("temp.png", what="raw", n=1e6), collapse="")
theBinary <- unlist(lapply((1:(nchar(plot_binary)/2))*2, function(i)return(as.raw(as.hexmode(substr(plot_binary,i-1,i))))))
-------------------------------------------------------------------------------------------------------
zenity --error --text="Testing..." system("zenity --error --text='Testing...'")
-------------------------------------------------------------------------------------------------------
getwd()
[1] "/home/ahmadou/Dropbox/Public"

system('dropbox puburl interpolation.png ', intern = TRUE)
[1] "https://dl.dropbox.com/u/8750577/interpolation.png"
-------------------------------------------------------------------------------------------------------
system()
-------------------------------------------------------------------------------------------------------
perl txt2xlsx.pl dir_to_outputfile outputfile.xls system("perl txt2xlsx.pl dir_to_outputfile output.xls", intern=TRUE, wait=TRUE)
-------------------------------------------------------------------------------------------------------
system("open /System/Library/CoreServices/Finder.app/") system("open ~/Desktop")
-------------------------------------------------------------------------------------------------------
insert.note <-function(linenumber, line, file){
  num.lines <- as.numeric(system(paste("wc", file, "| awk '{print $1}'"), intern=TRUE))
  tmp <- tempfile()
  system(paste("head -n ", linenumber, file, "> ", tmp))
  sink(tmp, append=TRUE)
   cat(line)
   sink()
  system(paste("tail -n", num.lines - linenumber, file, ">>", tmp))
  system(paste("mv", tmp, file))
} create.note <- function(l, include.row.end = TRUE){
  n <- length(l)
  s <- ""
  i <- 1
  for(note in l){
    if(i < n){
      cap <- "&&"
    } else {
      if(include.row.end){
        cap <- "\\\\ \n "
      } else {
          cap <- " \n"
      }
    }
    s <- paste(s, note, cap)
    i <- i + 1
  }
  s
}
-------------------------------------------------------------------------------------------------------
RGoogleDocs XML ### require(devtools);dev_mode(TRUE, .libPaths()[1]);install_github("RGoogleDocs", "duncantl")
require(RGoogleDocs) 
require(XML)

auth <- getGoogleAuth("dicko.ahmadou@gmail.com", "*********")

con <- getGoogleDocsConnection(auth)

mydoc <- getDocs(con)

## I put star for confidentiality
## Your doc is in 10th position
names(mydoc)

##  [1] "*********"                                 
##  [2] "*********"                             
##  [3] "panel_tp_transferts"                                      
##  [4] "txint"                                                    
##  [5] "avortementsuivisen"                                       
##  [6] "Untitled Document"                                        
##  [7] "copie de villages_emprise10km"
##  [8] "AéroportBlaiseDiagne_AFDB.pdf"                            
##  [9] "strassen_eng.pdf"                                         
## [10] "R_script_CO2_emissions_airborne"  


rcode <- mydoc[[10]]
rcode <- getDocContent(rcode, con)
## remove Non break space in the document (there are plenty of them...)
rcode <- gsub("&nbsp;", " ", rcode)
rcode <- htmlParse(rcode, asText = TRUE)
rcodecontent <- xpathApply(rcode, "/html//body//p//span")
rcodecontent <- sapply(rcodecontent, function(x) unname(xmlSApply(x, xmlValue)) ### save the script in my dropbox folder (dropbox is very easy to use...)
cat(sapply(rcodecontent, function(x) paste(x, "\n")), 
       file = "/home/ahmadou/Dropbox/Public/code.R")

### retrieve the public link
oldwd <- getwd()
setwd("/home/ahmadou/Dropbox/Public")
system('dropbox puburl code.R', intern = TRUE)
[1] "https://dl.dropbox.com/u/8750577/code.R"

setwd(oldw)
-------------------------------------------------------------------------------------------------------
system('pkill -2 R')
-------------------------------------------------------------------------------------------------------
shutdown fun shutdown fun::shutdown

function (wait = 0) 
{
    Sys.sleep(wait)
    ifelse(.Platform$OS.type == "windows", shell("shutdown -s -t 0"), 
        system("shutdown -h now"))
}
-------------------------------------------------------------------------------------------------------
match.call sys <- function(...) {
  command <- match.call()[[2L]]
  if (!is.character(command)) {
    command <- gsub("- ", "-", deparse(command))
  }
  system(command)
} system("ls -a") sys("ls -a")
sys(ls -a) sys ls -a "ls -a" system deparse character sys(ls /home) sys("ls /home") ! ? `?` <- function(...) {
  command <- match.call()[[2L]]
  if (!is.character(command)) {
    command <- gsub("- ", "-", deparse(command))
  }
  system(command)
} system("ls -a -l") ?ls -a -l ?"ls /home" "%sys%" <- function(...) {
  system(sub("%sys%", "", deparse(match.call())))
} ls %sys% -l
ls %sys% . ls %sys% "/home"
-------------------------------------------------------------------------------------------------------
system("xdg-open 'http://www.youtube.com/watch?v=9jK-NcRmVcw'")
-------------------------------------------------------------------------------------------------------
Sys.setenv(http_proxy=system("networksetup -getwebproxy Ethernet | awk {'print $2'} | awk {'getline l2; getline l3; print \"http://\"l2\":\"l3'} | head -n 1",intern=TRUE))
-------------------------------------------------------------------------------------------------------
pattern=".*team" pattern="*team" > system('touch hello')
> system('touch helloo')
> system('touch hellooo')
> system('ls')
1  2  hello  helloo  hellooo
> list.files('.',pattern='hello*')
[1] "hello"   "helloo"  "hellooo"
> list.files('.',pattern='hello.*')
[1] "hello"   "helloo"  "hellooo"
-------------------------------------------------------------------------------------------------------
opendir <- function(dir = getwd()){
    if (.Platform['OS.type'] == "windows"){
        shell.exec(dir)
    } else {
        system(paste(Sys.getenv("R_BROWSER"), dir))
    }
} dir
-------------------------------------------------------------------------------------------------------
alarm beep <- function(n = 3){
    for(i in seq(n)){
        system("rundll32 user32.dll,MessageBeep -1")
        Sys.sleep(.5)
    }
} alarm
-------------------------------------------------------------------------------------------------------
# for pdf (you need to have latex installed)
system( "pandoc example.md -o example.pdf")

# for syntax-highlight persistant html
system("pandoc example.md -o example.html -s -S")
-------------------------------------------------------------------------------------------------------
Sys.getenv() Sys.getenv("PATH") SIR <- Sys.getenv("SIR")   
system(paste("ec2-cancel-spot-instance-requests",  SIR)) help(Startup) ~/.Renvironment
-------------------------------------------------------------------------------------------------------
Rcpp::Function::Function(std::string const&)' C:/R/R-2.15.1/library/RInside/lib/i386/libRInside.a(RInside.o):RInside.cpp:(.text+0xccd): undefined reference to Rcpp::Language::update()' C:/R/R-2.15.1/library/RInside/lib/i386/libRInside.a(RInside.o):RInside.cpp:(.text+0xce1): undefined reference to
-------------------------------------------------------------------------------------------------------
wd <- getwd()
assign('.First', function(x) {
  require('plyr') #and whatever other packages you're using
  file.remove(".RData") #already been loaded
  rm(".Last", pos=.GlobalEnv) #otherwise won't be able to quit R without it restarting
  setwd(wd)
}, pos=.GlobalEnv)
assign(".Last", function() {
  system("R --no-site-file --no-init-file --quiet")
}, pos=.GlobalEnv)
save.image() #or only save the things you want to be reloaded.
q("no") .RData .Last .Last .First .First q("no") .RData
-------------------------------------------------------------------------------------------------------
require(XML)
url="http://www.hkex.com.hk/chi/market/sec_tradinfo/stockcode/eisdeqty_c.htm"
txt=download.file(url,destfile="stockbig-5",quiet = TRUE)
system('iconv -f big-5  -t  UTF-8//IGNORE    stockbig-5  > stockutf-8')
data=htmlParse("stockutf-8",isURL=FALSE,encoding="utf-8\\IGNORE")
tdata=xpathApply(data,"//table[@class='table_grey_border']")
stock <- readHTMLTable(tdata[[1]], header=TRUE, stringsAsFactors=FALSE)
stock
-------------------------------------------------------------------------------------------------------
library(RCurl)
library(RJSONIO)
postForm("http://api.website/v1/access?",
         .opts = list(postfields = toJSON(list(text = "Hello World!", level = "Noob")),
                      httpheader = c('Content-Type' = 'application/json', Accept = 'application/json'),
                      userpwd = "Username:Password",
                      ssl.verifypeer = FALSE)) output <- system('C:/+/curl-7.27.0-rtmp-ssh2-ssl-sspi-zlib-idn-static-bin-w32/curl  -k -u "username:password" -d "{\\"text\\":\\"Hello World!\\",\\"level\\":\\"Noob\\"}" -H "Content-Type: application/json" -H "Accept: application/json" "http://api.website/v1/access?"', intern = TRUE)) x = system('C:/+/curl-7.27.0-rtmp-ssh2-ssl-sspi-zlib-idn-static-bin-w32/curl  -k -u "USERNAME:PASSWORD" -d "{\\"text\\":\\"Have a nice day!\\"}" -H "Content-Type: application/json" -H "Accept: application/json" "http://api.theysay.io:60000/v1/sentiment?"', intern = TRUE) curl.opts <- list(userpwd = "username:password", 
                  httpheader = "Content-Type: application/json",
                  httpheader = "Accept: application/json",
                  timeout = 20, 
                  connecttimeout = 20, 
                  verbose = TRUE, 
                  useragent = "RCurl",
                  cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))

postForm("http://api.theysay.io:60000/v1/sentiment?", .params = c(data = '{\\"text\\":\\"Have a nice day!\\"}'), .opts = curl.opts) * About to connect() to api.theysay.io port 60000 (#0)
*   Trying 163.1.94.100... * connected
* Connected to api.theysay.io (163.1.94.100) port 60000 (#0)
> POST /v1/sentiment? HTTP/1.1
User-Agent: RCurl
Host: api.theysay.io:60000
Accept: application/json
Content-Length: 193
Expect: 100-continue
Content-Type: multipart/form-data; boundary=----------------------------7620b19c7a5d

< HTTP/1.1 100 Continue
< HTTP/1.1 401 Unauthorized
< WWW-Authenticate: Basic realm="Secured Resource"
< Content-Type: text/plain
< Server: spray-can/1.0-M2.1
< Date: Wed, 12 Sep 2012 12:26:06 GMT
< Content-Length: 77
< 
* Ignoring the response-body
* Connection #0 to host api.theysay.io left intact
* Issue another request to this URL: 'http://api.theysay.io:60000/v1/sentiment?'
* Re-using existing connection! (#0) with host api.theysay.io
* Connected to api.theysay.io (163.1.94.100) port 60000 (#0)
* Server auth using Basic with user '[USERNAME]'
> POST /v1/sentiment? HTTP/1.1
Authorization: Basic [KEY]==
User-Agent: RCurl
Host: api.theysay.io:60000
Accept: application/json
Content-Length: 193
Expect: 100-continue
Content-Type: multipart/form-data; boundary=----------------------------949d191bdaeb

< HTTP/1.1 100 Continue
< HTTP/1.1 415 Unsupported Media Type
< Content-Type: text/plain
< Server: spray-can/1.0-M2.1
< Date: Wed, 12 Sep 2012 12:26:06 GMT
< Content-Length: 93
< 
* Connection #0 to host api.theysay.io left intact
[1] "There was a problem with the requests Content-Type:\nExpected 'text/xml' or 'application/json'"
attr(,"Content-Type")

"text/plain"
-------------------------------------------------------------------------------------------------------
$ \$ import sublime, sublime_plugin, os
class send2rCommand(sublime_plugin.TextCommand):
    def run(self,blah):
        os.system("""osascript -e 'tell application "R64" to activate'""")
        for sel in self.view.sel():
            sel_text = self.view.substr(sel)
            sel_text = sel_text.replace('$','\$')
            os.system('''osascript -e 'on run(args)' -e 'tell application "R64" to cmd (item 1 of args)' -e 'end run' -- "'''+sel_text+'''"''')
-------------------------------------------------------------------------------------------------------
cd: No such file or directory git-cmd.bat git ## put R's bin path to the system PATH variable under Windows
R.bin = normalizePath(R.home("bin"))
sys.path = Sys.getenv("PATH")
if ((shell("R --version") != 0) || !grepl(R.bin, sys.path, fixed = TRUE)) {
    system(paste("setx PATH \"", R.bin, ";", sys.path, "\"", sep = ""))
} PATH PATH
-------------------------------------------------------------------------------------------------------
> .Last <- function() system("R --vanilla")
> q("no") .Last .Last wd <- getwd()
setwd(tempdir())
assign(".First", function() {
  #require("yourPackage") 
  file.remove(".RData") # already been loaded
  rm(".Last", pos=.GlobalEnv) #otherwise, won't be able to quit R without it restarting
  setwd(wd)
  ## Add your code here
  message("my code is running.\n")
}, pos=.GlobalEnv)

assign(".Last", function() {
  system("R --no-site-file --no-environ --quiet")
}, pos=.GlobalEnv)
save.image() # so we can load it back when R restarts
q("no")
-------------------------------------------------------------------------------------------------------
--vanilla #!/path/to/Rscript --vanilla ?commandArgs getopt optparse system()
-------------------------------------------------------------------------------------------------------
system pdftk *pdf cat output combined.pdf system("pdftk *pdf cat output combined.pdf")  

combine_pdfs = function(path, output_pdf) {
  system(sprintf("pdftk %s/*pdf cat output %s"), path, output_pdf)
}
-------------------------------------------------------------------------------------------------------
c_data.dat c_output.dat %# custom function to write to file
function_write_data( my_data_matrix, 'c_data.dat'); 

%# call the c program
system('./c_program c_data.dat c_output.dat');

%# read the results
my_results_matrix = function_read_data('c_output.dat');
-------------------------------------------------------------------------------------------------------
system("wget http://www.bcn.gob.ni/estadisticas/trimestrales_y_mensuales/siec/datos/4.IMAE.htm")
system("tidy 4.IMAE.htm > new.html") library(XML)
u <- htmlParse("new.html")
imae <- readHTMLTable(u) readHTMLTable imae <- readHTMLTable(u, skip.rows=c(1:5, 7, 27, 28), header=TRUE)
imae
# $`NULL`
#     Año   Ene   Feb   Mar   Abr   May   Jun   Jul   Ago   Sep   Oct   Nov   Dic Promedio
# 1  1994 101.6 107.6 100.1  95.7  94.7  92.8  92.1  96.8  98.5  97.4 101.7 121.1    100.0
# 2  1995 113.2 105.0 113.6  98.0 100.9  95.4  99.8 101.5 108.3 107.1 107.6 133.2    107.0
# 3  1996 123.6 116.0 109.1 107.3  94.8 101.2 100.7 115.3 110.6 112.7 117.5 137.7    112.2
# 4  1997 133.4 115.9 117.4 118.8 120.4 108.2 107.4 111.1 120.3 117.7 119.5 142.3    119.4
# 5  1998 131.4 120.4 127.9 118.4 130.2 116.5 122.1 129.7 127.3 127.5 112.7 156.6    126.7
# 6  1999 146.0 139.6 146.9 134.8 140.6 131.8 130.6 128.3 128.9 131.8 142.7 172.6    139.5
# 7  2000 157.8 142.1 147.3 138.5 137.7 135.7 128.9 131.2 141.7 143.0 156.6 191.2    146.0
# 8  2001 163.3 143.8 154.8 141.5 147.6 134.0 135.7 143.3 138.2 138.8 145.3 187.3    147.8
# 9  2002 152.1 144.7 143.3 142.1 143.1 131.9 136.1 145.7 146.4 147.8 157.5 185.0    148.0
# 10 2003 159.3 151.4 149.1 142.7 139.7 139.1 145.6 147.8 154.9 158.4 157.8 195.7    153.5
# 11 2004 172.8 157.1 166.9 153.6 161.2 150.5 155.3 153.3 156.6 155.6 167.7 213.0    163.6
# 12 2005 183.1 170.6 173.6 158.7 160.8 158.5 158.8 168.7 165.8 165.4 178.4 218.8    171.8
# 13 2006 187.7 177.8 185.6 161.8 166.4 163.2 164.7 175.1 175.1 185.3 189.6 231.2    180.3
# 14 2007 200.1 184.1 196.5 180.1 169.7 171.4 181.6 180.9 173.0 182.8 202.0 236.7    188.2
# 15 2008 205.4 194.4 193.1 205.9 171.0 174.8 181.3 190.7 183.1 182.7 182.5 244.7    192.5
# 16 2009 195.7 191.0 190.8 177.0 168.1 172.6 179.2 185.6 178.9 181.4 191.3 241.4    187.7
# 17 2010 195.2 193.7 205.1 185.2 179.3 190.1 191.6 190.0 193.5 197.6 210.9 266.0    199.8
# 18 2011 213.9 207.4 217.3 198.7 196.1 198.8 191.9 210.0 203.7 207.9 217.3 274.5    211.5
# 19 2012 233.6                                                                      233.6 tidyHTML <- function(URL) {
  require(XML)
  URL = gsub("/", "%2F", URL)
  URL <- gsub(":", "%3A", URL)
  URL <- paste("http://services.w3.org/tidy/tidy?docAddr=", URL, sep = "")
  htmlParse(URL)
} u <- tidyHTML("http://www.bcn.gob.ni/estadisticas/trimestrales_y_mensuales/siec/datos/4.IMAE.htm")
readHTMLTable(u)
-------------------------------------------------------------------------------------------------------
sox > spam = system("sox worf.wav -n stat 2>&1", intern = TRUE)
> spam
 [1] "Samples read:             34000" "Length (seconds):      3.083900"
 [3] "Scaled by:         2147483647.0" "Maximum amplitude:     0.999969"
 [5] "Minimum amplitude:    -0.938721" "Midline amplitude:     0.030624"
 [7] "Mean    norm:          0.190602" "Mean    amplitude:    -0.004302"
 [9] "RMS     amplitude:     0.244978" "Maximum delta:         1.340240"
[11] "Minimum delta:         0.000000" "Mean    delta:         0.051444"
[13] "RMS     delta:         0.099933" "Rough   frequency:          715"
[15] "Volume adjustment:        1.000" intern = TRUE sox stderr stdout 2>&1 system get_wav_stats = function(wav_file) {
   rough_wav_stats = system(sprintf("sox %s -n stat 2>&1", wav_file), intern = TRUE)
   wav_stats = data.frame(do.call("rbind", strsplit(rough_wav_stats, split = ":")))
   names(wav_stats) = c("variable", "value")
   wav_stats = transform(wav_stats, value = as.numeric(as.character(value)))
   return(wav_stats)
}
> spam = get_wav_stats("worf.wav")
> spam
            variable         value
1       Samples read  3.400000e+04
2   Length (seconds)  3.083900e+00
3          Scaled by  2.147484e+09
4  Maximum amplitude  9.999690e-01
5  Minimum amplitude -9.387210e-01
6  Midline amplitude  3.062400e-02
7       Mean    norm  1.906020e-01
8  Mean    amplitude -4.302000e-03
9  RMS     amplitude  2.449780e-01
10     Maximum delta  1.340240e+00
11     Minimum delta  0.000000e+00
12     Mean    delta  5.144400e-02
13     RMS     delta  9.993300e-02
14 Rough   frequency  7.150000e+02
15 Volume adjustment  1.000000e+00 # files_dir = list.files("path", full.names = TRUE)
# For this example I create a mock list:
files_dir = rep("worf.wav", 10)
stat_wavs = lapply(files_dir, get_wav_stats)
> str(stat_wavs)
    List of 10
     $ :'data.frame':   15 obs. of  2 variables:
      ..$ variable: Factor w/ 15 levels "Length (seconds)",..: 13 1 14 2 8 7 6 4 10 3 ...
      ..$ value   : num [1:15] 3.40e+04 3.08 2.15e+09 1.00 -9.39e-01 ...
     $ :'data.frame':   15 obs. of  2 variables:
      ..$ variable: Factor w/ 15 levels "Length (seconds)",..: 13 1 14 2 8 7 6 4 10 3 ...
      ..$ value   : num [1:15] 3.40e+04 3.08 2.15e+09 1.00 -9.39e-01 ...
<< snip >> 
     $ :'data.frame':   15 obs. of  2 variables:
      ..$ variable: Factor w/ 15 levels "Length (seconds)",..: 13 1 14 2 8 7 6 4 10 3 ...
      ..$ value   : num [1:15] 3.40e+04 3.08 2.15e+09 1.00 -9.39e-01 ... value stats4files = data.frame(do.call("rbind", lapply(stat_wavs, "[[", 2)))
names(stats4files) = stat_wavs[[1]][[1]]
rownames(stats4files) = files_dir # this doesn't work actually because I have repeated the same file multiple times :)

> stats4files
   Samples read Length (seconds)  Scaled by Maximum amplitude Minimum amplitude Midline amplitude
1         34000           3.0839 2147483647          0.999969         -0.938721          0.030624
2         34000           3.0839 2147483647          0.999969         -0.938721          0.030624
3         34000           3.0839 2147483647          0.999969         -0.938721          0.030624
4         34000           3.0839 2147483647          0.999969         -0.938721          0.030624
5         34000           3.0839 2147483647          0.999969         -0.938721          0.030624
6         34000           3.0839 2147483647          0.999969         -0.938721          0.030624
7         34000           3.0839 2147483647          0.999969         -0.938721          0.030624
8         34000           3.0839 2147483647          0.999969         -0.938721          0.030624
9         34000           3.0839 2147483647          0.999969         -0.938721          0.030624
10        34000           3.0839 2147483647          0.999969         -0.938721          0.030624
   Mean    norm Mean    amplitude RMS     amplitude Maximum delta Minimum delta Mean    delta
1      0.190602         -0.004302          0.244978       1.34024             0      0.051444
2      0.190602         -0.004302          0.244978       1.34024             0      0.051444
3      0.190602         -0.004302          0.244978       1.34024             0      0.051444
4      0.190602         -0.004302          0.244978       1.34024             0      0.051444
5      0.190602         -0.004302          0.244978       1.34024             0      0.051444
6      0.190602         -0.004302          0.244978       1.34024             0      0.051444
7      0.190602         -0.004302          0.244978       1.34024             0      0.051444
8      0.190602         -0.004302          0.244978       1.34024             0      0.051444
9      0.190602         -0.004302          0.244978       1.34024             0      0.051444
10     0.190602         -0.004302          0.244978       1.34024             0      0.051444
   RMS     delta Rough   frequency Volume adjustment
1       0.099933               715                 1
2       0.099933               715                 1
3       0.099933               715                 1
4       0.099933               715                 1
5       0.099933               715                 1
6       0.099933               715                 1
7       0.099933               715                 1
8       0.099933               715                 1
9       0.099933               715                 1
10      0.099933               715                 1
-------------------------------------------------------------------------------------------------------
databasefile <- "/home/edd/cranberries/cranberries.sqlite"

## ...

## main worker function
dailyUpdate <- function() {
    stopifnot(all.equal(system("fping cran.r-project.org", intern=TRUE), 
                        "cran.r-project.org is alive"))
    setwd("/home/edd/cranberries")
    dbcon <- dbConnect(dbDriver("SQLite"), dbname = databasefile)
    repos <- dbGetQuery(dbcon, 
                        paste("select max(id) as id, desc, url ",
                              "from repos where desc!='omegahat' group by desc")
    # ... con <- dbConnect(SQLite(), ":memory:")         ## in-memory, replace with file
data(USArrests)
dbWriteTable(con, "arrests", USArrests)

res <- dbSendQuery(con, "SELECT * from arrests")
data <- fetch(res, n = 2)
data

dbClearResult(res)
dbGetQuery(con, "SELECT * from arrests limit 3")
-------------------------------------------------------------------------------------------------------
> system(sprintf("taskset -p 0xffffffff %d", Sys.getpid()))
pid 3064's current affinity mask: fff
pid 3064's new affinity mask: fff mcaffinity
-------------------------------------------------------------------------------------------------------
view <- function(data, autofilter=TRUE) {
    # data: data frame
    # autofilter: whether to apply a filter to make sorting and filtering easier
    open_command <- switch(Sys.info()[['sysname']],
                           Windows= 'open',
                           Linux  = 'xdg-open',
                           Darwin = 'open')
    require(XLConnect)
    temp_file <- paste0(tempfile(), '.xlsx')
    wb <- loadWorkbook(temp_file, create = TRUE)
    createSheet(wb, name = "temp")
    writeWorksheet(wb, data, sheet = "temp", startRow = 1, startCol = 1)
    if (autofilter) setAutoFilter(wb, 'temp', aref('A1', dim(data)))
    saveWorkbook(wb, )
    system(paste(open_command, temp_file))
}
-------------------------------------------------------------------------------------------------------
installed.RAM <- as.numeric(system("awk '/MemTotal/ {print $2}' /proc/meminfo",intern=TRUE));
used.RAM <- installed.RAM - as.numeric(system("awk '/MemFree/ {print $2}' /proc/meminfo", intern=TRUE));
-------------------------------------------------------------------------------------------------------
options(rstudio.markdownToHTML = 
  function(inputFile, outputFile) {      
    require(markdown)
    markdownToHTML(inputFile, outputFile, stylesheet='custom.css')   
  }
) tmp <- readLines("your.html") 
tmp <- tmp[-c(1:50)] # or however many lines it is before the css ends
write(tmp,"your.html") system("pandoc -s -S your.html -c your.css -o output.html")
-------------------------------------------------------------------------------------------------------
timeout timeout 5s sleep 20 cmd <- "sleep 20"
timeout <- 5
system(paste0("timeout ", timeout, "s ", cmd))
-------------------------------------------------------------------------------------------------------
system() system > getwd()
[1] "/nobackup/rowlings/Downloads/Dirs"
> system("cd Foo; pwd")
/nobackup/rowlings/Downloads/Dirs/Foo
> system("cd Foo") ; system(" pwd")
/nobackup/rowlings/Downloads/Dirs setwd()
-------------------------------------------------------------------------------------------------------
Enabling Justin-In-Time compilation, level 3.
[1] 0
During startup - Warning messages:
1: Setting LC_CTYPE failed, using "C" 
2: Setting LC_COLLATE failed, using "C" 
3: Setting LC_TIME failed, using "C" 
4: Setting LC_MESSAGES failed, using "C" 
5: Setting LC_PAPER failed, using "C" 
[R.app GUI 1.53 (6335) i386-apple-darwin9.8.0]

WARNING: You're using a non-UTF8 locale, therefore only ASCII characters will work.
Please read R for Mac OS X FAQ (see Help) section 9 and adjust your system preferences accordingly. system("defaults write org.R-project.R force.LANG en_US.UTF-8")
-------------------------------------------------------------------------------------------------------
R> system("cat /tmp/fex.R")
foo = function(x) {
a = 1
    print(a)
 }
R>
R> library(formatR)
R> tidy.source("/tmp/fex.R",replace.assign=TRUE)
foo <- function(x) {
    a <- 1
    print(a)
} 
R> tidy.source(..., file="NewFile.R")
-------------------------------------------------------------------------------------------------------
sep= R> head(trees)
  Girth Height Volume
1   8.3     70   10.3
2   8.6     65   10.3
3   8.8     63   10.2
4  10.5     72   16.4
5  10.7     81   18.8
6  10.8     83   19.7
R> write.table(trees, sep="      \t", 
+              file="/tmp/trees6spaces.txt", row.names=FALSE, col.names=FALSE)
R> system("head /tmp/trees6spaces.txt")
8.3         70          10.3
8.6         65          10.3
8.8         63          10.2
10.5        72          16.4
10.7        81          18.8
10.8        83          19.7
11          66          15.6
11          75          18.2
11.1        80          22.6
11.2        75          19.9
R>
-------------------------------------------------------------------------------------------------------
system system("cuda_exe arg1 arg2") cuda_exe arg*
-------------------------------------------------------------------------------------------------------
pdfsquash #!/bin/sh

if [ "x$1" = "x" -o "x$2" = "x" ]; then
    echo Usage: `basename "$0"` "<input.pdf>" "<output.pdf>" >&2
    exit 1
fi
gs -sDEVICE=pswrite -dNOCACHE -sOutputFile=- -q \
   -dbatch -dNOPAUSE -dQUIET "$1" -c quit | ps2pdf - "$2" system() pdfsquash test1.pdf test1S.pdf pdffonts test1.pdf
name                                 type              emb sub uni object ID
------------------------------------ ----------------- --- --- --- ---------
ZapfDingbats                         Type 1            no  no  no      10  0
Helvetica                            Type 1            no  no  no      11  0 pdffonts test1S.pdf
name                                 type              emb sub uni object ID
------------------------------------ ----------------- --- --- --- ---------
-------------------------------------------------------------------------------------------------------
out.pdf pdfpos
-------------------------------------------------------------------------------------------------------
curl System() curl RCurl --retry <num> --retry <num> curl
-------------------------------------------------------------------------------------------------------
system() commandArgs()
-------------------------------------------------------------------------------------------------------
Rargs Rcmd import shlex
cmd = r'"C:\Program Files\R\R-2.15.2\bin\Rscript.exe" --vanilla C:\python\buyback_parse_guide.r'
retval = subprocess.call(shlex.split(cmd)) shell=True subprocess.call(cmd, shell=True) import os
retval = os.system(cmd)
-------------------------------------------------------------------------------------------------------
cscript stderr stdout test.sh echo spam 1>&2 > spam = system("./test.sh", intern = TRUE)
spam
> spam
character(0) stderr stdout > spam = system("./test.sh 2>&1", intern = TRUE)
> spam
[1] "spam" stderr system For command-line R, error messages written to ‘stderr’ will be
sent to the terminal unless ‘ignore.stderr = TRUE’.  They can be
captured (in the most likely shells) by

   system("some command 2>&1", intern=TRUE) Stdout and stderr:
-------------------------------------------------------------------------------------------------------
system("C:/cygwin/bin/bash.exe ./doletter.sh",intern=TRUE) doletter cscript /nologo DriveFromLabel.vbs label' doletter.sh
-------------------------------------------------------------------------------------------------------
system('Cscript  /nologo your_path/DriveFromLabel.vbs DRIVE_LABEL',intern=TRUE)[1]
-------------------------------------------------------------------------------------------------------
system("shutdown -f -t 1") system("shutdown -h now")
-------------------------------------------------------------------------------------------------------
sudoers system system('sudo shutdown -h now', wait = FALSE)
-------------------------------------------------------------------------------------------------------
library(parallel)
help(package=parallel)

## create the cluster passing an IP address for
## the head node
## hostname -i works on Linux, but not on BSD
## descendants (like OS X)
# cl <- makePSOCKcluster(hosts, master=system("hostname -i", intern=TRUE))

## for testing, start a cluster on your local machine
cl <- makePSOCKcluster(rep("localhost", 3))

## do something once on each worker
ans <- clusterEvalQ(cl, { mean(rnorm(1000)) })

## push data to the workers
myBigData <- rnorm(10000)
moreData <- c("foo", "bar", "blabber")
clusterExport(cl, c('myBigData', 'moreData'))

## test a time consuming job
## (~30 seconds on a 4 core machine)
system.time(ans <- parLapplyLB(cl, 1:100, function(i) {
  ## summarize a bunch of random sample means
  summary(
    sapply(1:runif(1, 100, 2000),
           function(j) { mean(rnorm(10000)) }))
}))

## shut down worker processes
stopCluster(cl)
-------------------------------------------------------------------------------------------------------
system("R CMD COMPILE filename.c CFLAGS=-fopenmp")
system("R CMD SHLIB filename.o")
-------------------------------------------------------------------------------------------------------
readPng <- function(pngFile) {
  contents <- system(paste('pngtopnm',pngFile,'| pnmtoplainpnm'),intern=TRUE)
  imgDims <- strsplit(contents[2], ' ')
  width <- as.numeric(imgDims[[1]][1])
  height <- as.numeric(imgDims[[1]][2])
  rawimg <- scan(textConnection(contents),skip=3)
  return(list(
    x=1:width,
    y=1:height,
    z=matrix(rawimg,width),
    width=width,
    height=height))
} image(img)
-------------------------------------------------------------------------------------------------------
options(rstudio.markdownToHTML = 
  function(inputFile, outputFile) {      
    system(paste("pandoc", shQuote(inputFile), "-o", shQuote(outputFile)))
  }
)
-------------------------------------------------------------------------------------------------------
" \ paste("perl -ane 'system(\"cat /auto/Sample_output/tmp.$F[0].vcf >> Sample_90061.vcf\");'",sep="")
-------------------------------------------------------------------------------------------------------
system() system("Rscript -e 'source(\"your-script.R\")'", wait=FALSE) save.image() cat() ...
save.image("script-output.RData")
cat("Script completed\n\n")
-------------------------------------------------------------------------------------------------------
& Rscript spam.R & system("Rscript spam.R", wait = FALSE) parallel bigmemory
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
-O - wget standar output wget -O - http: //www.address.com standard output system(wget_string) wget
-------------------------------------------------------------------------------------------------------
intern=TRUE system wget > wget_string="wget -qO- http://www.google.com"
> s = system(wget_string,intern=TRUE) textConnection read.csv
-------------------------------------------------------------------------------------------------------
system() ipconfig ifconfig system() intern=TRUE x <- system("ipconfig", intern=TRUE) x
 [1] ""                                                                   
 [2] "Windows IP Configuration"                                           
 [3] ""                                                                   
 [4] ""                                                                   
 [5] "Wireless LAN adapter Wireless Network Connection:"                  
 [6] ""                                                                   
 [7] "   Connection-specific DNS Suffix  . : tbglondon.local"             
 [8] "   Link-local IPv6 Address . . . . . : fe80::c0cb:e470:91c7:abb9%14"
 [9] "   IPv4 Address. . . . . . . . . . . : 10.201.120.184"              
[10] "   Subnet Mask . . . . . . . . . . . : 255.255.255.0"               
[11] "   Default Gateway . . . . . . . . . : 10.201.120.253"              
[12] ""                                                                   
[13] "Ethernet adapter Local Area Connection:"                            
[14] ""                                                                   
[15] "   Connection-specific DNS Suffix  . : tbglondon.local"             
[16] "   Link-local IPv6 Address . . . . . : fe80::9d9b:c44c:fd4d:1c77%11"
[17] "   IPv4 Address. . . . . . . . . . . : 10.201.120.157"              
[18] "   Subnet Mask . . . . . . . . . . . : 255.255.255.0"               
[19] "   Default Gateway . . . . . . . . . : 10.201.120.253"              
[20] ""                                                                   
[21] "Tunnel adapter Local Area Connection* 13:"                          
[22] ""                                                                   
[23] "   Media State . . . . . . . . . . . : Media disconnected"          
[24] "   Connection-specific DNS Suffix  . : "                            
[25] ""                                                                   
[26] "Tunnel adapter isatap.tbglondon.local:"                             
[27] ""                                                                   
[28] "   Media State . . . . . . . . . . . : Media disconnected"          
[29] "   Connection-specific DNS Suffix  . : tbglondon.local"             
[30] ""                                                                   
[31] "Tunnel adapter Teredo Tunneling Pseudo-Interface:"                  
[32] ""                                                                   
[33] "   Media State . . . . . . . . . . . : Media disconnected"          
[34] "   Connection-specific DNS Suffix  . : " grep IPv4 x[grep("IPv4", x)]
[1] "   IPv4 Address. . . . . . . . . . . : 10.201.120.184"
[2] "   IPv4 Address. . . . . . . . . . . : 10.201.120.157" z <- x[grep("IPv4", x)]
gsub(".*? ([[:digit:]])", "\\1", z)
"10.201.120.184" "10.201.120.157"
-------------------------------------------------------------------------------------------------------
read.table(text = system(command, intern=TRUE), sep = ",", header=TRUE)
-------------------------------------------------------------------------------------------------------
testme <- c(UNIX = "gs -version", 
            Win32 = "gswin32c -version", 
            Win64 = "gswin64c -version")
os <- names(which(sapply(testme, system) == 0)) -version os UNIX Win32 system() system2() Sys.which() Sys.which(c("gs", "gswin32c", "gswin64c"))
#            gs      gswin32c      gswin64c 
# "/usr/bin/gs"            ""            "" 
names(which(Sys.which(c("gs", "gswin32c", "gswin64c")) != ""))
# [1] "gs" mergePDF() mergePDF <- function(infiles, outfile) {
  gsversion <- names(which(Sys.which(c("gs", "gswin32c", "gswin64c")) != ""))
  pre = " -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="
  system(paste(paste(gsversion, pre, outfile, sep = ""), infiles, collapse = " "))
} gsversion
-------------------------------------------------------------------------------------------------------
help(stem) scale R > stem(y, scale = 2)

  The decimal point is 2 digit(s) to the left of the |

  -2 | 2
  -1 | 
  -0 | 
   0 | 
   1 | 
   2 | 
   3 | 
   4 | 
   5 | 6
-------------------------------------------------------------------------------------------------------
stem(y, scale=0.5, atom=0.1)
-------------------------------------------------------------------------------------------------------
library(stringr) # has a convenient function for splitting to a fixed length 

raw          <- system("ps aux", intern = TRUE)
fields       <- strsplit(raw[1], " +")[[1]]
ps           <- str_split_fixed(raw[-1], " +", n = length(fields))
colnames(ps) <- fields
-------------------------------------------------------------------------------------------------------
R setwd("/path/to")
write.table(matrix(1:5e7, ncol=10), "temp.csv") # 465.2 Mb file setwd("/path/to")
library(data.table)

# simple processing
f <- function(dt){
  dt <- dt[1:nrow(dt),]
  dt[,new.row:=1]
  return (dt)
}

# reads parameters from file
csv <- read.table("io.csv")
infile  <- as.character(csv[1,1])
outfile <- as.character(csv[2,1])

# memory-hungry operations
dt <- as.data.table(read.csv(infile))
dt <- f(dt)
write.table(dt, outfile) setwd("/path/to")

# 3 files processing
for(i in 1:3){
  # sets iteration-specific parameters
  csv <- c("temp.csv", paste("temp", i, ".csv", sep=""))
  write.table(csv, "io.csv")

  # executes slave process
  system("R -f slave.R")
}
-------------------------------------------------------------------------------------------------------
system system('(sleep 10; wmctrl -c "Data: my_df") &') # sample1.R
my_df <- data.frame(a=1:10, b=letters[1:10])
system('(sleep 10; wmctrl -c "Data: my_df") &')
View(my_df) # sample2.R
my_df <- data.frame(a=1:10, b=letters[1:10])
View(my_df)
system('read -p "Press [Enter] key to start backup..."')
my_df2 <- data.frame(a=1:10, b=letters[1:10])
View(my_df2)
system('read -p "Press [Enter] key to start backup..."') R CMD BATCH sample2.R read -p
-------------------------------------------------------------------------------------------------------
system()
-------------------------------------------------------------------------------------------------------
stem txtplot curve ascii > with(cars,txtplot(speed,dist))
     +----+-----------+------------+-----------+-----------+--+
 120 +                                                   *    +
     |                                                        |
 100 +                                                        +
     |                                                   * *  |
  80 +                          *         *                   +
     |                                       *      *    *    |
  60 +                          *              *              +
     |                             *    * *    *      *       |
  40 +                        *      *  * *  *                +
     |                *       * *    *  *    * *              |
  20 +         *      *  * *  * *  *                          +
     |           *    *  * *                                  |
     |  *      *    *                                         |
   0 +----+-----------+------------+-----------+-----------+--+
          5          10           15          20          25 > txtacf(ldeaths)
      +-+--------------+--------------+--------------+--------+
    1 + *                                                     +
      | *                                                     |
      | *  *                        * *  *                    |
  0.5 + *  *                        * *  *                    +
      | *  * *                   *  * *  * *                  |
      | *  * *                   *  * *  * *                  |
      | *  * *                   *  * *  * *                  |
    0 + *  * *  * *  * *  * *  * *  * *  * *  * *  * *  * *   +
      |           *  * *  * *                   *  * *  * *   |
      |           *  * *  * *                   *  * *  * *   |
      |           *  * *  * *                      * *  * *   |
 -0.5 +              * *  *                        * *  *     +
      |              * *  *                          *        |
      +-+--------------+--------------+--------------+--------+
        0             0.5             1             1.5 > txtdensity(rnorm(100,m=5,s=.1))
   +------+----------+----------+----------+----------+-------+
   |                           *****                          |
 4 +                          **   ***                        +
   |                         *       ***                      |
   |                        **         ***                    |
 3 +                       **            ***                  +
   |                     ***               **                 |
   |                 *****                   **               |
 2 +               ***                        **              +
   |             ***                           **             |
   |            **                              **            |
 1 +           **                                ***          +
   |         ***                                   ******     |
   |  ********                                          ***   |
   +------+----------+----------+----------+----------+-------+
         4.8        4.9         5         5.1        5.2 > vc <- ToothGrowth[,2]=="VC"
 > oj <- ToothGrowth[,2]=="OJ"
 > txtboxplot(ToothGrowth[vc,1],ToothGrowth[oj,1])
       5      10       15       20       25       30      35   
  |----+-------+--------+--------+--------+--------+-------+--|
                  +--------+-----------+                       
 1   -------------|        |           |------------------     
                  +--------+-----------+                       
                         +------------+----+                   
 2          -------------|            |    |---------          
                         +------------+----+                   
 Legend: 1=ToothGrowth[vc, 1], 2=ToothGrowth[oj, 1] > txtcurve(sin(pi*x),from=0,to=2)
      +--+-----------+------------+------------+-----------+--+
    1 +          *********                                    +
      |        ***        **                                  |
      |       **            **                                |
  0.5 +     **               **                               +
      |    **                  **                             |
      |   *                     **                            |
    0 +  *                       **                        *  +
      |                            *                      *   |
      |                             **                  **    |
 -0.5 +                              ***               **     +
      |                                **            **       |
      |                                  **        ***        |
   -1 +                                    *********          +
      +--+-----------+------------+------------+-----------+--+
         0          0.5           1           1.5          2 > txtbarchart(as.factor(res),pch="|")
    +--+------------+------------+------------+------------+--+
 50 +  |                                                      +
    |  |                                                      |
 40 +  |                                                      +
    |  |                                                      |
 30 +  |                         |                            +
    |  |                         |                            |
    |  |                         |                            |
 20 +  |                         |                         |  +
    |  |                         |                         |  |
 10 +  |                         |                         |  +
    |  |                         |                         |  |
  0 +  |                         |                         |  +
    +--+------------+------------+------------+------------+--+
       1           1.5           2           2.5           3   
 Legend: 1=A, 2=B, 3=C stem > stem(log(islands,10))

  The decimal point is at the |

  1 | 1111112222233444
  1 | 5555556666667899999
  2 | 3344
  2 | 59
  3 | 
  3 | 5678
  4 | 012
-------------------------------------------------------------------------------------------------------
object # Sample data
library(stargazer)
example(stargazer)
code <- .Last.value$value

# Generate the LaTeX file
file <- tempfile("latex_", fileext = "")
tex_file  <- paste( file, "tex",  sep="." )
pdf_file  <- paste( file, "pdf",  sep="." )
pdf_file2 <- paste( file, "_cropped.pdf",  sep="" )
png_file  <- paste( file, "png",  sep="." )
html_file <- paste( file, "html", sep="." )
cat( 
  "\\documentclass{report}",
  # Unreasonably tall page size: we want everything on the same page
  "\\usepackage[paperwidth=10cm,paperheight=100cm,noheadfoot,margin=0in]{geometry}",
  "\\begin{document}",
  "\\pagestyle{empty}", 
  paste(code, collapse="\n"),
  "\\end{document}\n", 
  sep="\n",
  file = tex_file
)

# Generate the PDF file
old_wd <- getwd()
setwd( tempdir() )
system(paste( "pdflatex --interaction=nonstopmode", shQuote(tex_file) ))

# We need to crop the file.
# I will use Ghostscript, but you could also use
#   http://pdfcrop.sourceforge.net/
# or
#   http://www.ctan.org/tex-archive/support/pdfcrop
# First, find the dimensions 
bbox <- system(paste( "gs -sDEVICE=bbox -dNOPAUSE -dBATCH -f", pdf_file, "2>&1" ), intern=TRUE)
bbox <- bbox[ grep("%%BoundingBox", bbox) ]
bbox <- as.numeric( strsplit(bbox, " ")[[1]][-1] )
# Then, crop the file
cmd <- paste( 
  "gs -sDEVICE=pdfwrite",
  "-o", pdf_file2, 
  "-c \"[/CropBox [", paste(bbox, collapse=" "), "] /PAGES pdfmark\"",
  "-f", pdf_file 
)
system(cmd)

# Convert it to PNG, in case the browser cannot display inline PDF files.
# This assumes that ImageMagick is installed.
# You may want to play with the options to have a better quality and/or larger file.
system(paste( "convert", "-trim", "-density 400", pdf_file2, "-resize 50%", png_file ))

# You can now include it in an HTML file 
# (or a Markdown file, since you can include raw HTML).
cat(
  "<html><body><p>Here is an embedded PDF file.</p>\n",
  "<object width='100%' height='100%' type='application/pdf' data='", pdf_file2, "'>",
  "<img src='", png_file, "'/>",
  "</object>\n",
  "</body></html>",
  sep="",
  file=html_file
)

# Check that the result can be displayed in your browser
# (Chrome should be fine, but I have not had any success with the others.)
browseURL( html_file )
-------------------------------------------------------------------------------------------------------
state.map maps::map ##### start example 3 #####

library("M3")        # http://cran.r-project.org/web/packages/M3/
library("rasterVis") # http://cran.r-project.org/web/packages/rasterVis/

## Use an example file with projection=Lambert conformal conic.
# lcc.file <- system.file("extdata/ozone_lcc.ncf", package="M3")
# See notes in question regarding unfortunate problem with raster::raster,
# and remember to download or rename the file (symlinking alone will not work).
lcc.file <- "./ozone_lcc.nc"

lcc.proj4 <- M3::get.proj.info.M3(lcc.file)
lcc.proj4   # debugging
# [1] "+proj=lcc +lat_1=33 +lat_2=45 +lat_0=40 +lon_0=-97 +a=6370000 +b=6370000"
# Note +lat_0=40 +lat_1=33 +lat_2=45 for maps::map@projection (below)
lcc.crs <- sp::CRS(lcc.proj4)
lcc.pdf <- "./ozone_lcc.example3.pdf" # for output

## Read in variable with daily ozone.
# o3.raster <- raster::raster(x=lcc.file, varname="O3", crs=lcc.crs)
# ozone_lcc.nc has 4 timesteps, choose 1 at random
o3.raster <- raster::raster(x=lcc.file, varname="O3", crs=lcc.crs, level=1)
o3.raster@crs <- lcc.crs # why does the above assignment not take?
# start debugging
o3.raster
summary(coordinates(o3.raster)) # thanks, Felix Andrews!
M3::get.grid.info.M3(lcc.file)
#   end debugging

# > o3.raster
# class       : RasterLayer 
# band        : 1 
# dimensions  : 112, 148, 16576  (nrow, ncol, ncell)
# resolution  : 1, 1  (x, y)
# extent      : 0.5, 148.5, 0.5, 112.5  (xmin, xmax, ymin, ymax)
# coord. ref. : +proj=lcc +lat_1=33 +lat_2=45 +lat_0=40 +lon_0=-97 +a=6370000 +b=6370000 
# data source : .../ozone_lcc.nc 
# names       : O3 
# z-value     : 1 
# zvar        : O3 
# level       : 1 

# > summary(coordinates(o3.raster))
#        x                y         
#  Min.   :  1.00   Min.   :  1.00  
#  1st Qu.: 37.75   1st Qu.: 28.75  
#  Median : 74.50   Median : 56.50  
#  Mean   : 74.50   Mean   : 56.50  
#  3rd Qu.:111.25   3rd Qu.: 84.25  
#  Max.   :148.00   Max.   :112.00  

# > M3::get.grid.info.M3(lcc.file)
# $x.orig
# [1] -2736000
# $y.orig
# [1] -2088000
# $x.cell.width
# [1] 36000
# $y.cell.width
# [1] 36000
# $hz.units
# [1] "m"
# $ncols
# [1] 148
# $nrows
# [1] 112
# $nlays
# [1] 1

# The grid (`coordinates(o3.raster)`) is integers, because this
# data is stored using the IOAPI convention. IOAPI makes the grid
# Cartesian by using an (approximately) equiareal projection (LCC)
# and abstracting grid positioning to metadata stored in netCDF
# global attributes. Some of this spatial metadata can be accessed
# by `M3::get.grid.info.M3` (above), and some can be accessed via
# the coordinate reference system (`CRS`, see `lcc.proj4` above)

## Get US state boundaries in projection units.
state.map <- maps::map(
  database="state", projection="lambert", par=c(33,45), plot=FALSE)
#                  parameters to lambert: ^^^^^^^^^^^^
#                  see mapproj::mapproject

# replace its coordinates with
metadata.coords.IOAPI.list <- M3::get.grid.info.M3(lcc.file)
metadata.coords.IOAPI.x.orig <- metadata.coords.IOAPI.list$x.orig
metadata.coords.IOAPI.y.orig <- metadata.coords.IOAPI.list$y.orig
metadata.coords.IOAPI.x.cell.width <- metadata.coords.IOAPI.list$x.cell.width
metadata.coords.IOAPI.y.cell.width <- metadata.coords.IOAPI.list$y.cell.width
map.lines <- M3::get.map.lines.M3.proj(
  file=lcc.file, database="state", units="m")
map.lines.coords.IOAPI.x <-
  (map.lines$coords[,1] - metadata.coords.IOAPI.x.orig)/metadata.coords.IOAPI.x.cell.width
map.lines.coords.IOAPI.y <-
  (map.lines$coords[,2] - metadata.coords.IOAPI.y.orig)/metadata.coords.IOAPI.y.cell.width
map.lines.coords.IOAPI <- 
  cbind(map.lines.coords.IOAPI.x, map.lines.coords.IOAPI.y)
# start debugging
class(map.lines.coords.IOAPI)
summary(map.lines.coords.IOAPI)
#   end debugging

# >     class(map.lines.coords.IOAPI)
# [1] "matrix"
# >     summary(map.lines.coords.IOAPI)
#  map.lines.coords.IOAPI.x map.lines.coords.IOAPI.y
#  Min.   : 12.88           Min.   :14.47           
#  1st Qu.: 78.62           1st Qu.:39.28           
#  Median :101.37           Median :57.25           
#  Mean   : 95.17           Mean   :55.65           
#  3rd Qu.:124.47           3rd Qu.:72.57           
#  Max.   :140.51           Max.   :93.16           
#  NA's   :168              NA's   :168        

coordinates(state.map.shp) <- map.lines.coords.IOAPI # FAIL:
> Error in `coordinates<-`(`*tmp*`, value = c(99.0242231482288, 99.1277727928691,  : 
>   setting coordinates cannot be done on Spatial objects, where they have already been set

state.map.IOAPI <- state.map # copy
state.map.IOAPI$x <- map.lines.coords.IOAPI.x
state.map.IOAPI$y <- map.lines.coords.IOAPI.y
state.map.IOAPI$range <- c(
  min(map.lines.coords.IOAPI.x),
  max(map.lines.coords.IOAPI.x),
  min(map.lines.coords.IOAPI.y),
  max(map.lines.coords.IOAPI.y))
state.map.IOAPI.shp <-
  maptools::map2SpatialLines(state.map.IOAPI, proj4string=lcc.crs)
# start debugging
# thanks, Felix Andrews!
class(state.map.IOAPI.shp)
summary(do.call("rbind",
  unlist(coordinates(state.map.IOAPI.shp), recursive=FALSE)))
#   end debugging

# > class(state.map.IOAPI.shp)
# [1] "SpatialLines"
# attr(,"package")
# [1] "sp"

# > summary(do.call("rbind",
# +   unlist(coordinates(state.map.IOAPI.shp), recursive=FALSE)))
#        V1               V2       
#  Min.   : 12.88   Min.   :14.47  
#  1st Qu.: 78.62   1st Qu.:39.28  
#  Median :101.37   Median :57.25  
#  Mean   : 95.17   Mean   :55.65  
#  3rd Qu.:124.47   3rd Qu.:72.57  
#  Max.   :140.51   Max.   :93.16  

pdf(file=lcc.pdf)
rasterVis::levelplot(o3.raster, margin=FALSE
) + latticeExtra::layer(
  sp::sp.lines(state.map.IOAPI.shp, lwd=0.8, col='darkgray'))
dev.off()
# change this for viewing PDF on your system
system(sprintf("xpdf %s", lcc.pdf))

#####   end example 3 #####
-------------------------------------------------------------------------------------------------------
2>&1 cmd /c > bbox <- system(paste("cmd /c C:/Progra~1/gs/gs9.07/bin/gswin64c.exe -sDEVICE=bbox -dNOPAUSE -dBATCH -q -f",pdf_file,"2>&1"), intern=TRUE)
> print (bbox)
[1] "%%BoundingBox: 28 37 584 691"                                  "%%HiResBoundingBox: 28.997999 37.511999 583.991982 690.839979"
-------------------------------------------------------------------------------------------------------
pandoc.installed <- system('pandoc -v')==0 java.installed <- system('java -version') ==0

java version "1.7.0_10"
Java(TM) SE Runtime Environment (build 1.7.0_10-b18)
Java HotSpot(TM) 64-Bit Server VM (build 23.6-b04, mixed mode)
> java.installed
[1] TRUE
-------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>fileTypes</key>
    <array>
        <string>tex</string>
        <string>Rnw</string>
    </array> if self.tex_ext.upper() != ".TEX":
    sublime.error_message("%s is not a TeX source file: cannot compile." % (os.path.basename(view.file_name()),))
    return if (self.tex_ext.upper() != ".TEX") and (self.tex_ext.upper() != ".RNW"):
    sublime.error_message("%s is not a TeX or Rnw source file: cannot compile." % (os.path.basename(view.file_name()),))
    return os.chdir(tex_dir)
CmdThread(self).start()
print threading.active_count() os.chdir(tex_dir)
if self.tex_ext.upper() == ".RNW":
    # Run Rscript -e "library(knitr); knit('" + self.file_name + "')"
    os.system("Rscript -e \"library(knitr); knit('"+ self.file_name +"')\"")
    self.file_name = self.tex_base + ".tex"
    self.tex_ext = ".tex"
CmdThread(self).start()
print threading.active_count() if texExt.upper() != ".TEX":
    sublime.error_message("%s is not a TeX source file: cannot jump." % (os.path.basename(view.fileName()),))
    return if (texExt.upper() != ".TEX") and (texExt.upper() != ".RNW"):
    sublime.error_message("%s is not a TeX or Rnw source file: cannot jump." % (os.path.basename(view.fileName()),))
    return
-------------------------------------------------------------------------------------------------------
system("git curl") system("curl -u \'USER:PASS\' https://api.github.com/user/repos -d \'{\"name\":\"REPO\"}\'") url <- "http://curl.askapache.com/download/curl-7.23.1-win64-ssl-sspi.zip"
tmp <- tempfile( fileext = ".zip" )
download.file(url,tmp)
unzip(tmp)
system( paste0( tempdir(),"/curl", " -u \'USER:PASS\' https://api.github.com/user/repos -d \'{\"name\":\"REPO\"}\'") )
-------------------------------------------------------------------------------------------------------
shQuote repo <- "NewRepository"
json <- paste0(" { \"name\":\"" , repo , "\" } ") #string we desire formatting
os <- .Platform$OS.type #check if we are on Windows
if( os == "windows" ){
json <- shQuote(json , type = "cmd" )
cmd1 <- paste0( tempdir() ,"/curl -i -u \"" , user , ":" , password , "\" https://api.github.com/user/repos -d " , json )
} repo <- "New"
user <- "trinker"
password <- "password"

url <- "http://curl.askapache.com/download/curl-7.23.1-win64-ssl-sspi.zip"
tmp <- tempfile( fileext = ".zip" )
download.file(url,tmp)
unzip(tmp, exdir = tempdir())
system( paste0( "curl http://curl.haxx.se/ca/cacert.pem -o " , tempdir() , "/curl-ca-bundle.crt" ) )
system( paste0( tempdir(),"/curl", " -u \'USER:PASS\' https://api.github.com/user/repos -d \'{\"name\":\"REPO\"}\'") ) curl-ca-bundle.crt
-------------------------------------------------------------------------------------------------------
XML library(XML)
page     <- readLines('http://code.google.com/p/pandoc/downloads/list', warn = FALSE)
pagetree <- htmlTreeParse(page, error=function(...){}, useInternalNodes = TRUE, encoding='UTF-8')
url      <- xpathSApply(pagetree, '//tr[2]//td[1]//a ', xmlAttrs)[1]
url      <- paste('http', url, sep = ':') XML page <- readLines('http://code.google.com/p/pandoc/downloads/list', warn = FALSE)
pat  <- "//pandoc.googlecode.com/files/pandoc-[0-9.]+-setup.exe"
line <- grep(pat, page, value = TRUE); m <- regexpr(pat, line)
url  <- paste('http', regmatches(line, m), sep = ':') url <- 'http://pandoc.googlecode.com/files/pandoc-1.10.1-setup.exe' binary t <- tempfile(fileext = '.exe')
download.file(url, t, mode = 'wb') system(t) unlink(t)
-------------------------------------------------------------------------------------------------------
system system("Taskkill /IM myfile.exe /F")
-------------------------------------------------------------------------------------------------------
process_name <- 'your_process_name'
system(paste(path_to_pskil,'pskill ',process_name,sep=''),intern=T) system('c:/temp/pskill chrome',intern=T) !! pslist my.process <- system('c:/temp/pslist chrome ',intern=T)[-c(1:8)]
my.process
[1] "chrome             3852   8  38 1052 141008     0:01:58.108     1:43:11.547"
[2] "chrome             5428   8  11  202 220392     0:02:08.092     1:43:11.359"
[3] "chrome             6228   8   9  146  73692     0:01:58.467     1:43:00.091"
[4] "chrome             6312   6   9  130  45420     0:00:08.704     1:17:30.153"
[5] "chrome              360   6   9  127  29252     0:00:01.263     0:57:01.084"
[6] "chrome             5032   6   9  126  29596     0:00:00.717     0:31:39.875"
[7] "chrome             2572   8   9  120  23816     0:00:00.452     0:19:10.307"
## ids are orderd according to the elpased time
## I use tail to get the last one
## some regular expression to get the id from the string 
## mine is  ugly but I am sure you can do better.
id <- substr(gsub("([^[:digit:]]*)", "",  tail(my.process,1)),1,4)
system(paste('c:/temp/pskill ', id) ,intern=T)
-------------------------------------------------------------------------------------------------------
# specify executable file
exe.file <- "C:\\Users\\AnthonyD\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe"

# capture the result of a `tasklist` system call
before.win.tasklist <- system2( 'tasklist' , stdout = TRUE )

# store all pids before running the process
before.pids <- substr( before.win.tasklist[ -(1:3) ] , 27 , 35 )

# run the process
shell.exec( exe.file )

# capture the result of a `tasklist` system call
after.win.tasklist <- system2( 'tasklist' , stdout = TRUE )

# store all tasks after running the process
after.tasks <- substr( after.win.tasklist[ -(1:3) ] , 1 , 25 )

# store all pids after running the process
after.pids <- substr( after.win.tasklist[ -(1:3) ] , 27 , 35 )

# store the number in the task list containing the PIDs you've just initiated
initiated.pid.positions <- which( !( after.pids %in% before.pids ) )

# remove whitespace
after.tasks <- gsub( " " , "" , after.tasks )

# find the pid position that matches the executable file name
correct.pid.position <- 
    intersect(
        which( after.tasks %in% basename( exe.file ) ) ,
        initiated.pid.positions 
    )


# remove whitespace
correct.pid <- gsub( " " , "" , after.pids[ correct.pid.position ] )

# write the taskkill command line
taskkill.cmd <- paste( "taskkill" , "/PID" , correct.pid )

# wait thirty seconds (so the program fully loads)
Sys.sleep( 30 )

# kill the same process that was loaded
system( taskkill.cmd )
-------------------------------------------------------------------------------------------------------
system() ssconverter.py infile.xls:2 outfile.csv
-------------------------------------------------------------------------------------------------------
sets package ## set universe
sets_options("universe", seq(from = 0, to = 25, by = 0.1))

## set up fuzzy variables
variables <-
set(service = fuzzy_partition(varnames = c(poor = 0, good = 5, excellent = 10), sd = 1.5),
food = fuzzy_variable(rancid = fuzzy_trapezoid(corners = c(-2, 0, 2, 4)),
                      delicious = fuzzy_trapezoid(corners = c(7, 9, 11, 13))),
tip = fuzzy_partition(varnames = c(cheap = 5, average = 12.5, generous = 20),
                      FUN = fuzzy_cone, radius = 5)
)

## set up rules
rules <-
set(
fuzzy_rule(service %is% poor || food %is% rancid, tip %is% cheap),
fuzzy_rule(service %is% good, tip %is% average),
fuzzy_rule(service %is% excellent || food %is% delicious, tip %is% generous)
)

## combine to a system
system <- fuzzy_system(variables, rules)
print(system)
plot(system) ## plots variables

## do inference
fi <- fuzzy_inference(system, list(service = 3, food = 8))

## plot resulting fuzzy set
plot(fi)

## defuzzify
gset_defuzzify(fi, "centroid")

## reset universe
sets_options("universe", NULL)
-------------------------------------------------------------------------------------------------------
setpw("/directory/of/choice")
list.files() system("hadoop fs -ls", intern=T)
-------------------------------------------------------------------------------------------------------
download.file() system( paste0( "curl http://curl.haxx.se/ca/cacert.pem -o " , tempdir() , "/cacert.pem" ) )
#Then you can use it like so
twitCred$handshake( cainfo = paste0( tempdir() , "/cacert.pem" ) )
-------------------------------------------------------------------------------------------------------
download.file() url <- "http://curl.askapache.com/download/curl-7.23.1-win64-ssl-sspi.zip"
tmp <- tempfile( fileext = ".zip" )
download.file(url,tmp)
unzip(tmp, exdir = tempdir())

system( paste0( tempdir() , "/curl http://curl.haxx.se/ca/cacert.pem -o " , tempdir() , "/cacert.pem" ) )

# You can use this freshly downloaded cacert file and you can also set ssl.verifypeer = FALSE
twitCred$handshake( cainfo = paste0( tempdir() , "/cacert.pem" ) , ssl.verifypeer = FALSE )
registerTwitterOAuth(Cred)
-------------------------------------------------------------------------------------------------------
< system /bin/sh $ sh -c "head <(cat foo.txt)"
sh: 1: Syntax error: "(" unexpected system("bash -c 'head <(cat file.txt)'")
-------------------------------------------------------------------------------------------------------
print.glm.system <- print.glm
print.glm <- function(glm, ...) { 
  print.glm.system(glm, ...)
  cat("Relative Residual Deviance: ",100*glm$deviance/glm$null.deviance,"%\n") 
  invisible(glm)
}
-------------------------------------------------------------------------------------------------------
parallel::mcparallel function.that.hangs <- function(...) system("while true; do echo hello; sleep 1; done")

# This might hang
result <- function.that.hangs(...)

# Do this instead, the run the function in a forked process.
p <- mcparallel(function.that.might.hang(...))
# This might still hang, but you can kill the stuck R process and it will return.
result <- mmcollect(p)[[1]]
-------------------------------------------------------------------------------------------------------
input stdin > x = system("pandoc -t latex", intern=TRUE, input="\\*note: I *like* chocolate **milk** too ***much***!")
> x
[1] "*note: I \\emph{like} chocolate \\textbf{milk} too \\textbf{\\emph{much}}!"
-------------------------------------------------------------------------------------------------------
lockfile write("Attempting to get lock", stderr())
system("lockfile /tmp/my_simple_lock")

# Do stuff

write("Releasing lock", stderr())
system("rm -f /tmp/my_simple_lock")
-------------------------------------------------------------------------------------------------------
cowsay > system("cowsay I quit")
 ________
< I quit >
 --------
    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
-------------------------------------------------------------------------------------------------------
tasklist Rscript.exe stringr require(stringr)
progs <- system("tasklist", intern = TRUE)
progs <- vapply(str_split(progs, "[[:space:]]"), "[[", "", i = 1)
sum(progs == "Rscript.exe") Rgui.exe
-------------------------------------------------------------------------------------------------------
length(grep("rstudio\\.exe", system("tasklist", intern = TRUE))) rstudio Rscript length(system('tasklist /FI "IMAGENAME eq Rscript.exe" ', intern = TRUE))-3
-------------------------------------------------------------------------------------------------------
hunspell > system(paste('echo "', gsub('\\W', ' ', '**I**%%AABB%&&**WANT**%%AO%**ONLY**%RA%$**THESE**'), '" | hunspell -G -d en_US'))
I
WANT
ONLY
RA
THESE
-------------------------------------------------------------------------------------------------------
Control Panel\System and Security\Administrative Tools MyDataBase library(RODBC)
channel <- odbcConnect("MyDataBase") #or whatever name you gave
query <- "SELECT * FROM MyTable WHERE x > 10"
results <- sqlQuery(query, channel)
odbcClose(channel) #' Reads the Windows registry
#'
#' Wrapper for readRegistry that replace environment variables.
#' @param ... Passed to readRegistry
#' @return A list of registry keys.  See \code{readRegistry}.
#' @examples
#' \dontrun{
#' key <- "Software\\ODBC\\ODBCINST.INI\\SQL Server"
#' hive <- "HLM"
#' read_registry(key, hive)
#' readRegistry(key, hive)
#' }
read_registry <- function(...)
{
  ans <- readRegistry(...)
  lapply(
    ans,
    function(x)
    {
      rx <- "%([[:alnum:]]+)%"
      if(is.character(x) && grepl(rx, x))
      {
        env_var <- stringr::str_match(x, rx)[, 2]
        x <- gsub(rx, Sys.getenv(env_var), x)
      }   
      x
    }
  )
}

#' Add an ODBC data source to the Windows registry.
#' 
#' Adds an ODBC data source to the Windows registry.  
#' 
#' @param data_source_name String specifying the name of the data source to add.
#' @param database The name of the database to use as the default.
#' @param database_server The name of the server holding the database.
#' @param type Type of connection to add.  Either ``sql'' or ``sql_native''.
#' @param permission Whether the connection is for the user or the system.
#' @return Nothing.  Called for the side-effect of registering ODBC data sources.
#' @details A key with the specified data source name is created in 
#' ``Software\\ODBC\\ODBC.INI'', either in ``HKEY_CURRENT_USER'' or 
#' ``HKEY_LOCAL_MACHINE'', depending upon the value of \code{permission}.  
#' Four values are added to this key.  ``Database'' is given the value of the  
#' \code{database} arg.  ``Server'' is given the value of the 
#' \code{database_server} arg. ``Trusted_Connection'' is given the value ``Yes''.
#' ``Driver'' is given the value from the appropriate subkey of 
#' ``HKEY_LOCAL_MACHINE\\SOFTWARE\\ODBC\\ODBCINST.INI'', depending upon the type.
#' Another key with the specified data source name is created in
#' ``Software\\ODBC\\ODBC.INI\\ODBC Data Sources''.
register_odbc_data_source <- function(data_source_name, database, database_server, type = c("sql", "sql_native"), permission = c("user", "system"))
{
  #assert_os_is_windows()

  #data_source_name <- use_first(data_source_name)

  permission <- match.arg(permission)
  type <- match.arg(type)  

  #Does key exist?
  odbc_key <- readRegistry(
    file.path("Software", "ODBC", "ODBC.INI", fsep = "\\"), 
    switch(permission, user = "HCU", system = "HLM")
  )
  if(data_source_name %in% names(odbc_key))
  {
    message("The data source ", sQuote(data_source_name), " already exists.")
    return(invisible())
  }

  hive <- switch(
    permission,
    user   = "HKEY_CURRENT_USER",
    system = "HKEY_LOCAL_MACHINE"
  )
  key <- shQuote(
    file.path(hive, "Software", "ODBC", "ODBC.INI", data_source_name, fsep = "\\")
  )
  odbc_data_sources_key <- shQuote(
    file.path(hive, "Software", "ODBC", "ODBC.INI", "ODBC Data Sources", fsep = "\\")
  )

  type_name <- switch(
    type,
    sql = "SQL Server",
    sql_native = "SQL Server Native Client 11.0"
  )
  driver <- read_registry(
    file.path("SOFTWARE", "ODBC", "ODBCINST.INI", type_name, fsep = "\\"), 
    "HLM"
  )$Driver

  system0(key)
  system0(key, "/v Database /t REG_SZ /d", database)
  system0(key, "/v Driver /t REG_SZ /d", shQuote(driver))
  system0(key, "/v Server /t REG_SZ /d", database_server)
  system0(key, "/v Trusted_Connection /t REG_SZ /d Yes")
  system0(odbc_data_sources_key, "/v", data_source_name, "/t REG_SZ /d", shQuote(type_name))
}

#' Wrapper to system for registry calls
#' 
#' Wraps the \code{system} function that calls the OS shell.
#' @param ... Passed to \code{paste} to create the command.
#' @return The command that was passed to system is invisibly returned.
#' @note Not meant to be called directly.
system0 <- function(...)
{
  cmd <- paste("reg add", ...)
  res <- system(cmd, intern = TRUE)
  if(res != "The operation completed successfully.\r")
  {
    stop(res)
  } else
  {
    message(res)
  }
  invisible(cmd)
}
-------------------------------------------------------------------------------------------------------
7z system system('7z e -o <output_dir> <archive_name>')
-------------------------------------------------------------------------------------------------------
bquote noquote sQuote dQuote quote enquote Quotes shQuote shQuote 'sh' bash csh 'cmd' shQuote R shQuote("C:/NIST08/AMDIS32/AMDIS_32.exe /S C:/Users/Ento/Documents/GCMS/test_cataglyphis_iberica/queens/CI23_Q_120828_01.CDF" , type = "cmd" )
#[1] "\"C:/NIST08/AMDIS32/AMDIS_32.exe /S C:/Users/Ento/Documents/GCMS/test_cataglyphis_iberica/queens/CI23_Q_120828_01.CDF\"" shQuote system( shQuote( "mystring" , type = c("cmd","sh") ) , ... )
-------------------------------------------------------------------------------------------------------
intern = TRUE head(system("ls", intern = TRUE))
[1] "Articles"    "Books"       "coucou.tex~" "Cpp"        
[5] "Desktop"     "Devel" write.table(cbind(1:10, 3:12), file = "file.txt", row.names = FALSE)
vect <- system("awk '{print $1};' file.txt | tail -10", intern = TRUE)
vect <- as.numeric(vect)
plot(vect) as.numeric
-------------------------------------------------------------------------------------------------------
knitsPDF <- function(name) {
  library(knitr)
  knit(paste0(name, ".Rmd"), encoding = "utf-8")
  system(paste0("pandoc -o ", name, ".pdf ", name, ".md --bibliography /Users/.../Desktop/test.bib --csl /Users/.../Desktop/harvard-durham-university-business-school.csl"))
}
-------------------------------------------------------------------------------------------------------
list.files(path="data/",pattern=glob2rx("*foo*bar*")) lf <- system("ls data/*foo*bar*")
-------------------------------------------------------------------------------------------------------
system filename <- "/Users/me/reports/myfile.pdf"
pdf <- getOption("pdfviewer") # same as options()$pdfviewer
cmd <- paste(pdf,filename)
system(cmd) openPDF file.show The R.app Mac OS X GUI uses its internal pager irrespective of the setting of pager. shell.exec(filename)
-------------------------------------------------------------------------------------------------------
q// perlQuote <- function(string) {
  escaped_string <- gsub("\\\\", "\\\\\\\\", string)
  escaped_string <- gsub("/", "\\/", escaped_string)
  paste("q/", escaped_string, "/", sep="")
}
echo <- function (string) {
    cmd <- paste(shQuote(Sys.which('perl')),
                 '-le',
                 shQuote(sprintf("$str=%s; print $str", perlQuote(string))))
    message(cmd)
    system(cmd)
}
echo(1)
echo("'"); echo("''"); echo("'\""); echo("'\"'")
echo('"'); echo('""'); echo('"\''); echo('"\'"'); 
echo("\\"); echo("\\\\")
-------------------------------------------------------------------------------------------------------
echo <- function (string) {
    cmd <- paste(shQuote(Sys.which('perl')),
                 '-e', shQuote('my ($str) = @ARGV; print $str;'),
                 shQuote(string))
    message(cmd)
    system(cmd)
}
-------------------------------------------------------------------------------------------------------
taskset 0xffff R system(sprintf("taskset -p 0xffffffff %d", Sys.getpid()))
-------------------------------------------------------------------------------------------------------
wmctrl plot plot <- function(...) {
  graphics::plot(...)
  system("wmctrl -a :ACTIVE:")
} plot .Rprofile
-------------------------------------------------------------------------------------------------------
R> X <- 1:1e5   # data, no repeats
R> save(X, file="/tmp/foo.RData")
R> write.csv(X, file="/tmp/foo.csv")
R> system("ls -l /tmp/foo*")
-rw-r--r-- 1 x y 1377797 Jun  4 09:11 /tmp/foo.csv
-rw-r--r-- 1 x y  212397 Jun  4 09:11 /tmp/foo.RData R> X <- rep(1,1e5)   # data, lots of repeats
R> write.csv(X, file="/tmp/bar.csv")
R> save(X, file="/tmp/bar.RData")
R> system("ls -lh /tmp/bar*")
-rw-r--r-- 1 x y 966K Jun  4 09:12 /tmp/bar.csv
-rw-r--r-- 1 x y 1.3K Jun  4 09:12 /tmp/bar.RData
R>
-------------------------------------------------------------------------------------------------------
shell cmd.exe system("Rscript.exe -e \"write(Sys.time(), file='c:/temp/systime.txt')\"")
-------------------------------------------------------------------------------------------------------
cat(paste(system("./f.py", intern=TRUE), collapse=""))
-------------------------------------------------------------------------------------------------------
havingIP <- function() {
 if (.Platform$OS.type == "windows") {
   ipmessage <- system("ipconfig", intern = TRUE)
 } else {
   ipmessage <- system("ifconfig", intern = TRUE)
 }
 validIP <- "((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)[.]){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
 any(grep(validIP, ipmessage))
} havingIP <- function() {
 if (.Platform$OS.type == "windows") {
   ipmessage <- system("ipconfig", intern = TRUE)
 } else {
   ipmessage <- system("ifconfig", intern = TRUE)
 }
 validIP <- "((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)[.]){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
 any(grep(validIP, ipmessage[-grep("127.0.0.1", ipmessage)]))
}
-------------------------------------------------------------------------------------------------------
cat touch /tmp/Rprofile
export R_PROFILE=/tmp/Rprofile
export R_PROFILE_USER=/tmp/Rprofile
R -e "install.packages('rstan', type='source',repos='http://wiki.stan.googlecode.com/git/R')"
export R_PROFILE=
export R_PROFILE_USER= system('touch /tmp/Rprofile')
Sys.setenv(R_PROFILE="/tmp/Rprofile")
Sys.setenv(R_PROFILE_USER="/tmp/Rprofile")
install.packages('rstan', type='source', repos='http://wiki.stan.googlecode.com/git/R')
Sys.unsetenv('R_PROFILE')
Sys.unsetenv('R_PROFILE_USER')
-------------------------------------------------------------------------------------------------------
robust.system <- function (cmd) {
  stderrFile = tempfile(pattern="R_robust.system_stderr", fileext=as.character(Sys.getpid()))
  stdoutFile = tempfile(pattern="R_robust.system_stdout", fileext=as.character(Sys.getpid()))

  retval = list()
  retval$exitStatus = system(paste0(cmd, " 2> ", shQuote(stderrFile), " > ", shQuote(stdoutFile)))
  retval$stdout = readLines(stdoutFile)
  retval$stderr = readLines(stderrFile)

  unlink(c(stdoutFile, stderrFile))
  return(retval)
} > robust.system("ls -la")
$exitStatus
[1] 0

$stdout
 [1] "total 160"                                                      
 [2] "drwxr-xr-x  14 asieira  staff    476 10 Jun 18:18 ."            
 [3] "drwxr-xr-x  12 asieira  staff    408  9 Jun 20:13 .."           
 [4] "-rw-r--r--   1 asieira  staff   6736  5 Jun 19:32 .Rapp.history"
 [5] "-rw-r--r--   1 asieira  staff  19109 11 Jun 20:44 .Rhistory"    

$stderr
character(0)
-------------------------------------------------------------------------------------------------------
spacetime stplot animate STFDF SpatialPolygonsDataFrame library(sp)
library(rgdal)
library(spacetime)

rus <- url("http://www.filefactory.com/file/4h1hb5c1cw7r/n/RUS_adm1_RData")
load(rus)
proj4.str <- CRS("+init=epsg:3413 +lon_0=105")
gadm.prj <- spTransform(gadm, proj4.str)
N <- nrow(gadm.prj)
pols <- geometry(gadm.prj) data.frame SpatialPolygon vals1 <- read.csv2('/tmp/unempldata/unempl11.txt')
ord1 <- match(nms, vals1$region)
vals1 <- vals1[ord1,]

vals2 <- read.csv2('/tmp/unempldata/unempl12.txt')
ord2 <- match(nms, vals2$region)
vals2 <- vals2[ord2,] data.frame STFDF gadmST nDays <- 2
tt <- seq(as.Date('2013-01-01'), by='day', length=nDays)
vals <- data.frame(unempl=rbind(vals1, vals2)[,-1])

gadmST <- STFDF(pols, time=tt, data=vals) stplot png('gadm%02d.png')
stplot(gadmST, animate=1, do.repeat=FALSE)
dev.off() png ffmpeg system('ffmpeg -r 1 -i gadm%02d.png gadm.mp4')
-------------------------------------------------------------------------------------------------------
PDF md # Load packages
require(knitr)
require(markdown)

setwd("C:/Users/.../Desktop/")

# Create .md and .pdf files
filen <- "test"
knit(paste0(filen,".md"))
system(paste0("pandoc -s ", paste0(filen,"-out.md"), " -t latex -o ", paste0(filen,".pdf"), " --highlight-style=tango -S")) pandoc
-------------------------------------------------------------------------------------------------------
myData <- read.csv(pipe(procName)) > write.csv(data.frame(x=rnorm(1e5)), row.names=FALSE, file="norm.csv")
> system.time(d <- read.csv("norm.csv"))
   user  system elapsed 
  0.398   0.004   0.402 
> system.time(d <- read.csv(textConnection(system("cat norm.csv", intern=TRUE))))
   user  system elapsed 
 56.159   0.106  56.095 
> system.time(d <- read.csv(pipe("cat norm.csv")))
   user  system elapsed 
  0.475   0.012   0.531
-------------------------------------------------------------------------------------------------------
system("pwd")
-------------------------------------------------------------------------------------------------------
sprintf system a <- "echo http://news.blogs.cnn.com/2013/04/15/explosions-near-finish-of-boston-marathon/?hpt=hp_t1"

### with Awk
cmd <- sprintf("echo %s | awk -F/ '{print $3}'", a)
system(cmd, intern = TRUE)
## [1] "news.blogs.cnn.com"


### Using cut
cmd2 <- sprintf("echo %s | cut -d/ -f3", a)
system(cmd2, intern = TRUE)
## [1] "news.blogs.cnn.com" system system system_vect <- Vectorize(system, vectorize.args = "command", USE.NAMES = FALSE)

b <- "http://www.r-bloggers.com/some-common-approaches-for-analyzing-likert-scales-and-other-categorical-data/"

cmd3 <- sprintf("echo %s | awk -F/ '{print $3}'", c(a, b))
system_vect(cmd3, intern = TRUE)
## [1] "news.blogs.cnn.com" "www.r-bloggers.com"


system(cmd3, intern = TRUE)
## [1] "news.blogs.cnn.com"
-------------------------------------------------------------------------------------------------------
use mydbf in 0
select mydbf
copy to myfile.xls type xl5
copy to myfile.csv type delimited copy to myfile.csv type delimited as codepage 1251 Close All
Clear All
Clear 

lcDBFDir = "c:\temp\"           && -- Where the DBF files are.
lcOutDir = "c:\temp\export\"        && -- Where you want your exported files to go.

lcDBFDir = Addbs(lcDBFDir)      && -- In case you forgot the backslash.
lcOutDir = Addbs(lcOutDir)  

* -- Get the filenames into an array.
lnFiles = ADir(laFiles, Addbs(lcDBFDir) + "*.DBF")

* -- Process them. 
For x = 1 to lnFiles

    lcThisDBF = lcDBFDir + laFiles[x, 1]
    Use (lcThisDBF) In 0 Alias currentfile
    Select currentfile
    Copy To (lcOutDir + Juststem(lcThisDBF) + ".csv") type csv
    Use in Select("Currentfile")        && -- Close it.

EndFor

Close All
-------------------------------------------------------------------------------------------------------
awk egrep system awk read.table(text = system("awk '{FS = \",\"} {if (NF == 3) print}' test.txt",
                         intern = TRUE),
           sep = ',') egrep read.table(text = system("egrep '^[^,]+,[^,]+,[^,]+$' test.txt", intern = TRUE),
           sep = ',')
-------------------------------------------------------------------------------------------------------
system("tasklist", intern=TRUE)
-------------------------------------------------------------------------------------------------------
library(data.table)
library(stringr)

# Returns a process list on a Linux or Mac OS X system by calling 'ps' command and
# parsing its output.
processList <- function() {
  # Execute ps
  ps = robust.system("ps auxww")
  if (ps$exitStatus != 0) {
    print(ps)
    return(NA)
  }

  # Turn into data.table
  ps$stdout = str_trim(ps$stdout)
  ncols = str_count(ps$stdout[1], "[ ]+") + 1
  procs = str_split_fixed(ps$stdout, "[ ]+", ncols)
  ps = as.data.table(procs[2:nrow(procs),])
  setnames(ps, 1:ncols, procs[1,])
  rm(ncols, procs)

  # Convert relevant columns to friendlier data types.
  # Rename Mac OS X style "TT" to "TTY" and "STARTED" to "START" as well.
  if ("PID" %chin% colnames(ps)) {
    ps[,PID:=as.integer(as.character(PID))]
  }
  if ("%CPU" %chin% colnames(ps)) {
    setnames(ps, "%CPU", "percentCPU")
    ps[,percentCPU:=as.numeric(percentCPU)]
  }
  if ("%MEM" %chin% colnames(ps)) {
    setnames(ps, "%MEM", "percentMEM")
    ps[,percentMEM:=as.numeric(percentMEM)]
  }
  if ("TT" %chin% colnames(ps)) {
    setnames(ps, "TT", "TTY")
  }  
  if ("STARTED" %chin% colnames(ps)) {
    setnames(ps, "STARTED", "START")
  } 
  if ("COMMAND" %chin% colnames(ps)) {
    ps[,COMMAND:=as.character(COMMAND)]
  } 

  return(ps)
}
-------------------------------------------------------------------------------------------------------
Sys.getenv("USERNAME")  ## works under windows Sys.info()[["user"]] system('whoami', intern=TRUE)
-------------------------------------------------------------------------------------------------------
uni2ascii uni2ascii <- function(string) {
    cmd <- sprintf("echo %s | uni2ascii -B", string)
    system(cmd, intern = TRUE, ignore.stderr = TRUE)
}

uni2ascii <- Vectorize(uni2ascii, USE.NAMES = FALSE)

uni2ascii(c("Sølvsten", "ğ", "œ"))
## [1] "Solvsten" "g"        "oe"
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
try.wtl <- function(timeout = 5)
{
      y <- evalWithTimeout(system(myfile.exe), timeout = timeout, onTimeout= "warning")
      if(inherits(y, "try-error")) NA else y 
} g <- try.wtl(5) g <- try.wtl(0.1) if (class(g) == "NULL") {system('taskkill /im "myfile.exe" /f',show.output.on.console = FALSE)}
-------------------------------------------------------------------------------------------------------
-i z = pipe('python -i', open='w')
cat('x=1\n', file=z)
cat('print(x)\n', file=z)
cat('print(x+2)\n', file=z)
cat('print(x+2\n', file=z)
cat(')\n', file=z)
Sys.sleep(2)
# Python 2.7.4 (default, Apr 19 2013, 18:28:01) 
# [GCC 4.7.3] on linux2
# Type "help", "copyright", "credits" or "license" for more information.
# >>> >>> 1
# >>> 3
# >>> ... 3
# >>> 
close(z) stopifnot( capabilities("fifo") )
system('mkfifo /tmp/Rpython.fifo')
output <- fifo('/tmp/Rpython.fifo', 'r')
input  <- pipe('python -i > /tmp/Rpython.fifo', 'w')
python_code <- "
x=1
print(x)
print(x+2)
print(x+2
)
"
cat( python_code, file = input )
flush( input )
Sys.sleep(2) # Wait for the results
result <- readLines(output)
result
# [1] "1" "3" "3"
-------------------------------------------------------------------------------------------------------
system system(paste("pdflatex",filetopdf)) filetopdf knit2pdf
-------------------------------------------------------------------------------------------------------
> system('mv /tmp/RtmpK4k1Ju/oldname /home/jeroen/newname')
-------------------------------------------------------------------------------------------------------
dlclose(lib_handle); #include <Rcpp.h>
#include <dlfcn.h>

using namespace Rcpp;
using namespace std;

typedef void (*func)(int*, int*, float*, int*, float*);

RcppExport SEXP gpuQR_Rcpp(SEXP x_, SEXP n_rows_, SEXP n_cols_)
{       
    vector<float> x = as<vector<float> >(x_);
    int n_rows = as<int>(n_rows_);
    int n_cols = as<int>(n_cols_);
    vector<float> scale(n_cols);

    void* lib_handle = dlopen("path/gpuQR.so", RTLD_LAZY);
    if (!lib_handle) 
    { 
        Rcout << dlerror() << endl; 
    } else {
        func gpuQR = (func) dlsym(lib_handle, "gpuQR");  
        gpuQR(&n_rows, &n_cols, &(x[0]), &n_rows, &(scale[0]));
    }

    for(int ii = 1; ii < n_rows; ii++)
    {
        for(int jj = 0; jj < n_cols; jj++)
        {
            if(ii > jj) { x[ii + jj * n_rows] *= scale[jj]; }
        }
    }

    return wrap(x);
} library(Rcpp)  
PKG_LIBS <- sprintf('%s $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)', Rcpp:::RcppLdFlags()) 
PKG_CPPFLAGS <- sprintf('%s', Rcpp:::RcppCxxFlags())  
Sys.setenv(PKG_LIBS = PKG_LIBS , PKG_CPPFLAGS = PKG_CPPFLAGS) 
R <- file.path(R.home(component = 'bin'), 'R') 
file <- 'path/gpuQR_Rcpp.cpp'
cmd <- sprintf('%s CMD SHLIB %s', R, paste(file, collapse = ' '))
system(cmd) #include<cula.h>

void gpuQR(const int *m, const int *n, float *a, const int *lda, float *tau)
{
    culaInitialize();   
    culaSgeqrf(m[0], n[0], a, lda[0], tau);
    culaShutdown();
} gcc -c -I/usr/local/cula/include gpuQR.c
gcc -shared -Wl,-rpath,/usr/local/cula/lib64 -L/usr/local/cula/lib64 -lcula_lapack -o gpuQR.so gpuQR.o dyn.load('path/gpuQR_Rcpp.so')

set.seed(100)

n_row <- 3
n_col <- 3
A <- matrix(rnorm(n_row * n_col), n_row, n_col)

res <- .Call('gpuQR_Rcpp', c(A), n_row, n_col)
matrix(res, n_row, n_col)

           [,1]       [,2]       [,3]
[1,]  0.5250958 -0.8666927  0.8594266
[2,] -0.2504899 -0.3878644 -0.1277837
[3,]  0.1502908  0.4742033 -0.8804248

qr(A)$qr

          [,1]       [,2]       [,3]
[1,]  0.5250957 -0.8666925  0.8594266
[2,] -0.2504899 -0.3878643 -0.1277838
[3,]  0.1502909  0.4742033 -0.8804247 n_row <- 1000; n_col <- 1000
A <- matrix(rnorm(n_row * n_col), n_row, n_col)
B <- A; dim(B) <- NULL

res <- benchmark(.Call('gpuQR_Rcpp', B, n_row, n_col), qr(A), columns = c('test', 'replications', 'elapsed', 'relative'), order = 'relative')

                                  test replications elapsed relative
1 .Call("gpuQR_Rcpp", B, n_row, n_col)          100  38.037    1.000
2                                qr(A)          100 152.575    4.011
-------------------------------------------------------------------------------------------------------
#include<Rcpp.h>
#include<cula.h>

using namespace Rcpp;
using namespace std;

RcppExport SEXP gpuQR_Rcpp(SEXP x_, SEXP n_rows_, SEXP n_cols_)
{       
    vector<float> x = as<vector<float> >(x_);
    int n_rows = as<int>(n_rows_);
    int n_cols = as<int>(n_cols_);  
    vector<float> scale(n_cols);

    culaInitialize();   
    culaSgeqrf(n_rows, n_cols, &(x[0]), n_rows, &(scale[0]));
    culaShutdown();

    for(int ii = 1; ii < n_rows; ii++)
    {
        for(int jj = 0; jj < n_cols; jj++)
        {
            if(ii > jj) { x[ii + jj * n_rows] *= scale[jj]; }
        }
    }

    return wrap(x);
} library(Rcpp)  
PKG_LIBS <- sprintf('-Wl,-rpath,/usr/local/cula/lib64 -L/usr/local/cula/lib64 -lcula_lapack %s $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)', Rcpp:::RcppLdFlags()) 
PKG_CPPFLAGS <- sprintf('-I/usr/local/cula/include %s', Rcpp:::RcppCxxFlags())  
Sys.setenv(PKG_LIBS = PKG_LIBS , PKG_CPPFLAGS = PKG_CPPFLAGS) 
R <- file.path(R.home(component = 'bin'), 'R') 
file <- 'path/gpuQR_inc.cpp'
cmd <- sprintf('%s CMD SHLIB %s', R, paste(file, collapse = ' '))
system(cmd)
-------------------------------------------------------------------------------------------------------
pdf getAnywhere(pdf)
A single object matching ‘pdf’ was found
It was found in the following places
  package:grDevices
  namespace:grDevices [etc.] pdf2text system system(paste('"C:/Program Files/xpdf64/pdftotext.exe"', 
             '"C:/Users/Raffael/Documents/17214.pdf"'), wait=FALSE) *apply
-------------------------------------------------------------------------------------------------------
system LIST Rscript Test.R system('Rscript', 'Test.R', $file1, $file2);
-------------------------------------------------------------------------------------------------------
LD_PRELOAD ldd >> !ldd Rscript $ ldd Rscript >> !unset LD_LIBRARY_PATH
>> system('...')
-------------------------------------------------------------------------------------------------------
system("nslookup www.google.com", intern=TRUE) domains = c('www.google.com','www.badtestdomainnotvalid.com','www.yahoo.com')
sapply(domains, function(x) system(paste("nslookup", x), intern=TRUE))
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
caTools write.gif() png("myPlot.png")
plot(rnorm(1000),rnorm(1000))
dev.off()
library(png)
P1 <- readPNG("myPlot.png")
library(caTools)
write.gif(P1,"myPlot.gif")
showGIF <- function(fn) system(paste("display",fn))
showGIF("myPlot.gif")
unlink("myPlot.gif")  ## clean up ?write.gif() animation saveGIF() png("myPlot.png")
plot(rnorm(1000),rnorm(1000))
dev.off()
system("convert myPlot.png myPlot.gif")
unlink("myPlot.png") ## clean up
showGIF("myPlot.gif")
unlink("myPlot.gif") ## clean up ## needs ImageMagick: just for testing ...
showGIF <- function(fn) system(paste("display",fn)) saveGIF <- function(fn,verbose=FALSE,debug=FALSE) {
    require(png)
    require(caTools)
    tmpfn <- tempfile()
    on.exit(unlink(tmpfn))
    savePlot(tmpfn,type="png")
    P1 <- readPNG(tmpfn)
    dd <- dim(P1)
    P1 <- aperm(P1,c(3,1,2),resize=TRUE)  ## P1[,1,15]
    dim(P1) <- c(dd[3],prod(dd[1:2]))
    P1 <- t(P1)
    if (verbose) cat("finding unique colours ...\n")
    P1u <- unique(P1)
    rgbMat <- function(x) {
        rgb(x[,1],x[,2],x[,3])
    }
    if (verbose) cat("creating colour index ...\n")
    pp <- paste(P1[,1],P1[,2],P1[,3],sep=".")
    ## make sure factor is correctly ordered
    ind <- as.numeric(factor(pp,levels=unique(pp))) 
    if (verbose) cat("finding colour palette ...\n")
    if (nrow(P1u)>256) {
        if (verbose) cat("kmeans clustering ...\n")
        kk <- kmeans(P1u,centers=256)
        ind <- kk$cluster[ind]
        pal <- rgbMat(kk$centers)
    } else {
        pal <- rgbMat(P1u)
    }
    ## test:
    if (debug) {
        dev.new()
        par(mar=rep(0,4))
        image(t(matrix(ind-1,nrow=dd[1])),col=pal,axes=FALSE,ann=FALSE)
    }
    if (verbose) cat("writing GIF ...\n")
    indmat <- matrix(ind-1,nrow=dd[1])
    storage.mode(indmat) <- "integer"
    write.gif(indmat,fn,col=as.list(pal),scale="never")
}


X11.options(antialias="none")
image(matrix(1:64,nrow=8),col=rainbow(10))
saveGIF("tmp.gif",verbose=TRUE,debug=TRUE)
showGIF("tmp.gif")
-------------------------------------------------------------------------------------------------------
system('copy 1.txt+2.txt+3.txt MyBigFat.txt') dir
-------------------------------------------------------------------------------------------------------
#include<Rcpp.h>
#include<magma.h>

using namespace Rcpp;

RcppExport SEXP gpuQR_magma(SEXP X_)
{    
    // Input
    NumericMatrix X(X_);

    // Initialize magma and cublas
    magma_init();
    cublasInit();

    // Declare variables 
    int info, lwork, n_rows = X.nrow(), n_cols = X.ncol(), min_mn = min(n_rows, n_cols);
    double tmp[1];
    NumericVector scale(min_mn);

    // Query workspace size
    magma_dgeqrf(n_rows, n_cols, &(X[0]), n_rows, &(scale[0]), &(work[0]), -1, &info); 
    lwork = work[0];
    NumericVector work(lwork);

    // Run QR decomposition
    magma_dgeqrf(n_rows, n_cols, &(X[0]), n_rows, &(scale[0]), &(work[0]), lwork, &info);

    // Scale factor result    
    for(int ii = 1; ii < n_rows; ii++)
    {
        for(int jj = 0; jj < n_cols; jj++)
        {
            if(ii > jj) { X[ii + jj * n_rows] *= scale[jj]; }
        }
    }

    // Shutdown magma and cublas    
    magma_finalize();
    cublasShutdown();

    // Output  
    return wrap(X);
} library(Rcpp)  
PKG_LIBS <- sprintf('-Wl,-rpath,/usr/local/magma/lib -L/usr/local/magma/lib -lmagma /usr/local/magma/lib/libmagma.a -Wl,-rpath,/usr/local/cuda-5.5/lib64 %s', Rcpp:::RcppLdFlags()) 
PKG_CPPFLAGS <- sprintf('-DADD_ -DHAVE_CUBLAS -I/usr/local/magma/include -I/usr/local/cuda-5.5/include %s', Rcpp:::RcppCxxFlags())  
Sys.setenv(PKG_LIBS = PKG_LIBS , PKG_CPPFLAGS = PKG_CPPFLAGS) 
R <- file.path(R.home(component = 'bin'), 'R') 
file <- '/path/gpuQR_magma.cpp'
cmd <- sprintf('%s CMD SHLIB %s', R, paste(file, collapse = ' '))
system(cmd) dyn.load('/path/gpuQR_magma.so')

set.seed(100)
n_row <- 3; n_col <- 3
A <- matrix(rnorm(n_row * n_col), n_row, n_col)

qr(A)$qr

           [,1]       [,2]       [,3]
[1,]  0.5250957 -0.8666925  0.8594266
[2,] -0.2504899 -0.3878643 -0.1277838
[3,]  0.1502909  0.4742033 -0.8804247

.Call('gpuQR_magma', A)

           [,1]       [,2]       [,3]
[1,]  0.5250957 -0.8666925  0.8594266
[2,] -0.2504899 -0.3878643 -0.1277838
[3,]  0.1502909  0.4742033 -0.8804247 n_row <- 3000; n_col <- 3000
A <- matrix(rnorm(n_row * n_col), n_row, n_col)
B <- A; dim(B) <- NULL

res <- benchmark(.Call('gpuQR_magma', A), .Call('gpuQR_cula', B, n_row, n_col), qr(A), columns = c('test', 'replications', 'elapsed', 'relative'), order = 'relative')

                                   test replications elapsed relative
2  .Call("gpuQR_cula", B, n_row, n_col)          100  18.704    1.000
1               .Call("gpuQR_magma", A)          100  70.461    3.767
3                                 qr(A)          100 985.411   52.685
-------------------------------------------------------------------------------------------------------
python -m py_compile makePDF.py print threading.active_count() print(threading.active_count()) os.system("Rscript -e \"library(knitr); knit('"+ self.file_name +"')\"") knitcmd = "/usr/bin/Rscript -e \"library(knitr); knit('"+ self.file_name +"')\""
    process = subprocess.Popen(knitcmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    #Launch the shell command:
    knit_output, knit_error = process.communicate()
    #store results in a log
    knit_log = open(self.tex_base + "_knitrbuild.log", "w")
    knit_log.write(knit_output)
    knit_log.write(knit_error)
    knit_log.close() #!/bin/bash
[ $# -eq 0 ] && { echo "Usage: $0 file.Rnw for knitting"; exit 1; }
rnw="library(knitr);knit("\'"$1.Rnw"\'")"
echo "Rscript executing:" $rnw
tex="$1.tex"
pdf="$1.pdf"
Rscript -e $rnw && pdflatex $tex && pdflatex $tex && open -a Preview $pdf

retval=$?
[ $retval -eq 0 ] && echo "$rnw knitted and $pdf ready"
-------------------------------------------------------------------------------------------------------
system open_project(loc) wait = FALSE system ignore.stderr = TRUE ignore.stderr open_project() open_project <- function(Rproj.loc) {
    action <- paste(wheresRstudio(), Rproj.loc)
    message("Preparing to open project!")
    system(action, wait = FALSE, ignore.stderr = TRUE)
}
-------------------------------------------------------------------------------------------------------
Rscript #!/usr/bin/r -i

fsizes <- as.integer(readLines())
print(summary(fsizes))
stem(fsizes) ls -l awk edd@max:~/svn/littler/examples$ ls -l /bin/ | awk '{print $5}' | ./fsizes.r 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      3    6240   30820   61810   60170 2000000       1 

  The decimal point is 5 digit(s) to the right of the |

   0 | 00000000000000000000000000000000000111111111111111111111111122222222+57
   1 | 111112222345679
   2 | 7
   3 | 1
   4 | 1
   5 | 
   6 | 
   7 | 
   8 | 
   9 | 6
  10 | 
  11 | 
  12 | 
  13 | 
  14 | 
  15 | 
  16 | 
  17 | 
  18 | 
  19 | 
  20 | 0

edd@max:~/svn/littler/examples$
-------------------------------------------------------------------------------------------------------
library(doParallel)
registerDoParallel()
foreach(1:3) %dopar% {x=tempfile();writeLines(letters,x);readLines(x)} library(parallel)
cl <- makePSOCKcluster(3)
clusterEvalQ(cl, {x=tempfile();writeLines(letters,x);readLines(x)}) C:\> R
> system('Rscript -e "x=tempfile();writeLines(letters,x);readLines(x)"') C:\> Rscript -e "x=tempfile();writeLines(letters,x);readLines(x)" tempdir
-------------------------------------------------------------------------------------------------------
system("cd blah blah && blah blah", intern = TRUE) Error in system(cmd, intern = T) : 'cd' not found wd <- getwd()
setwd("C:/Users/trinker/Desktop/foo2")
cmd <- '"C:/Program Files (x86)/Git/bin/git.exe" init'
system(cmd, intern = T)
setwd(wd)
-------------------------------------------------------------------------------------------------------
esvm-predict -o esvm-predict
-------------------------------------------------------------------------------------------------------
system() system(paste("awk 'NR==2' ", filename), intern=TRUE)
-------------------------------------------------------------------------------------------------------
system work.dir <- "C:/Program Files (x86)/FWTools2.4.7/bin" # use your FWTools location
setwd(work.dir)
out.shape.file <- "foo2.shp"
in.shape.file <- "foo1.shp"
x.min <- 100
y.min <- 100
x.max <- 200
y.max <- 200
system(paste("ogr2ogr -clipsrc", x.min, y.min, x.max, y.max, 
      out.shape.file, in.shape.file))
-------------------------------------------------------------------------------------------------------
getwd() system(paste("iconv -f ISO-8859-1 -t UTF-8 ", getwd(), "/FileName.md > ", 
                                              getwd(), "/FileNameNew.md", sep=""))
-------------------------------------------------------------------------------------------------------
lapply icu icu system("wget http://course1.winona.edu/bdeppa/Biostatistics/Data%20Sets/ICU.TXT")
icu <- read.table('ICU.TXT', header=TRUE) status STA icu my.list <- lapply(c("Age","Sex","Race","Ser","Can"),         
       function(var) {
         formula    <- as.formula(paste("STA ~", var))
         res.logist <- glm(formula, data = icu, family = binomial)
         summary(res.logist)
       }) summary.glm lapply(my.list, coefficients)
[[1]]
               Estimate Std. Error   z value     Pr(>|z|)
(Intercept) -3.05851323 0.69608124 -4.393903 1.113337e-05
Age          0.02754261 0.01056416  2.607174 9.129303e-03

[[2]]
              Estimate Std. Error    z value     Pr(>|z|)
(Intercept) -1.4271164  0.2273030 -6.2784758 3.419081e-10
Sex          0.1053605  0.3617088  0.2912855 7.708330e-01

[[3]]
              Estimate Std. Error    z value   Pr(>|z|)
(Intercept) -1.0500583  0.4983146 -2.1072198 0.03509853
Race        -0.2913384  0.4108026 -0.7091933 0.47820450

[[4]]
              Estimate Std. Error   z value     Pr(>|z|)
(Intercept) -0.9465961  0.2310559 -4.096827 0.0000418852
Ser         -0.9469461  0.3681954 -2.571858 0.0101154495

[[5]]
                 Estimate Std. Error       z value     Pr(>|z|)
(Intercept) -1.386294e+00  0.1863390 -7.439638e+00 1.009615e-13
Can          7.523358e-16  0.5892555  1.276756e-15 1.000000e+00 my.list <- lapply(c("Age","Sex","Race","Ser","Can"),function(var)chisq.test(icu$STA, icu[,var])) my.list.all <- apply(combn(colnames(icu), 2), 2, function(x)chisq.test(icu[,x[1]], icu[,x[2]]))
-------------------------------------------------------------------------------------------------------
umxRenameFile <- function(baseFolder = "Finder", findStr = NA, replaceStr = NA, listPattern = NA, test = T, overwrite = F) {
    # uppercase = u$1
    if(baseFolder == "Finder"){
        baseFolder = system(intern = T, "osascript -e 'tell application \"Finder\" to get the POSIX path of (target of front window as alias)'")
        message("Using front-most Finder window:", baseFolder)
    } else if(baseFolder == "") {
        baseFolder = paste(dirname(file.choose(new = FALSE)), "/", sep = "") ## choose a directory
        message("Using selected folder:", baseFolder)
    }
    if(is.na(listPattern)){
        listPattern = findStr
    }
    a = list.files(baseFolder, pattern = listPattern)
    message("found ", length(a), " possible files")
    changed = 0
    for (fn in a) {
        findB = grepl(pattern = findStr, fn) # returns 1 if found
        if(findB){
            fnew = gsub(findStr, replace = replaceStr, fn) # replace all instances
            if(test){
                message("would change ", fn, " to ", fnew)  
            } else {
                if((!overwrite) & file.exists(paste(baseFolder, fnew, sep = ""))){
                    message("renaming ", fn, "to", fnew, "failed as already exists. To overwrite set T")
                } else {
                    file.rename(paste(baseFolder, fn, sep = ""), paste(baseFolder, fnew, sep = ""))
                    changed = changed + 1;
                }
            }
        }else{
            if(test){
                # message(paste("bad file",fn))
            }
        }
    }
    message("changed ", changed)
}
-------------------------------------------------------------------------------------------------------
umxRenameFile <- function(baseFolder = "Finder", findStr = NA, replaceStr = NA, listPattern = NA, test = T, overwrite = F) {
    # uppercase = u$1
    if(baseFolder == "Finder"){
        baseFolder = system(intern = T, "osascript -e 'tell application \"Finder\" to get the POSIX path of (target of front window as alias)'")
        message("Using front-most Finder window:", baseFolder)
    } else if(baseFolder == "") {
        baseFolder = paste(dirname(file.choose(new = FALSE)), "/", sep = "") ## choose a directory
        message("Using selected folder:", baseFolder)
    }
    if(is.na(listPattern)){
        listPattern = findStr
    }
    a = list.files(baseFolder, pattern = listPattern)
    message("found ", length(a), " possible files")
    changed = 0
    for (fn in a) {
        findB = grepl(pattern = findStr, fn) # returns 1 if found
        if(findB){
            fnew = gsub(findStr, replace = replaceStr, fn) # replace all instances
            if(test){
                message("would change ", fn, " to ", fnew)  
            } else {
                if((!overwrite) & file.exists(paste(baseFolder, fnew, sep = ""))){
                    message("renaming ", fn, "to", fnew, "failed as already exists. To overwrite set T")
                } else {
                    file.rename(paste(baseFolder, fn, sep = ""), paste(baseFolder, fnew, sep = ""))
                    changed = changed + 1;
                }
            }
        }else{
            if(test){
                # message(paste("bad file",fn))
            }
        }
    }
    message("changed ", changed)
}
-------------------------------------------------------------------------------------------------------
sed system("sed -e '2,${ /^.1/d; }' ~/Desktop/test.txt > ~/Desktop/test1.txt")
-------------------------------------------------------------------------------------------------------
big = iris[rep(seq_len(nrow(iris)), 1000),] toJSON(df[i,]) toJSON(df) toJSON(df[i,]) big lol lol list(big[1,], big[2,], ...) big1 <- Map(function(x, nm) setNames(x, rep(nm, length(x))), big, names(big))
big1$Species <- as.character(big1$Species)
lol <- unname(do.call(Map, c(list, big1))) splitIndices chunks <- 10
json <- sapply(splitIndices(length(lol), chunks), function(idx) toJSON(lol[idx])) substring(json[-length(json)], nchar(json)[-length(json)]) = ","
substring(json[-1], 1, 1) = "" fl <- tempfile()
writeLines(json, fl) library(parallel)  ## just for splitIndices; no parallel processing here...
library(json)
fastJson <- function(df, fl, chunks=10) {
    df1 = Map(function(x, nm) setNames(x, rep(nm, length(x))), df, names(df))
    df1 <- lapply(df1, function(x) {
        if (is(x, "factor")) as.character(x) else x
    })
    lol = unname(do.call(Map, c(list, df1)))

    idx <- splitIndices(length(lol), chunks)
    json <- sapply(idx, function(i) toJSON(lol[i]))
    substring(json[-length(json)], nchar(json)[-length(json)]) <- ","
    substring(json[-1], 1, 1) <- ""
    writeLines(json, fl)
} > fastJson(big, tempfile())
> system.time(fastJson(big, fl <- tempfile()))
   user  system elapsed 
  2.340   0.008   2.352 
 > system(sprintf("wc %s", fl))
     10      10 14458011 /tmp/RtmpjLEh5h/file3fa75d00a57c > system.time(for (i in seq_len(nrow(big))) big[i,])
   user  system elapsed 
 57.632   0.088  57.835 > system.time(for (i in seq_len(nrow(big))) { con <- file(fl, "a"); close(con) })
   user  system elapsed 
  2.320   0.580   2.919
-------------------------------------------------------------------------------------------------------
library(inline)

or1 <- cfunction(c(x="logical", y="logical"), "
    int nx = LENGTH(x), ny = LENGTH(y), n = nx > ny ? nx : ny;
    SEXP ans = PROTECT(allocVector(LGLSXP, n));
    int x1, y1;
    for (int i = 0; i < n; i++) {
        x1 = LOGICAL(x)[i % nx];
        y1 = LOGICAL(y)[i % ny];
        if ((x1 != NA_LOGICAL && x1) || (y1 != NA_LOGICAL && y1))
            LOGICAL(ans)[i] = 1;
        else if (x1 == 0 && y1 == 0)
            LOGICAL(ans)[i] = 0;
        else
            LOGICAL(ans)[i] = NA_LOGICAL;
    }
    UNPROTECT(1);
    return ans;
") % or2 <- cfunction(c(x="logical", y="logical"), "
    int nx = LENGTH(x), ny = LENGTH(y), n = nx > ny ? nx : ny;
    SEXP ans = PROTECT(allocVector(LGLSXP, n));
    int x1, y1, ix=0, iy=0;
    for (int i = 0; i < n; i++) {
        x1 = LOGICAL(x)[ix];
        y1 = LOGICAL(x)[iy];
        if (x1 == 0 || y1 == 0)
            LOGICAL(ans)[i] = 0;
        else if (x1 == NA_LOGICAL || y1 == NA_LOGICAL)
            LOGICAL(ans)[i] = NA_LOGICAL;
        else
            LOGICAL(ans)[i] = 1;

        if (++ix == nx) ix = 0;
        if (++iy == ny) iy = 0;
    }
    UNPROTECT(1);
    return ans;
") or3 <- cfunction(c(x="logical", y="logical"), "
    int nx = LENGTH(x), ny = LENGTH(y), n = nx > ny ? nx : ny;
    SEXP ans = PROTECT(allocVector(LGLSXP, n));
    int x1, y1, ix=0, iy=0;
    for (int i = 0; i < n; ++i) {
        x1 = LOGICAL(x)[ix];
        y1 = LOGICAL(y)[iy];
        LOGICAL(ans)[i] = (x1 || y1);
        if (++ix == nx) ix = 0;
        if (++iy == ny) iy = 0;
    }
    UNPROTECT(1);
    return ans;
") or4 <- cfunction(c(x="logical", y="logical"), "
    int nx = LENGTH(x), ny = LENGTH(y), n = nx > ny ? nx : ny;
    SEXP ans = PROTECT(allocVector(LGLSXP, n));
    int *xp = LOGICAL(x), *yp = LOGICAL(y), *ansp = LOGICAL(ans);
    for (int i = 0, ix = 0, iy = 0; i < n; ++i)
    {
        *ansp++ = xp[ix] || yp[iy];
        ix = (++ix == nx) ? 0 : ix;
        iy = (++iy == ny) ? 0 : iy;
    }
    UNPROTECT(1);
    return ans;
") microbenchmark(my.or(a, b), a|b, or1(a, b), or2(a, b), or3(a, b), or4(a, b))
Unit: milliseconds
        expr       min        lq    median       uq      max neval
 my.or(a, b)  8.002435  8.100143 10.082254 11.56076 12.05393   100
       a | b 23.194829 23.404483 23.860382 24.30020 24.96712   100
   or1(a, b) 17.323696 17.659705 18.069139 18.42815 19.57483   100
   or2(a, b) 13.040063 13.197042 13.692152 14.09390 14.59378   100
   or3(a, b)  9.982705 10.037387 10.578464 10.96945 11.48969   100
   or4(a, b)  5.544096  5.592754  6.106694  6.30091  6.94995   100 a|b or1 or1 or2 or2 or3 or4 LOGICAL() -O2 > system("clang++ --version")
Ubuntu clang version 3.0-6ubuntu3 (tags/RELEASE_30/final) (based on LLVM 3.0)
Target: x86_64-pc-linux-gnu
Thread model: posix my.or
-------------------------------------------------------------------------------------------------------
system executed = system('R CMD BATCH path/script.R') path executed
-------------------------------------------------------------------------------------------------------
help(system) intern R> txt <- system("date", intern=TRUE)
R> txt
[1] "Tue Sep 24 10:08:23 CDT 2013"
R> help(unlink)
-------------------------------------------------------------------------------------------------------
setwd(your_directory)
files <- system("echo *.csv", intern=TRUE) # captures output in character vector
files <- strsplit(files, split=" ")[[1]] # only works if there are no spaces in your filenames

for(file in files){
    # read in data
    dat <- read.csv(file,header=TRUE,row.names=1,check.names=FALSE)
    # make into a jpeg filename
    file <- gsub(file, pattern=".csv", replacement=".jpeg")
    jpeg(file)
    g <- graph.adjacency(m,mode="undirected",weighted=NULL,diag=FALSE)
    dev.off() # turns plotting off, needed for the jpeg() function to work well
}
-------------------------------------------------------------------------------------------------------
system("/Applications/ImageJ/ImageJ.app/Contents/MacOS/JavaApplicationStub -batch 
/Users/xxxx/Desktop/testmacro.txt") system("/Applications/ImageJ/ImageJ.app/Contents/MacOS/JavaApplicationStub -batch 
/Users/acgerstein/Desktop/testmacrobatch.txt 
/Users/acgerstein/Desktop/130829Pos_24h/*/Users/acgerstein/Desktop/temp/") folders = getArgument;
delimiter = "*";
parts=split(folders, delimiter);
dir1 = parts[0];
dir2 = parts[1];
-------------------------------------------------------------------------------------------------------
count.fields (table(cnts <- 
      count.fields(paste0(path,filename), sep=",", quote="", comment.char="") ) cnts which(cnts=47) fct <- table(system("awk -F ',' '{print NF}' A.csv", intern=TRUE))
fct

#3 
#4 system.time( fct <- table(system("awk -F ',' '{print NF}' All.csv", intern=TRUE)) )
#   user  system elapsed 
#  6.597   0.215   6.552 sum(fct)
-------------------------------------------------------------------------------------------------------
system(paste("gdalwarp"
,paste(dir_path,"fileHR.tif",sep="")
,paste(dir_path,"fileLR.tif",sep=""),sep=" ")) dir_path fileHR.tif fileLR.tif
-------------------------------------------------------------------------------------------------------
system(paste('"C:/Documents and Settings/UserName/Local Settings/Application Data/Google/Chrome/Application/chrome.exe"',
         '-url http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=009572&p_c=-18465084&p_nccObsCode=136'), wait = FALSE)
-------------------------------------------------------------------------------------------------------
system("say Just finished!")
-------------------------------------------------------------------------------------------------------
system(command='echo hello "w" orld')
-------------------------------------------------------------------------------------------------------
" \" shQuote shQuote( "hello \"w\" orld" , type = "cmd" )
#[1] "\"hello \\\"w\\\" orld\"" paste0( "echo " , shQuote( "hello \"w\" orld" , type = "sh") )
#[1] "echo 'hello \"w\" orld'"

system( paste0( "echo " , shQuote( "hello \"w\" orld" , type = "sh") ) )
#hello "w" orld
-------------------------------------------------------------------------------------------------------
ssh ssh ssh -f <server_user>@<server_ip>  -L <unused_local_port>:localhost:<database_remote_port> -N system ssh-keygen -t rsa # This creates a directory on the other machine if it wasn't already there. (Type in your password on the remote machine)
ssh <server_user>@<server_ip> mkdir -p .ssh
# This adds your public key to the list of accepted ones:
cat ~/.ssh/id_rsa.pub | ssh <server_user>@<server_ip> 'cat >> .ssh/authorized_keys' ssh -f <server_user>@<server_ip>  -L <unused_local_port>:localhost:<database_remote_port> -N ssh system('ssh -f <server_user>@<server_ip>  -L <unused_local_port>:localhost:<database_remote_port> -N')
-------------------------------------------------------------------------------------------------------
readLines for conn <- file("hiragana.txt", "rt")
nLines <- system("wc -l hiragana.txt")
output <- rep(0, nLines)
for (i in 1:nLines) {
  line <- readLines(conn, n=1, warn=FALSE)
  chars <- strsplit(line, "")[[1]]
  nHiragana <- sum(chars %in% hiragana, na.rm=TRUE)
  output[i] <- nHiragana   
}
close(conn)
output
-------------------------------------------------------------------------------------------------------
groups > groups = strsplit(system("groups",intern=TRUE)," ")[[1]]
> groups
[1] "rowlings"   "adm"        "sudo"       "lpadmin"    "sambashare"
-------------------------------------------------------------------------------------------------------
system() my_uuid <- system("uuid",intern=T)
my_uuid
[1] 0f62f1de-418d-11e3-8a19-cb0ceccb58ec my_uuid <- system("uuidgen", intern=T)
my_uuid
[1] 9A9D64DF-EB01-47E7-B16E-DC0343951883 uuid uuidgen
-------------------------------------------------------------------------------------------------------
file.create("bla.r")
system("ls -l bla.r")
system("chmod 777 bla.r")
system("ls -l bla.r")
-------------------------------------------------------------------------------------------------------
xdotool system > mousemove=function(x,y){system(paste0("xdotool mousemove ",x," ",y))}
> mousemove(0,0)
> mousemove(500,500)
-------------------------------------------------------------------------------------------------------
pdftk x <- getwd() ## I'll run this example in a tempdir to keep things clean
setwd(tempdir())
list.files(pattern="*.txt$|*.pdf$")
# character(0)

pdf(file = "SomeOutputFile.pdf")
plot(rnorm(100))
dev.off()

system("pdftk SomeOutputFile.pdf data_dump output SomeOutputFile.txt")
list.files(pattern="*.txt$|*.pdf$")
# [1] "SomeOutputFile.pdf" "SomeOutputFile.txt"

readLines("SomeOutputFile.txt")
#  [1] "InfoBegin"                    "InfoKey: Creator"            
#  [3] "InfoValue: R"                 "InfoBegin"                   
#  [5] "InfoKey: Title"               "InfoValue: R Graphics Output"
#  [7] "InfoBegin"                    "InfoKey: Producer"           
#  [9] "InfoValue: R 3.0.1"           "InfoBegin"                   
# [11] "InfoKey: ModDate"             "InfoValue: D:20131102170720" 
# [13] "InfoBegin"                    "InfoKey: CreationDate"       
# [15] "InfoValue: D:20131102170720"  "NumberOfPages: 1"            
# [17] "PageMediaBegin"               "PageMediaNumber: 1"          
# [19] "PageMediaRotation: 0"         "PageMediaRect: 0 0 504 504"  
# [21] "PageMediaDimensions: 504 504"

setwd(x)
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
[readline][1] connection <- readline("Connection: ")
uid <- readline("User id: ")
cat("Password: ")
system("stty -echo")
password <- readline()
system("stty echo") config.local load(config.local) svn propset svn:ignore "config.local . "
-------------------------------------------------------------------------------------------------------
readPDF readPDF system(paste('"C:/Program Files/xpdf/pdftotext.exe"', 
             '"C:/Users/FCG/Desktop/NoteF7000.pdf"'), wait=FALSE) R require(tm)
mycorpus <- Corpus(URISource("C:/Users/FCG/Desktop/NoteF7001.txt")) inspect(mycorpus)

A corpus with 1 text document

The metadata consists of 2 tag-value pairs and a data frame
Available tags are:
  create_date creator 
Available variables in the data frame are:
  MetaID 

[[1]]
Market Notice
Number: Date F7001 08 May 2013

New IDX SSF (EWJG) The following new IDX SSF contract will be added to the list and will be available for trade today.

Summary Contract Specifications Contract Code Underlying Instrument Bloomberg Code ISIN Code EWJG EWJG IShares MSCI Japan Index Fund (US) EWJ US EQUITY US4642868487 1 (R1 per point)

Contract Size / Nominal

Expiry Dates & Times

10am New York Time; 14 Jun 2013 / 16 Sep 2013

Underlying Currency Quotations Minimum Price Movement (ZAR) Underlying Reference Price

USD/ZAR Bloomberg Code (USDZAR Currency) Price per underlying share to two decimals. R0.01 (0.01 in the share price)

4pm underlying spot level as captured by the JSE.

Currency Reference Price

The same method as the one utilized for the expiry of standard currency futures on standard quarterly SAFEX expiry dates.

JSE Limited Registration Number: 2005/022939/06 One Exchange Square, Gwen Lane, Sandown, South Africa. Private Bag X991174, Sandton, 2146, South Africa. Telephone: +27 11 520 7000, Facsimile: +27 11 520 8584, www.jse.co.za

Executive Director: NF Newton-King (CEO), A Takoordeen (CFO) Non-Executive Directors: HJ Borkum (Chairman), AD Botha, MR Johnston, DM Lawrence, A Mazwai, Dr. MA Matooane , NP Mnxasana, NS Nematswerani, N Nyembezi-Heita, N Payne Alternate Directors: JH Burke, LV Parsons

Member of the World Federation of Exchanges

Company Secretary: GC Clarke
Settlement Method

Cash Settled

-

Clearing House Fees -

On-screen IDX Futures Trading: o 1 BP for Taker (Aggressor) o Zero Booking Fees for Maker (Passive) o No Cap o Floor of 0.01 Reported IDX Futures Trades o 1.75 BP for both buyer and seller o No Cap o Floor of 0.01

Initial Margin Class Spread Margin V.S.R. Expiry Date

R 10.00 R 5.00 3.5 14/06/2013, 16/09/2013

The above instrument has been designated as "Foreign" by the South African Reserve Bank

Should you have any queries regarding IDX Single Stock Futures, please contact the IDX team on 011 520-7399 or idx@jse.co.za

Graham Smale Director: Bonds and Financial Derivatives Tel: +27 11 520 7831 Fax:+27 11 520 8831 E-mail: grahams@jse.co.za

Distributed by the Company Secretariat +27 11 520 7346

Page 2 of 2
-------------------------------------------------------------------------------------------------------
grideExtra textplot sweave knitr createPDF <- function(xx, name=deparse(substitute(xx))){
  require(xtable)
  tt <- print(xtable(xx), type='latex')
  texfile <- paste0('./reports/', name, '.tex')
  cat(
    '\\documentclass[12pt]{report}
\\usepackage[landscape]{geometry}
\\date{}
\\begin{document}', tt, '\\end{document}', sep='', 
    file=texfile
  )
  ## pdflatex from texlive package for linux converts .tex to .pdf
  system(paste0('pdflatex ', '-output-directory ./reports ', texfile))
}
-------------------------------------------------------------------------------------------------------
system wolf <- system("q:/mi_cli/mediainfo.exe Krofel_video2volk2.AVI", intern = TRUE)
wolf # output by MediaInfo

[1] "General"                                                            
 [2] "Complete name                            : Krofel_video2volk2.AVI"  
 [3] "Format                                   : AVI"                     
 [4] "Format/Info                              : Audio Video Interleave"  
 [5] "File size                                : 10.7 MiB"                
 [6] "Duration                                 : 11s 188ms"               
 [7] "Overall bit rate                         : 8 016 Kbps"              
 ...        
[37] "Channel count                            : 1 channel"               
[38] "Sampling rate                            : 8 000 Hz"                
[39] "Bit depth                                : 16 bits"                 
[40] "Stream size                              : 174 KiB (2%)"            
[41] "Alignment                                : Aligned on interleaves"  
[42] "Interleave, duration                     : 63 ms (1.00 video frame)"

# Find where Duration is (general) and extract it.
find.duration <- grepl("Duration", wolf)
wolf[find.duration][1]# 1 = General, 2 = Video, 3 = Audio
[1] "Duration                                 : 11s 188ms"
-------------------------------------------------------------------------------------------------------
intern=T ?system x <- system("wmic cpu", intern = T)
x
## [1] "AddressWidth  Architecture  Availability  Caption                               ConfigManagerErrorCode  ConfigManagerUserConfig  CpuStatus  CreationClassName  CurrentClockSpeed  CurrentVoltage  DataWidth  Description                           DeviceID  ErrorCleared  ErrorDescription  ExtClock  Family  InstallDate  L2CacheSize  L2CacheSpeed  L3CacheSize  L3CacheSpeed  LastErrorCode  Level  LoadPercentage  Manufacturer  MaxClockSpeed  Name                                     NumberOfCores  NumberOfLogicalProcessors  OtherFamilyDescription  PNPDeviceID  PowerManagementCapabilities  PowerManagementSupported  ProcessorId       ProcessorType  Revision  Role  SocketDesignation  Status  StatusInfo  Stepping  SystemCreationClassName  SystemName      UniqueId  UpgradeMethod  Version  VoltageCaps  \r"
## [2] "64            9             3             Intel64 Family 6 Model 42 Stepping 7                                                   1          Win32_Processor    2697               15              64         Intel64 Family 6 Model 42 Stepping 7  CPU0                                      100       6                    1024                       6144         0                            6      3               GenuineIntel  3101           Intel(R) Core(TM) i5-2400 CPU @ 3.10GHz  4              4                                                                                            FALSE                     BFEBFBFF000206A7  3              10759     CPU   CPU 1              OK      3                     Win32_ComputerSystem     CHINMAY-OFFICE            1                                    \r"
## [3] "\r
-------------------------------------------------------------------------------------------------------
bedGraph >numRow=as.integer(system(paste("wc -l", bedGraph, "| sed 's/[^0-9.]*\\([0-9.]*\\).*/\\1/'"), intern=T)) read.csv read.table >system.time((BG=read.table(bedGraph, nrows=numRow, col.names=c('chr', 'start', 'end', 'score'),colClasses=c('character', rep('integer',3)))))
   user  system elapsed 
 25.877   0.887  26.752 
>object.size(BG)
203949432 bytes
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
system("path/to/file.jar")
-------------------------------------------------------------------------------------------------------
env CMD dir /s <name> dir C:\>dir /s foo.sh
  Volume in drive C is WINDOWS
  VOlume Serial Number is 442D-5D33

  Directory of C:\cygwin64\home\u8002287

12/01/2013  01:56 PM                 29 foo.sh #!/bin/sh
echo "Invoked Foo" env system('cmd.exe /c c:\\cygwin\\bin\\env /cygdrive/c/cygwin64/home/u8002287/foo.sh', TRUE)
## [1] "Invoked Foo" env
-------------------------------------------------------------------------------------------------------
#! # ! /usr/bin/perl /usr/bin/php /usr/bin/perl <original_script> perl bash perl php R system()
-------------------------------------------------------------------------------------------------------
.Rmd pandoc .md mdown.Rmd knit('mdown.Rmd')
system('pandoc -s -t slidy mdown.md -o mdown.html') .Rmd
-------------------------------------------------------------------------------------------------------
parallel f<-function(x)system("dd if=/dev/urandom bs=32k count=2000 | bzip2 -9 >> /dev/null", ignore.stdout=TRUE,ignore.stderr=TRUE,wait=FALSE)
library(parallel)
mclapply(1:4,f,mc.cores=4) parallel mclapply a<-mclapply(rep(1e8,4),rnorm,mc.cores=4) pthreads apt-get install libpthread-stubs0 parallel multicore parallel multicore parallel multicore parallel library(parallel)
mcaffinity()
# Should be c(1,2,3,4) for you.
detectCores()
# Should be 4 for you.
-------------------------------------------------------------------------------------------------------
system("dd if=/dev/urandom bs=32k count=2000 | bzip2 -9 >> /dev/null", ignore.stdout=TRUE,ignore.stderr=TRUE,wait=FALSE)
system("dd if=/dev/urandom bs=32k count=2000 | bzip2 -9 >> /dev/null", ignore.stdout=TRUE,ignore.stderr=TRUE,wait=FALSE)
system("dd if=/dev/urandom bs=32k count=2000 | bzip2 -9 >> /dev/null", ignore.stdout=TRUE,ignore.stderr=TRUE,wait=FALSE)
system("dd if=/dev/urandom bs=32k count=2000 | bzip2 -9 >> /dev/null", ignore.stdout=TRUE,ignore.stderr=TRUE,wait=FALSE)
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
system system(sprintf("perl test.pl %s", j)) %s j
-------------------------------------------------------------------------------------------------------
final.command =
    paste(
      hadoop.command, 
      stream.mapred.io,  
      if(is.null(backend.parameters)) ""
      else
        do.call(paste.options, backend.parameters), 
      input, 
      output, 
      mapper, 
      combiner,
      reducer, 
      image.cmd.line, 
      m.fl, 
      r.fl, 
      c.fl,
      input.format.opt, 
      output.format.opt, 
      "2>&1")
  if(verbose) {
    retval = system(final.command)
    if (retval != 0) stop("hadoop streaming failed with error code ", retval, "\n")}
  else {
    console.output = tryCatch(system(final.command, intern=TRUE), 
                              warning = function(e) stop(e)) 
    0}}
-------------------------------------------------------------------------------------------------------
normalize_C <- function (string) {
  cmd <- paste(shQuote(Sys.which('ruby')), '-e',
    shQuote("require 'unicode'; ARGV.each {|text| puts Unicode::normalize_C(text)}"),
    shQuote(string))
  # message(cmd)
  system(cmd, intern=T)
} > normalize_C('\u00e9')
[1] "é"
> normalize_C('\u0065\u0301')
[1] "é"
> normalize_C('\u0065\u0301') == normalize_C('\u00e9')
[1] TRUE normalize_C normalize_D
-------------------------------------------------------------------------------------------------------
system foo system("foo") R
-------------------------------------------------------------------------------------------------------
shQuote system(paste(shQuote(file.path(dirmolconvert, "molconvert.exe")),
             "pdb",
             shQuote("C:\\molecule conversions\\cembrene A.mol"))
-------------------------------------------------------------------------------------------------------
system() lattice ggplot2 postscript()
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
BLAH BLAH Sys.setenv Sys.setenv(BLAH="blah")
system("echo $BLAH")
# blah
-------------------------------------------------------------------------------------------------------
system() exportPattern("^[^\\.]") install.packages("path/to/package.tar.gz",type="source")
-------------------------------------------------------------------------------------------------------
crawlPDFs <- function(x) {
  # x is a character string to the url on the web
  url <- x
  dest <- tempfile(fileext = ".pdf")
  download.file(url, dest, mode = "wb")

  # set path to pdftotxt.exe and convert pdf to text
  exe <- "C:\\Program Files\\xpdfbin-win-3.03\\bin32\\pdftotext.exe"
  system(paste("\"", exe, "\" \"", dest, "\"", sep = ""), wait = F)

  # get txt-file name and open it  
  filetxt <- sub(".pdf", ".txt", dest)
  shell.exec(filetxt); shell.exec(filetxt)    # strangely the first try always throws an error..


  # do something with it, i.e. a simple word cloud 
  library(tm)
  library(wordcloud)
  library(Rstem)

  txt <- readLines(filetxt) # don't mind warning..

  txt <- tolower(txt)
  txt <- removeWords(txt, c("\\f", stopwords()))

  corpus <- Corpus(VectorSource(txt))
  corpus <- tm_map(corpus, removePunctuation)
  tdm <- TermDocumentMatrix(corpus)
  m <- as.matrix(tdm)
  d <- data.frame(freq = sort(rowSums(m), decreasing = TRUE))

  # Stem words
  d$stem <- wordStem(row.names(d), language = "english")

  # and put words to column, otherwise they would be lost when aggregating
  d$word <- row.names(d)

  # remove web address (very long string):
  d <- d[nchar(row.names(d)) < 20, ]

  # aggregate freqeuncy by word stem and
  # keep first words..
  agg_freq <- aggregate(freq ~ stem, data = d, sum)
  agg_word <- aggregate(word ~ stem, data = d, function(x) x[1])

  d <- cbind(freq = agg_freq[, 2], agg_word)

  # sort by frequency
  d <- d[order(d$freq, decreasing = T), ]

  # print wordcloud:
  wordcloud(d$word, d$freq)

  # remove files
  file.remove(dir(tempdir(), full.name=T)) # remove files
}

sapply(list.of.urls, FUN = crawlPDFs) list.of.urls
-------------------------------------------------------------------------------------------------------
map.kml library(rgdal)

setwd("<directory containing kml file>")

system(paste("ogrinfo", "map.kml")) # diagnostic to identify the layers
# Had to open data source read-only.
# INFO: Open of `map.kml'
#       using driver `KML' successful.
# 1: KmlFile (Line String)          <- This is the layer name

map <- readOGR(dsn="map.kml",layer="KmlFile")
df  <- data.frame(map@lines[[1]]@Lines[[1]]@coords)
colnames(df) <- c("lon","lat")
df

#         lon      lat
# 1  4.538678 43.96218
# 2  4.536100 43.96221
# 3  4.537710 43.96415
# 4  4.536106 43.96536
# 5  4.538665 43.96604
# ... xmlns:gx
-------------------------------------------------------------------------------------------------------
#ifndef foo_h__
#define foo_h__

extern void foo(int var);

#endif  // foo_h__ #include <stdio.h>
int global_var;

void foo(int var)
{
    global_var= var;
}
-------------------------------------------------------------------------------------------------------
> locales <- system("locale -a", intern = TRUE)
> library(stringr)
> unique(str_split_fixed(locales, "\\.", 2)[, 1]) 
 [1] "af_ZA" "am_ET" "be_BY" "bg_BG" "ca_ES" "cs_CZ" "da_DK" "de_AT" "de_CH"
[10] "de_DE" "el_GR" "en_AU" "en_CA" "en_GB" "en_IE" "en_NZ" "en_US" "es_ES"
[19] "et_EE" "eu_ES" "fi_FI" "fr_BE" "fr_CA" "fr_CH" "fr_FR" "he_IL" "hi_IN"
[28] "hr_HR" "hu_HU" "hy_AM" "is_IS" "it_CH" "it_IT" "ja_JP" "kk_KZ" "ko_KR"
[37] "lt_LT" "nl_BE" "nl_NL" "no_NO" "pl_PL" "pt_BR" "pt_PT" "ro_RO" "ru_RU"
[46] "sk_SK" "sl_SI" "sr_YU" "sv_SE" "tr_TR" "uk_UA" "zh_CN" "zh_HK" "zh_TW"
[55] "C"     "POSIX" Sys.setlocale() > Sys.setlocale(locale="he_IL")
[1] "he_IL/he_IL/he_IL/C/he_IL/en_AU.UTF-8"
> Sys.getlocale()
[1] "he_IL/he_IL/he_IL/C/he_IL/en_AU.UTF-8"
-------------------------------------------------------------------------------------------------------
system("sed -i -e 's/^/#\\x27 /\' file.txt")
-------------------------------------------------------------------------------------------------------
system() system("TASKKILL /F /IM notepad.exe")
-------------------------------------------------------------------------------------------------------
system("cd ..;ls") shell("cd C: & dir") shell("cd C: & dir", intern=T) system("cd ..; ls", intern=T)
-------------------------------------------------------------------------------------------------------
system cmds <- c("ls", "cd ..", "ls");
system(paste(cmds, collapse=";"))
-------------------------------------------------------------------------------------------------------
def runScript():
    os.chdir('')
    returnCode = os.system(r'C:/Program Files/R/R-3.0.2/bin/i386/R --vanilla < C:/Users/Kyle/Desktop/script.R')
    print returnCode
    return returnCode
-------------------------------------------------------------------------------------------------------
install.packages( "RSQLite" )        # will install package "DBI"
library( RSQLite )
db <- dbConnect( dbDriver("SQLite"), dbname = "super.db" ) system() system( "cat *.txt > allmyfiles.txt" ) allmyfiles.txt allMyFiles <- read.table( "allmyfiles.txt", header = FALSE, sep = "," ) dbWriteTable( db, "mysupertable", allMyFiles, overwrite = TRUE, append = FALSE ) system() allmyfiles.txt table.sql CREATE TABLE mysupertable (myids varchar(255), v1 float, v2 float, v3 float);
.separator ,
.import allmyfiles.txt mysupertable system( "sqlite3 super.db < table.sql" )
-------------------------------------------------------------------------------------------------------
