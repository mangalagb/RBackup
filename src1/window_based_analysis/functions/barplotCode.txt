tN <- table(Ni <- rpois(100, lambda=5))
r <- barplot(tN)

#stop here and examine the plot
#the next bit converts the matrix to a data frame,
#  sorts it, and plots it again

df<-data.frame(tN)
df2<-df[order(df$Freq),]
barplot(df2$Freq)
-------------------------------------------------------------------------------------------------------
ht1=c(0.3,0.7)
ht2=c(0.4,0.6)
barplot(cbind(ht1,ht2))
-------------------------------------------------------------------------------------------------------
valact <- subset(val, variable=='actual')
valsort <- valact[ order(-valact[,"Value"]),] boxplot() op <- par(mar=c(3,3,3,3)) 
bp <- barplot(valsort [ , "Value"], ylab="", xlab="", ylim=c(0,1),    
              names.arg=as.character(valsort[,"State"]), main="How's that?") 
lines(bp, cumsum(valsort[,"Value"])/sum(valsort[,"Value"]), 
      ylim=c(0,1.05), col='red') 
axis(4)
box() 
par(op) lines()
-------------------------------------------------------------------------------------------------------
# Define your data
dfr <- data.frame(
   countrydes=rep(c("USA", "CANADA"), 2), 
   Insured=c(4500, 4500, 7500, 7600))
# Sum by country
totals <- with(dfr, by(Insured, countrydes, sum))
# Plot the answer
barplot(totals) aggregate by countrydes
-------------------------------------------------------------------------------------------------------
las=1 require(grDevices)
tN <- table(Ni <- stats::rpois(100, lambda=5))
r <- barplot(tN, col=rainbow(20), las=1)
-------------------------------------------------------------------------------------------------------
submitted y1 <- submitted[30:(length(submitted)-1)]
x1 <- seq(length(y1)) seq() barplot() as.vector() fit1 <- nls(y1~a*x1*exp(-b*x1^2),start=list(a=500,b=.01),trace=TRUE)
bar <- barplot(submitted, las=2, cex.axis=0.8, cex=0.8)
bar2 <- as.vector(bar) bar2 lines() length() lines(x = bar2[30:(length(bar2)-1)], y = predict(fit1))
-------------------------------------------------------------------------------------------------------
barplot dat <- 1:5                   # fake data for barplot
fit <- dat+rnorm(5, sd=0.1)  # fake fitted values

bp <- barplot(dat)           # draw plot and capture x-coordinates
lines(bp, fit)               # add line idx x <- 0:(length(submitted)-1) 
idx <- 30:(length(submitted)-1)  # the part of the data to be modeled
y1 <- submitted[idx] 
x1 <- idx-30 
fit1 <- nls(y1~a*x1*exp(-b*x1^2),start=list(a=500,b=.01),trace=TRUE) 
# capture the midpoints from the barplot
bp <- barplot(submitted,names.arg=x, las=2, cex.axis=0.8, cex=0.8) 
# subset the midpoints to the range of the fit
lines(bp[idx], predict(fit1)) seq(0:n) 0:n
-------------------------------------------------------------------------------------------------------
error.bars<-function(xv,z,nn){
par(las = 1)
yv <- barplot(xv,horiz = TRUE,col="cyan",xlim=c(0,(max(xv)+max(z))),names=nn,xlab=deparse(substitute(xv)))
g <- (max(yv)-min(yv))/(3*length(yv)) 
for (i in 1:length(yv)) {
lines(c(xv[i]+z[i],xv[i]-z[i]),c(yv[i],yv[i]))
lines(c(xv[i]+z[i],xv[i]+z[i]),c(yv[i]+g,yv[i]-g))
lines(c(xv[i]-z[i],xv[i]-z[i]),c(yv[i]+g,yv[i]-g))
}}

plot.data <- plot.data[order(plot.data$mean),] # reorder data
mean<-as.vector(plot.data$mean)
se<-as.vector(plot.data$error)
labels<-as.character(plot.data$var)

error.bars(mean,se,labels)
-------------------------------------------------------------------------------------------------------
> data
    PC1     PC2     PC3     PC4     PC5     PC6     PC7     PC8     PC9    PC10 
0.29056 0.23833 0.11003 0.05549 0.04678 0.03788 0.02770 0.02323 0.02211 0.01925 barplot(data) qplot(x=names(data), y=data, geom='bar') levels(factor(names(data))) qplot(x=factor(names(data), levels=names(data)), y=data, geom='bar')
-------------------------------------------------------------------------------------------------------
png(filename="figure.png", width=900, bg="white")
par(mar=c(5,6,4,1)+.1)
barplot(c(1.1, 0.8, 0.7), horiz=TRUE, border="blue", axes=FALSE, col="darkblue")
axis(2, at=1:3, lab=c("elephant", "hippo", "snorkel"), las=1, cex.axis=1.3)
dev.off()
-------------------------------------------------------------------------------------------------------
df data <- tapply(df$total_dist, list(df$groupname,df$bin), sum)

barplot(data,beside=T,col=c("#ee7700","#3333ff")
,main="European Parliament Elections",xlab="Group",ylab="Seats")

legend(locator(1),rownames(data),fill=c("#ee7700","#3333ff")) library(ggplot2)
qplot(factor(bin),data=df,geom="bar",fill=groupname,weight=total_dist,position="dodge",
main = "European Parliament Elections", xlab="Group",ylab="Seats")
-------------------------------------------------------------------------------------------------------
survey.csv #Read in the data
d = read.table("survey.csv", sep=",", header=TRUE)

#Need to skip the username column, so d[,2:4]
#Use apply to calculate the totals in your table
barplot(apply(d[,2:4], 2, sum))
-------------------------------------------------------------------------------------------------------
#Some US state data
data(state)
dfr <- data.frame(name = state.name, area = state.area)
dfr$name <- with(dfr, factor(name, levels = name[order(area)]))

#The ggplot way
library(ggplot2)
ggplot(dfr, aes(name, area)) + geom_bar() + coord_flip()

#The lattice way
library(lattice)
barchart(name ~ area, data = dfr)

#The base way
par(las = 1, mar = c(4, 7, 1, 1))
with(dfr, barplot(area, names.arg = name, horiz = TRUE))
-------------------------------------------------------------------------------------------------------
barplot(dfr$area,las=2,names.arg = dfr$name,cex.names=0.7)
-------------------------------------------------------------------------------------------------------
barplot(table(rbinom(10000, 20000, 0.0001)))
-------------------------------------------------------------------------------------------------------
barplot mydata <- matrix(c(10, 21, 22, 33, 45, 23, 22, 43, 33), nrow=3)

# b will contain the x midpoints of the bars
b <- barplot(mydata)

# This will write labels in the middle of the bars, horizontally and vertically
text(b, colMeans(mydata), c("Label1", "Label2", "Label3"))

# This will write labels in the middle of the middle block
text(b, mydata[1,]+mydata[2,]/2, c("LabelA", "LabelB", "LabelC")) # Find the top y position of each block 
ypos <- apply(mydata, 2, cumsum)
# Move it downwards half the size of each block
ypos <- ypos - mydata/2
ypos <- t(ypos)

text(b, ypos, mydata)
-------------------------------------------------------------------------------------------------------
cex.axis set.seed(123)
foo <- data.frame(X = rnorm(10), Y = rnorm(10))
plot(Y ~ X, data = foo, cex.axis = 3) > sessionInfo()
R version 2.11.1 Patched (2010-08-17 r52767)
Platform: x86_64-unknown-linux-gnu (64-bit)

locale:
 [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    
 [5] LC_MONETARY=C              LC_MESSAGES=en_GB.UTF-8   
 [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] grid      stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggplot2_0.8.8 proto_0.3-8   reshape_0.8.3 plyr_1.2.1   

loaded via a namespace (and not attached):
[1] digest_0.4.2 tools_2.11.1 cex.axis cex.lab plot(Y ~ X, data = foo, cex.lab = 3) barplot() cex.names barplot() cex.axis horiz = TRUE barplot() axis() axis() barplot()
-------------------------------------------------------------------------------------------------------
plot() axis() xaxt yaxt plot() plot(Y ~ X, data=foo,yaxt="n")
axis(2,cex.axis=2) plot(Y ~ X, data=foo,xaxt="n")
axis(1,cex.axis=2) tN <- table(sample(letters[1:5],100,replace=T,p=c(0.2,0.1,0.3,0.2,0.2)))

op <- par(mfrow=c(1,2))
barplot(tN, col=rainbow(5),cex.axis=0.5) # for the Y-axis
barplot(tN, col=rainbow(5),cex.names=0.5) # for the X-axis
par(op)
-------------------------------------------------------------------------------------------------------
# sample data
Df <- data.frame(
  TIME = as.factor(seq.Date(as.Date("2010-09-11"),as.Date("2010-09-20"),by="day")),
  FOCUS.APP = as.factor(rep(c("F101","F102"),5)),
  X = sample(c(TRUE,FALSE,NA),10,r=T)
)

# make tables
T1 <- table(Df)
T2 <- table(Df[,-3])

# plot tables
barplot(T1)
barplot(T2)
-------------------------------------------------------------------------------------------------------
las cex.names # Sample dataset
x <- rpois(10,20)
names(x) <- replicate(10,
   paste(sample(LETTERS[1:10],10),collapse="")
)

# Demonstration of the options
op <- par(mar = c(5,6,4,2) + 0.1)
barplot(x,horiz=T,las=1,cex.names=0.5)
par(op) las cex.names
-------------------------------------------------------------------------------------------------------
df<-data.frame(ID=sample(100),
school=factor(sample(3,100,TRUE),labels=c("School1","School2","School3")),
result=factor(sample(2,100,TRUE),labels=c("passed","failed")))

p<-aggregate(df$result=="passed"~school, mean, data=df)
barplot(p[,2]*100,names.arg=p[,1])
-------------------------------------------------------------------------------------------------------
tapply students <- 400
schools <- 5

df <- data.frame("id" = 1:students,
    "school" = sample(paste("school", 1:schools, sep = ""),
        size = students, replace = TRUE),
    "results" = sample(c("passed", "failed"),
        size = students, replace = TRUE, prob = c(.8, .2)))

p <- tapply(df$results == "passed", df$school, mean) * 100

barplot(p)
-------------------------------------------------------------------------------------------------------
sizes <- 3:10   #your sizes    
part.type <- sample(sizes, 1000, replace = T)  #your particle sizes  

count <- table(part.type)  
barplot(count, width = size)
 part <- rchisq(1000, 10)  
part.type <- cut(part, 4)  

count <- table(part.type)  
barplot(count, width = size)
 part <- rchisq(1000, 10)
part.type <- cut(part, 20)

count <- table(part.type)
dotchart(count)
-------------------------------------------------------------------------------------------------------
bigmacprice=rnorm(10)  

names(bigmacprice)=1:10

par(bg="lightblue")
barplot(sort(bigmacprice),horiz=T,legend="Bunfight!! ",args.legend = list( x = "topleft",bty="n"),col='darkblue')
-------------------------------------------------------------------------------------------------------
bigmacprice <- data.frame(
    country = c("Switzerland", "Brazil", "Euro area",
        "Canada", "Japan", "United States",
        "Britain", "Singapore", "South Korea",
        "South Africa", "Mexico", "Thailand",
        "Russia", "Malaysia", "China"),
    price = c(6.78, 5.26, 4.79, 4.18, 3.91, 3.71,
              3.63, 3.46, 3.03, 2.79, 2.58, 2.44,
              2.39, 2.25, 2.18)
)


plotbigmac <- function(mac, base = "United States", xlim = c(-40, 100)) {
    mac <- mac[order(mac$price),]
    base = which(mac$country == base)
    height <- (mac$price / mac[base, "price"] - 1) * 100
    par(bg = "#d0e0e7", col.main = "#262324", col.axis = "#393E46",
        mar = c(8, 8, 6, 6), las = 1)
 barplot(height,width=.1, space = .4,names.arg = mac,cex.names = .8,col = "#01516c",border = "#7199a8", # border = "#577784",horiz = TRUE, xlim = c(-40,100),axes = FALSE)
    axis(3, lty = 0)
    title(main = "Bunfight\nBig Mac index", col = "#393E46")

    abline(v = seq(-100, 100, 10), col = "white", lwd = 2)
    abline(v = 0, col = "#c8454e", lwd = 2)
    par(xpd = TRUE)
    for (i in 1:nrow(mac)) {
        rect(105, (i - 1) / 7, 118, i / 7 - 0.05,
        col = "white", border = "#7199a8")
        text(112, (i - 1) / 7 + 0.05, mac$price[i], cex = 0.8, col = "#393E46")
    }
    rect(-120, 2.5, -90, 3, col = "#c8454e", border = "#c8454e")
    text(-68, -.2, "Sources:", col = "#393E46")
    text(-64, -.3, "McDonald's;", col = "#393E46")
    text(-60, -.4, "The Economist", col = "#393E46")
}

plotbigmac(bigmacprice) barplot barplot plotBigMac <- function(mac, base = "United States") {
    old.par <- par(no.readonly = TRUE)
    on.exit(par(old.par))
    # Create data:
    mac <- mac[order(mac$price),]
    base = which(mac$country == base)
    height <- (mac$price / mac[base, "price"] - 1) * 100
    # Costume 'barplot'
    NN <- length(height)
    width <- rep(1, length.out = NN)
    delta <- width / 2
    w.r <- cumsum(width + 0.5)
    w.m <- w.r - delta
    w.l <- w.m - delta
    xlim <- c(range(-.01 * height, height)[1], 100)
    ylim <- c(min(w.l), max(w.r))
    par(bg = "#d0e0e7", col.main = "#262324", col.axis = "#393E46",
        mar = c(8, 8, 6, 6), las = 1, cex = 0.9)
    plot.new()
    plot.window(xlim, ylim)
    abline(v = seq(-100, 100, 20), col = "white", lwd = 2)
    rect(0, w.l, height, w.r, col = "#01516c", border = "#7199a8", lwd = 1)

    # Lines and axis
    abline(v = 0, col = "#c8454e", lwd = 2)
    axis(3, axTicks(3), abs(axTicks(3)), lty = 0)
    axis(2, labels = mac$country, at = w.m, lty = 0)

    # Move outside of plot area
    par(xpd = TRUE)

    # Text misc.
    text(5, (w.l[base] + w.r[base]) / 2, "nil", font = 3)
    text(8, w.r[NN] + 2.3, "+")
    text(-8, w.r[NN] + 2.3, "-")

    # Create price boxes:
    rect(105, w.l, 125, w.r,
        col = "white", border = "#7199a8", lwd = 1)
    text(115, (w.r + w.l)/2, mac$price, cex = 0.8, col = "#393E46")

}
-------------------------------------------------------------------------------------------------------
?table table(s1,s2) s1 s2 cbind(s1,s2) a <- c("M","M","F","F")
b <- c("F","F","M","M")
table(a,b)

  b
a   F M
  F 0 2
  M 2 0 t1 <- table(s1)
t2 <- table(s2)
barplot(cbind(t1,t2), beside=TRUE, col=c("lightblue", "salmon"))
-------------------------------------------------------------------------------------------------------
barplot(x[,3], horiz=TRUE, space = 0.4, ylim = c(0,25), yaxp=c(0,25,1), main = "Title", las=1, cex.names=0.8, ylab="y label", xpd=F)
-------------------------------------------------------------------------------------------------------
barplot(x[1:25,3], horiz=TRUE,  space = 0.4,  yaxp=c(0,25,1), main = "Title", las=1,  
          cex.names=0.8, ylab="y label")
-------------------------------------------------------------------------------------------------------
set.seed(123)
vec <- sample(1:9, 100, replace = TRUE)
vec <- factor(vec, labels = paste("My long event name", 1:9)) barplot() table() las = 2 ## lots of extra space in the margin for side 1
op <- par(mar = c(10,4,4,2) + 0.1)
barplot(table(vec), las = 2)
par(op) ## reset dotchart() dotchart(table(vec))
-------------------------------------------------------------------------------------------------------
barplot x <- runif(10, 0,1) 
y <- matrix(c(x, 1-x), nrow=2, ncol=10, byrow=TRUE) 
bp <- barplot(y, horiz=TRUE, beside=FALSE, names.arg=seq(1,10,1), las=1, 
              xlim=c(0, 1.2)) 
text(x, bp, signif(x,2), pos=4)
bp
-------------------------------------------------------------------------------------------------------
ks.test(data, pnbinom, size=100, prob=0.8) data size prob goodfit() barplot(table(data)) barplot(table(rnbinom(200, size = 1.5, prob = 0.8)))
-------------------------------------------------------------------------------------------------------
barplot(table(format(df$date,"%m")))
-------------------------------------------------------------------------------------------------------
TkBuildDist <- function(  x=seq(min+(max-min)/nbin/2,
                                max-(max-min)/nbin/2,
                                length.out=nbin),
                          min=0, max=10, nbin=10, logspline=TRUE,
                          intervals=FALSE) {

    if(logspline) logspline <- require(logspline)
    require(tkrplot)

    xxx <- x

    brks <- seq(min, max, length.out=nbin+1)
    nx <- seq( min(brks), max(brks), length.out=250 )

    lx <- ux <- 0
    first <- TRUE

    replot <- if(logspline) {
        if(intervals) {
            function() {
                hist(xxx, breaks=brks, probability=TRUE,xlab='', main='')
                xx <- cut(xxx, brks, labels=FALSE)
                fit <- oldlogspline( interval = cbind(brks[xx], brks[xx+1]) )
                lines( nx, doldlogspline(nx,fit), lwd=3 )
                if(first) {
                    first <<- FALSE
                    lx <<- grconvertX(min, to='ndc')
                    ux <<- grconvertX(max, to='ndc')
                }
            }
        } else {
            function() {
                hist(xxx, breaks=brks, probability=TRUE,xlab='', main='')
                fit <- logspline( xxx )
                lines( nx, dlogspline(nx,fit), lwd=3 )
                if(first) {
                    first <<- FALSE
                    lx <<- grconvertX(min, to='ndc')
                    ux <<- grconvertX(max, to='ndc')
                }
            }
        }
    } else {
        function() {
            hist(xxx, breaks=brks, probability=TRUE,xlab='',main='')
            if(first) {
                first <<- FALSE
                lx <<- grconvertX(min, to='ndc')
                ux <<- grconvertX(max, to='ndc')
            }
        }
    }

    tt <- tktoplevel()
    tkwm.title(tt, "Distribution Builder")

    img <- tkrplot(tt, replot, vscale=1.5, hscale=1.5)
    tkpack(img, side='top')

    tkpack( tkbutton(tt, text='Quit', command=function() tkdestroy(tt)),
           side='right')

    iw <- as.numeric(tcl('image','width',tkcget(img,'-image')))

    mouse1.down <- function(x,y) {
        tx <- (as.numeric(x)-1)/iw
        ux <- (tx-lx)/(ux-lx)*(max-min)+min
        xxx <<- c(xxx,ux)
        tkrreplot(img)
    }

    mouse2.down <- function(x,y) {
        if(length(xxx)) {
            tx <- (as.numeric(x)-1)/iw
            ux <- (tx-lx)/(ux-lx)*(max-min)+min
            w <- which.min( abs(xxx-ux) )
            xxx <<- xxx[-w]
            tkrreplot(img)
        }
    }

    tkbind(img, '<ButtonPress-1>', mouse1.down)
    tkbind(img, '<ButtonPress-2>', mouse2.down)
    tkbind(img, '<ButtonPress-3>', mouse2.down)

    tkwait.window(tt)

    out <- list(x=xxx)
    if(logspline) {
        if( intervals ) {
            xx <- cut(xxx, brks, labels=FALSE)
            out$logspline <- oldlogspline( interval = cbind(brks[xx], brks[xx+1]) )
        } else {
            out$logspline <- logspline(xxx)
        }
    }

    if(intervals) {
        out$intervals <- table(cut(xxx, brks))
    }

    out$breaks <- brks

    return(out)
} TkBuildDist2 <- function( min=0, max=1, nbin=10, logspline=TRUE) {
    if(logspline) logspline <- require(logspline)
    require(tkrplot)

    xxx <- rep( 1/nbin, nbin )

    brks <- seq(min, max, length.out=nbin+1)
    nx <- seq( min, max, length.out=250 )

    lx <- ux <- ly <- uy <- 0
    first <- TRUE

    replot <- if(logspline) {
        function() {
            barplot(xxx, width=diff(brks), xlim=c(min,max), space=0,ylim=c(0,0.5), col=NA)
            axis(1,at=brks)
            xx <- rep( 1:nbin, round(xxx*100) )
            capture.output(fit <- oldlogspline( interval = cbind(brks[xx], brks[xx+1]) ))
            lines( nx, doldlogspline(nx,fit)*(max-min)/nbin, lwd=3 )

            if(first) {
                first <<- FALSE
                lx <<- grconvertX(min, to='ndc')
                ly <<- grconvertY(0,   to='ndc')
                ux <<- grconvertX(max, to='ndc')
                uy <<- grconvertY(0.5, to='ndc')
            }
        }
    } else {
        function() {
            barplot(xxx, width=diff(brks), xlim=range(brks), space=0,ylim=c(0,0.5), col=NA)
            axis(at=brks)
            if(first) {
                first <<- FALSE
                lx <<- grconvertX(min, to='ndc')
                ly <<- grconvertY(0,   to='ndc')
                ux <<- grconvertX(max, to='ndc')
                uy <<- grconvertY(0.5, to='ndc')
            }
        }
    }

    tt <- tktoplevel()
    tkwm.title(tt, "Distribution Builder")

    img <- tkrplot(tt, replot, vscale=1.5, hscale=1.5)
    tkpack(img, side='top')

    tkpack( tkbutton(tt, text='Quit', command=function() tkdestroy(tt)),
           side='right')

    iw <- as.numeric(tcl('image','width',tkcget(img,'-image')))
    ih <- as.numeric(tcl('image','height',tkcget(img,'-image')))



    md <- FALSE

    mouse.move <- function(x,y) {
        if(md) {
            tx <- (as.numeric(x)-1)/iw
            ty <- 1-(as.numeric(y)-1)/ih

            w <- findInterval(tx, seq(lx,ux, length=nbin+1))

            if( w > 0 && w <= nbin && ty >= ly && ty <= uy ) {
                 xxx[w] <<- 0.5*(ty-ly)/(uy-ly)
                xxx[-w] <<- (1-xxx[w])*xxx[-w]/sum(xxx[-w])

                tkrreplot(img)
            }
        }
    }

    mouse.down <- function(x,y) {
        md <<- TRUE
        mouse.move(x,y)
    }

    mouse.up <- function(x,y) {
        md <<- FALSE
    }

    tkbind(img, '<Motion>', mouse.move)
    tkbind(img, '<ButtonPress-1>', mouse.down)
    tkbind(img, '<ButtonRelease-1>', mouse.up)

    tkwait.window(tt)

    out <- list(breaks=brks, probs=xxx)
    if(logspline) {
        xx <- rep( 1:nbin, round(xxx*100) )
        out$logspline <- oldlogspline( interval = cbind(brks[xx], brks[xx+1]) )
    }

    return(out)
}
-------------------------------------------------------------------------------------------------------
library(gdata)
dataset = read.csv('blahh.csv')
barplot(dataset, main="blahh", xlab="blahh")
-------------------------------------------------------------------------------------------------------
mat <- matrix(dat$average, nrow=3, byrow=T)

barplot(mat,ylim=c(0),xlab='depth',names.arg=levels(factor(dat$depth)),ylab='average misclassifications',beside=TRUE,legend.text=c('Naive Bayes', 'AdaBoost'))
-------------------------------------------------------------------------------------------------------
hist buckets <- c(0,1,2,3,4,5,25)
mydata_hist <- hist(mydata$V3, breaks=buckets, plot=FALSE)
bp <- barplot(mydata_hist$count, log="y", col="white", names.arg=buckets)
text(bp, mydata_hist$counts, labels=mydata_hist$counts, pos=1) main xlab ylab
-------------------------------------------------------------------------------------------------------
set.seed(1)
dat2 <- data.frame(fac = factor(sample(LETTERS, 100, replace = TRUE)))
hist(table(dat2), xlab = "Frequency of Level Occurrence", main = "") hist() table(dat) table(dat) hist() dat <- data.frame(fac = rep(LETTERS[1:4], times = c(3,3,1,5))) "table" layout(matrix(1:4, ncol = 2))
plot(table(dat), main = "plot method for class \"table\"")
barplot(table(dat), main = "barplot")
tab <- as.numeric(table(dat))
names(tab) <- names(table(dat))
dotchart(tab, main = "dotchart or dotplot")
## or just this
## dotchart(table(dat))
## and ignore the warning
layout(1) factor table(factor) table(dat) table(dat$fac) lattice require(lattice)
with(dat, dotplot(fac, horizontal = FALSE)) ggplot2 require(ggplot2)
p <- ggplot(data.frame(Freq = tab, fac = names(tab)), aes(fac, Freq)) + 
    geom_point()
p
-------------------------------------------------------------------------------------------------------
plot(your.data, type = 'l') x = dnorm(seq(-1, 1, length = 500))
x.bins = rep(1:50, each = 10)
bars = aggregate(x, by = list(x.bins), FUN = sum)[,2]
barplot(bars)
-------------------------------------------------------------------------------------------------------
rowsum(temp$amount, format(temp$date,"%Y-%m")) barplot barplot(t(rowsum(temp$amount, format(temp$date,"%Y-%m"))), las=2)
-------------------------------------------------------------------------------------------------------
WD <- "~/out"  # set your output directory here
k <- 10        # 10 loops for simulated data

for (i in 1:k) {
  png(sprintf(paste(WD, "Rplot%03d.png", sep="/"), i))
  barplot(table(sample(LETTERS[1:6], 100, rep=TRUE)))
  dev.off()
}
-------------------------------------------------------------------------------------------------------
barplot(height=c(200,30,50),names.arg=1:3,space=0,ylab="Count") hist graphics:::plot.histogram ## must specify counts, mid, breaks, and specify that the bars are equidistant
h <- list(counts=c(200,30,50),mid=1:3,breaks=seq(0.5,3.5,by=1),equidist=TRUE)
graphics:::plot.histogram(h,freq=TRUE) agg agg=2 mids <- seq(0.1,0.6,by=0.1)
breaks <- seq(0.05,0.65,by=0.1)
counts <- c(3,7,6,9,6,7)

agg <- 2
bnames <- apply(matrix(mids,byrow=TRUE,ncol=agg),1,
                      function(x) paste(head(x,1),tail(x,1),sep="-"))
bmids <- rowMeans(matrix(mids,byrow=TRUE,ncol=agg))
bbreaks <- breaks[seq(1,length(breaks),by=agg)]
bcount <- rowSums(matrix(counts,byrow=TRUE,ncol=agg))

h <- list(counts=bcount,mid=bmids,breaks=bbreaks,equidist=TRUE)
graphics:::plot.histogram(h,freq=TRUE)
-------------------------------------------------------------------------------------------------------
mydata <- data.frame( 
    x = factor( rep( c(0:5,0:5), c(0,5,10,20,10,5,5,10,20,10,5,0))),
    sex = rep( c('F','M'), each=50 ) )

mydata.males <- mydata[ mydata$sex=='M', ]
mydata.males.dropped <- droplevels(mydata.males)

mydata.females <- mydata[ mydata$sex=='F', ]
mydata.females.dropped <- droplevels(mydata.females)

par(mfcol=c(2,2))
barplot(table(mydata.males$x), main='Male', sub='Default')
barplot(table(mydata.females$x), main='Female', sub='Default')

barplot(table(mydata.males.dropped$x), main='Male', sub='Drop')
barplot(table(mydata.females.dropped$x), main='Female', sub='Drop') sum
-------------------------------------------------------------------------------------------------------
dat dat <- structure(list(DATE = structure(list(sec = c(0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L), hour = c(0L, 6L, 12L, 18L, 0L, 6L, 
12L, 18L, 0L, 6L, 12L, 18L, 0L, 6L), mday = c(18L, 18L, 18L, 
18L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 21L, 21L), mon = c(5L, 
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L), year = c(111L, 
111L, 111L, 111L, 111L, 111L, 111L, 111L, 111L, 111L, 111L, 111L, 
111L, 111L), wday = c(6L, 6L, 6L, 6L, 0L, 0L, 0L, 0L, 1L, 1L, 
1L, 1L, 2L, 2L), yday = c(168L, 168L, 168L, 168L, 169L, 169L, 
169L, 169L, 170L, 170L, 170L, 170L, 171L, 171L), isdst = c(1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L)), .Names = c("sec", 
"min", "hour", "mday", "mon", "year", "wday", "yday", "isdst"
), class = c("POSIXlt", "POSIXt")), GROUP = structure(c(2L, 1L, 
2L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 1L), .Label = c("L", 
"R"), class = "factor"), GROUP2 = structure(c(1L, 2L, 2L, 1L, 
2L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 2L), .Label = c("L", "R"), class = "factor")), .Names = c("DATE", 
"GROUP", "GROUP2"), row.names = c(NA, -14L), class = "data.frame") counts <- apply(dat[, 2:3], 1, function(x) sum(x == "R")) countmat <- t(cbind(L = (NCOL(dat) - 1) - counts, R = counts)) barplot() op <- par(mar = c(9,4,4,2) + 0.1, las = 2)
mids <- barplot(countmat, ylim = c(0,2.5),
                legend.text = c("L","R"),
                args.legend = list(x = "top", bty = "n"))
axis(side = 1, at = mids, labels = as.character(dat$DATE))
par(op) count2 <- with(dat, GROUP == "R")
countmat2 <- t(cbind(R = count2, L = !count2))

op <- par(mar = c(9,4,4,2) + 0.1, las = 2)
mids <- barplot(countmat2, ylim = c(0, 1.5),
                legend.text = c("R","L"),
                args.legend = list(x = "top", bty = "n"))
axis(side = 1, at = mids, labels = as.character(dat$DATE))
par(op)
-------------------------------------------------------------------------------------------------------
x <- c("abcd","abcd","defd","hfjfjcd","kgjgcdjrye","yryriiir","twtettecd") grep grepl y <- x[grepl("cd", x)] table table(y)

y
      abcd    hfjfjcd kgjgcdjrye  twtettecd 
         2          1          1          1 plot barplot barplot(table(y))
-------------------------------------------------------------------------------------------------------
table barplot(table(substr(c("azzzz", "bzzzz", "bzzzz", "czzzz"),1,1))) table tbl <- table(c("azzzz", "bzzzz", "bzzzz", "czzzz"))
names(tbl) <- substr(names(tbl),1,1)
barplot(tbl) barplot barplot(...,names.arg = substr(...,1,1))
-------------------------------------------------------------------------------------------------------
R> index(KB) <- as.Date(index(KB))    ## what you have are dates, not datetimes
R> barplot(diff(KB), ylab="Change in value", main="Growth") R> plot(diff(KB), type='b', ylab="Change in value", main="Growth") type=
-------------------------------------------------------------------------------------------------------
barplot(table(x)/length(x)) R> x <- as.factor(c(rep("A",20),rep("B",10),rep("C",15)))
R> table(x)
x
 A  B  C 
20 10 15 R> table(x)/length(x)*100
x
      A       B       C 
44.4444 22.2222 33.3333 R> barplot(table(x)/length(x)*100)
-------------------------------------------------------------------------------------------------------
barplot table barplot(table(weekdays(dat))) barplot(table(factor(weekdays(dat),levels=c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"))))
-------------------------------------------------------------------------------------------------------
lattice dat <- data.frame(
    group = rep(c("Above", "Below"), each=10),
    x = rep(1:10, 2),
    y = c(runif(10, 0, 1), runif(10, -1, 0))
) plot(c(0,12),range(dat$y),type = "n")
barplot(height = dat$y[dat$group == 'Above'],add = TRUE,axes = FALSE)
barplot(height = dat$y[dat$group == 'Below'],add = TRUE,axes = FALSE) lattice barchart(y~x,data = dat, origin = 0, horizontal = FALSE)
-------------------------------------------------------------------------------------------------------
opar <- par(lwd=3)
barplot(c(6,7))
arrows(0,0,10,0,lwd=3, col="grey")
par(opar)
-------------------------------------------------------------------------------------------------------
border = NA barplot lines par(lwd = 3, lend = 2)
barplot(c(6,7),border = NA)
lines(c(0.2,0.2,1.2,1.2),c(0.02,6,6,0.02))
lines(c(1.4,1.4,2.4,2.4),c(0.02,7,7,0.02)) lines
-------------------------------------------------------------------------------------------------------
daten <- matrix(c(10,50,100,300,500,1000,2000,5000),ncol=2) 
multiplier <- c(1,0,1,2)
barplot(daten*multiplier) daten*multiplier barplot((daten*multiplier)[nrow(daten):1,])
-------------------------------------------------------------------------------------------------------
dat <- read.table(textConnection("Date Code x200g
 1 2010/06/01 cg4j 0.519880141
 2 2010/09/19 7gv2 0.158999682
 3 2011/04/14 zl94 0.294174203
 4 2011/05/27 a13t 0.14023254"), header=TRUE, as.is=TRUE)
dat$Date <- as.Date(dat$Date) barplot(dat$x200g, names.arg=paste(dat$Date,"\n", dat$Code, sep=""),  ylab=" ")
-------------------------------------------------------------------------------------------------------
packages <- available.packages()[,'Package']

 ggplot(data.frame(n = nchar(packages))) +
   geom_histogram(aes(n), binwidth=1) all <- length(packages)
 ## 3168
 up <- sum(toupper(packages) == packages)
 ## 262
 low <- sum(tolower(packages) == packages)
 ## 1697
 pie(c(up, low, all-up-low), labels=c("UPPERCASE","lowercase","cAmElCaSe")) let <- sapply(sapply(letters, grep, tolower(packages)), length)
 barplot(let) length(packages[grep("2$", packages, perl=TRUE)])
 # 29
-------------------------------------------------------------------------------------------------------
dat <- data.frame(x=c(1.5, 2.5, 3.5), y=c(1.2, 0.1, 4.4))
barplot(dat$y, names.arg=dat$x, ylim=c(0,5)) barplot(dat$y, names.arg=dat$x, ylim=c(0,5), ylab="blah", xlab="lol")
-------------------------------------------------------------------------------------------------------
v <- rbind(Value1,Value2)
barplot(v,beside=FALSE,names=levels(interaction(Period,Sample)),legend=TRUE)
-------------------------------------------------------------------------------------------------------
xlab barplot() > names(x) <- c("AA/AA", "AA/CC", "AA/AC", "AA/NC", "CC/AA", "CC/CC", "CC/AC",
+               "CC/NC", "AC/AA", "AC/CC", "AC/AC", "AC/NC")
> barplot(x)
> ## or with labels rotated, see ?par
> barplot(x, las = 2) 
barplot() 
names.arg ?barplot names.arg: names height names.arg names
-------------------------------------------------------------------------------------------------------
axis() mids <- barplot(x, xlab="")

 axis(1, at=mids, labels=c("AA/AA","AA/CC","AA/AC","AA/NC","CC/AA","CC/CC",
                           "CC/AC","CC/NC","AC/AA","AC/CC","AC/AC","AC/NC"), 
      las=3)
-------------------------------------------------------------------------------------------------------
barplot(x, cex.names=0.7,names.arg=c("AA/AA","AA/CC","AA/AC","AA/NC","CC/AA","CC/CC","CC/AC","CC/NC","AC/AA","AC/CC","AC/AC","AC/NC"))
-------------------------------------------------------------------------------------------------------
x <- c(126,162,233,304,375,446,517,588,659,730,801,839)
p <- c(0.06,0.06,0.1,0.08,0.12,0.16,0.14,0.14,0.08,0.02,0.04)
plot(x,c(p,0),type="s")
lines(x,c(0,p),type="S")
rect(x[-1],0,x[-length(x)],p,col="lightblue") rect lines plot(x,p,type="n") par(bty="l",lty=1) ?plot b <- barplot(p,width=diff(x),space=0)
-------------------------------------------------------------------------------------------------------
barplot Z <- sample(20,15,replace = TRUE)
barplot(Z,col = heat.colors(max(Z))[Z])
-------------------------------------------------------------------------------------------------------
barplot wide <- reshape(dat, idvar="CLIENT", timevar="DAY", direction="wide")
barplot(as.matrix(wide[-1]), beside=FALSE) ggplot2 library("ggplot2")

ggplot(dat, aes(x=DAY, y=Freq)) +
  geom_bar(aes(fill=CLIENT), position="stack")
-------------------------------------------------------------------------------------------------------
barplot(rbind(1:10, 2:11), beside=T, names.arg=1:10) >> bar(1:10, [(1:10)' (2:11)'])
-------------------------------------------------------------------------------------------------------
stepfun 
barplot(..., horiz=TRUE)
-------------------------------------------------------------------------------------------------------
ggplot2 # if you haven't installed ggplot, if yes leave this line out
install.packages("ggplot2") # choose your favorite mirror

require(ggplot2)
data(diamonds)
# check the dataset
head(diamonds)
# plot it 
ggplot(diamonds, aes(clarity, fill=cut)) + geom_bar(position="dodge") +
opts(title="Examplary Grouped Barplot") ggplot2 facects ggplot2 # Grouped Bar Plot
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, main="Car Distribution by Gears and VS",xlab="Number of Gears", col=c("darkblue","red"),
 legend = rownames(counts), beside=TRUE)
-------------------------------------------------------------------------------------------------------
ggplotColours <- function(n=6, h=c(0, 360) +15){
  if ((diff(h)%%360) < 1) h[2] <- h[2] - 360/n
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)
} y <- 1:3
barplot(y, col=ggplotColours(n=3))
-------------------------------------------------------------------------------------------------------
#You data was a table, but it was easier for me to copy+paste
# it and then read it as a data.frame
m <- read.table("~/Desktop/stackoverflowExamples/so.txt",header = TRUE,sep = "")
#Move the first column over to be the rownames
rownames(m) <- m[,1]
m <- m[,-1]

#Note that I just rearranged each piece so that the blue
# segments will be first; this includes the color and 
# legend text ordering
barplot(t(m[,c(4,1:3,5)]),col=rainbow(5)[c(4,1:3,5)],
        las=2,cex.names = 0.5,
        legend.text = colnames(m)[c(4,1:3,5)])
-------------------------------------------------------------------------------------------------------
barplot barplot x = c(1:81)
b <- barplot(x)
## axis(side=1,at=c(0,20,40,60,80),labels=c(20,40,60,80,100))
head(b) b <- barplot(x)
axis(side=1,at=b[c(20,40,60,80)],labels=seq(20,80,by=20)) b <- barplot(x,xlim=c(0,120))
bdiff <- diff(b)[1]
axis(side=1,at=c(b[1]-bdiff,b[c(20,40,60,80)],b[81]+19*bdiff),
              labels=seq(0,100,by=20)) plot(x,type="h",lwd=4,col="gray",xlim=c(0,100)) ggplot library(ggplot2)
d <- data.frame(x=1:81)
ggplot(d,aes(x=x,y=x))+geom_bar(stat="identity",fill="lightblue",
                   colour="gray")+xlim(c(0,100))
-------------------------------------------------------------------------------------------------------
x = c(1:81)
bp <- barplot(x)
axis(side=1,at=bp[1+c(0,20,40,60,80)],labels=c(20,40,60,80,100))
-------------------------------------------------------------------------------------------------------
barplot(c(3,2,1), horiz=TRUE, las=2, names.arg=c("three", "two", "one"))
-------------------------------------------------------------------------------------------------------
barplot(density, names.arg=breaks) barplot(density[-c(1,length(density))], names.arg=breaks[-c(1,length(density))] ) opar <- par(mar=c(6, 4, 3, 2) + 0.1)
str.breaks <- paste(format(breaks[-length(breaks)], scientific=3),
                              "  to ", format(breaks[-1], scientific=3), sep="")
barplot(density[-c(1,length(density))], names.arg=str.breaks[-1], las=2 )
par(opar)
-------------------------------------------------------------------------------------------------------
barplot( t(cbind(tab3[,5:6],-tab3[,6:5],-tab3[,4:3])),
    col=c('lightblue','darkblue',NA,NA,'tan','brown') )
-------------------------------------------------------------------------------------------------------
read.csv barplot barplot t() test <- as.matrix(read.csv(file="test4.csv",sep=",",head=TRUE)) barplot(as.matrix(test))
-------------------------------------------------------------------------------------------------------
barplot() at= axis() xLabLocs <- barplot(test, space=0.4, xaxt='n', ann=FALSE)
axis(1, cex.axis=0.25, las=2, at=xLabLocs, 
     space=0.4, labels=colnames(test)) Value ?barplot Value:
     A numeric vector (or matrix, when ‘beside = TRUE’), say ‘mp’,
     giving the coordinates of _all_ the bar midpoints drawn, useful
     for adding to the graph. barplot()
-------------------------------------------------------------------------------------------------------
barp plotrix barp barplot(...,beside=TRUE) barplot(...,beside=FALSE) rect % mybarplot( x, col=heat.colors(255), space=0.2, labels=NULL )
% makes a stacked bar plot with ncol(x) bars, each containing nrow(x)
%  stacks. Coloured according to a *global* colour scale (by value of top edge
%  of the box within the stack). This is as opposed to the same colour 
%  per category across all bars.
%
% PARAMETERS
% ----------
% x     : a matrix. COLUMNS are the categories, ROWS contain the data.
% col   : colour scheme to use. e.g. heat.colors, rainbow, ...
% space : space between bars as a fraction of bar width.
% labels: labels for each category (column) of x, default colnames(x)
%
% EXAMPLE
% -------
% bar plot with 3 categories/bars, 4 stacks in each bar.
% data <- matrix(runif(12),ncol=3,nrow=4)
% colnames(data)<-c('group a','group b','group c')
% mybarplot(data,col=heat.colors(20))
%
mybarplot <- function( x, col=heat.colors(255), space=0.2, labels=colnames(x) )
{
 maxy <- max(x)
 miny <- 0
 n    <- ncol(x)
 m    <- nrow(x)
 wid  <- 1

 # work out boundaries of each rectangle
 # note: sort the y's ascending to draw properly.
 xsort  <- apply(x,2,sort)
 xright <- rep(1:n, m) * (wid+space) - space
 ybottom <- as.vector(t(rbind(miny,xsort)))

 # work out colour of each rectangle,
 # being (y/maxy) along the colour scale.
 fracs<-as.vector(t(xsort))/maxy
 cols <- col[round(fracs*(length(col)-1))+1]

 # plot: set up grid and then draw rectangles
 plot(0, 0, type="n", 
      ylim=c(miny,maxy), xlim=c(0,max(xright)),
      xaxt='n',yaxt='n',xlab=NA,ylab=NA)
 rect(xright-wid, ybottom[1:(length(ybottom)-n)], xright, ybottom[-(1:n)],
      col=cols)

 # draw labels
 axis(1, cex.axis=0.5, las=2, at=xright[1:n]-(space+wid)/2, labels=labels)
 axis(2, cex.axis=0.5, pos=-0.5)
} mybarplot(test) fracs axis xright[1:n]-(space+wid)/2 mybarplot xLabLocs <- mybarplot(test) axis
-------------------------------------------------------------------------------------------------------
VADeaths library(datasets) bar <- barplot(VADeaths)
text(rep(bar,each=nrow(VADeaths)), as.vector(apply(VADeaths,2,cumsum)), 
     labels=as.vector(apply(VADeaths,2,cumsum)),pos=3) text(...,cex=2) VADeaths > VADeaths
      Rural Male Rural Female Urban Male Urban Female
50-54       11.7          8.7       15.4          8.4
55-59       18.1         11.7       24.3         13.6
60-64       26.9         20.3       37.0         19.3
65-69       41.0         30.9       54.6         35.1
70-74       66.0         54.3       71.1         50.0 text ?text text ?barplot > bar <- barplot(VADeaths)
> bar
[1] 0.7 1.9 3.1 4.3 VADeaths 11.7 11.7 + 18.1 = 29.8 11.7 + 18.1 + 26.9 = 56.7 VADeaths cumsum > cumsum(c(1,2,3,4,5))
[1]  1  3  6 10 15 VADeaths apply > apply(VADeaths,2,cumsum)
      Rural Male Rural Female Urban Male Urban Female
50-54       11.7          8.7       15.4          8.4
55-59       29.8         20.4       39.7         22.0
60-64       56.7         40.7       76.7         41.3
65-69       97.7         71.6      131.3         76.4
70-74      163.7        125.9      202.4        126.4 apply(VADeaths,2,cumsum) VADeaths cumsum > yvals <- as.vector(apply(VADeaths,2,cumsum)) as.vector bar > xvals <- rep(bar,each=nrow(VADeaths)) x1,x2,x3,x4 x1,x1,x1,x1,x1, x2,x2,x2,x2,x2, ..., x4,x4,x4,x4,x4 xvals yvals text > text( xvals, yvals, labels=yvals, pos=3 ) labels text pos=3 ?text bar <- barplot(VADeaths)
xvals <- rep(bar,each=nrow(VADeaths))
yvals <- as.vector(apply(VADeaths,2,cumsum))
text( xvals, yvals, labels=yvals, pos=3 )
-------------------------------------------------------------------------------------------------------
barplot(as.matrix(taskC), horiz=TRUE, col=rainbow(7), xaxt="n")
axis(1, labels=labels, at=cumsum(taskC)-(taskC/2))
-------------------------------------------------------------------------------------------------------
barplot(y, main="Main Title",names=c("a", "b", "c"),xlab=expression(italic("Text")),ylab="Text ")
 ?plotmath
-------------------------------------------------------------------------------------------------------
png(filename = "plot.png")
x <- c("A", "B")
y <- c(2e6 + 10, 400)
sum_Y <- sum(y)
midpoints <- barplot(height = y, log = "y", ylim=c(5e1,5e6))
text(midpoints, y, sprintf("%.2f%%", y / sum_Y * 100), pos = 3)
dev.off()
-------------------------------------------------------------------------------------------------------
barp <- barplot( dat$X.2)
 barp  
# this is what barplot returns and is then used as the x-values for a call to lines.
     [,1]
[1,]  0.7
[2,]  1.9
[3,]  3.1
[4,]  4.3
[5,]  5.5
 lines(barp, 1000*dnorm(seq(3,7), 7,2))
-------------------------------------------------------------------------------------------------------
greens <- colorRampPalette(c("white","darkgreen"))
barplot(as.matrix(diff(Post)), horiz=T, col=greens(10)[10*color], axes=F, xlab="Mark")
axis(1, labels=Mark, at=Post)
axis(3, labels=Post, at=Post)
-------------------------------------------------------------------------------------------------------
barplot() barplot(scrabble$frequency, names = scrabble$piece, xlab = "Piece", ylab = "Frequency", main = "Letter Frequencies")
-------------------------------------------------------------------------------------------------------
?barplot height myDf <- data.frame(x=sample(1:10,100,replace=T),y=sample(11:20,100,replace=T),z=1:10)
barplot(as.matrix(myDf)) myDf <- data.frame(x=sample(1:10,100,replace=T),y=sample(11:20,100,replace=T),z=1:10)
myDf.counted<- data.frame(table(myDf$x),variable='x')
myDf.counted <- rbind(myDf.counted,data.frame(table(myDf$y),variable='y'))
myDf.counted <- rbind(myDf.counted,data.frame(table(myDf$z),variable='z'))

ggplot(myDf.counted,aes(x=Var1,y=Freq,fill=variable))+geom_bar(stat='identity')
-------------------------------------------------------------------------------------------------------
ylim=c(0,4) R> vals <- c('a','a', 'b','b','a')
R> table(vals)
vals
a b 
3 2 
R> barplot(table(vals), ylim=c(0,4), main="Barplot with y-axis to 4")
R>
-------------------------------------------------------------------------------------------------------
barX <- barplot(pmort$pdied,xlab="Age(days)",
   ylab="Percent", names=pmort$day,
   xlim=c(0,28),ylim=c(0,20),legend="Mortality")

text(cex=.5, x=barX, y=pmort$pdied+par("cxy")[2]/2, pmort$ndied, xpd=TRUE) 

barX <- barplot(pmort$pdied,xlab="Age(days)",
   ylab="Percent", names=pmort$day,
   xlim=c(0,28),ylim=c(0,20),legend="Mortality")

text(cex=.5, x=barX, y=-.5, pmort$ndied, xpd=TRUE)
-------------------------------------------------------------------------------------------------------
locator() plot(1:4)
df <- data.frame(locator())
## Now, on the plotting device:
## 
##     (1) "Left-click" on each of the four points
##     (2) "Right-click --> Stop" to return to the command-line

## The object that is returned, and assigned to df will look
## something like the following
df
         x        y
1 1.008072 1.032795
2 2.011049 2.002365
3 3.004381 2.995299
4 3.997714 4.011595 locator() barplot(VADeaths)
text(locator(1), "I clicked here", col="red")
-------------------------------------------------------------------------------------------------------
my.barplot <- function( df, title="", legend.title="",... ) {
  df.count12 <- aggregate( df$outcome, by=list(df$category1,df$category2,df$outcome), FUN=length )
  colnames( df.count12 ) <- c("category1","category2","outcome","n")
  df.total <- aggregate( df.count12$n, by=list(df.count12$category1), FUN=sum )
  colnames( df.total ) <- c("category1","total")
  # Densities within a bar - Categories 1 & 2
  df.dens12 <- merge(df.count12, df.total)
  df.dens12$dens12 <- with( df.dens12, n/total )
  # Total bar height - Category 1 density
  df.count1 <- aggregate( df.dens12$n, by=list(df.dens12$category1,df.dens12$outcome), FUN=sum )
  colnames( df.count1 ) <- c("category1","outcome","n")
  df.dens1 <- merge(df.count1,df.total)
  df.dens1$dens1 <- with(df.dens1, n/total)
  # Merge both into the final dataset
  df.dens <- merge(df.dens12,df.dens1,all.x=TRUE,by=c("category1","outcome"))
  df.dens <- subset(df.dens, select=c(-total.x) )
  colnames( df.dens ) <- sub("\\.x","12",colnames(df.dens))
  colnames( df.dens ) <- sub("\\.y","1",colnames(df.dens))
  # Plot 
  ymax <- max(df.dens$dens1)
  # Plot 1: category1
  p <- ggplot( df.dens, aes( x=outcome, fill=category1 ), ... )
  p1 <- p + geom_bar( aes( y=dens1 ), position="dodge" )
  p1 <- p1 + opts( axis.text.x=theme_text(angle=-90,hjust=0), title=title )
  if(legend.title!="") { p1 <- p1 + scale_colour_discrete(name=legend.title) }
  # Plot 2: category2
  p2 <- p1 + geom_bar( aes( y=dens12, fill=category2 ), position="stack", stat="identity" )
  p2
}

N <- 50*(2*8*2)
outcome <- sample(ordered(seq(8)),N,replace=TRUE,prob=c(seq(4)/20,rev(seq(4)/20)) )
category2 <- ifelse( outcome==1, sample(c("yes","not"), prob=c(.95,.05)), sample(c("yes","not"), prob=c(.35,.65)) )
dat <- data.frame(
  category1=rep(c("in","out"),each=N/2),
  category2=category2,
  outcome=outcome
  )

my.barplot(dat, title="Test title", legend.title="Medical system")
-------------------------------------------------------------------------------------------------------
barplot(VADeaths, beside=TRUE, las=1)
abline(h=0:100, col="white")
barplot(
  VADeaths, beside=TRUE, las=1,
  add=TRUE, col=FALSE
)
-------------------------------------------------------------------------------------------------------
lapply summary_text <- function(d) {
  do.call(rbind, lapply( d, function(u)
    data.frame(
      Type    = class(u)[1],
      Min     = if(is.numeric(u)) min(   u, na.rm=TRUE) else NA,
      Mean    = if(is.numeric(u)) mean(  u, na.rm=TRUE) else NA,
      Median  = if(is.numeric(u)) median(u, na.rm=TRUE) else NA,
      Max     = if(is.numeric(u)) max(   u, na.rm=TRUE) else NA,
      Missing = sum(is.na(u))
    )    
  ) )
}
summary_text(iris) summary_plot <- function(d, aspect=1) {
  # Split the screen: find the optimal number of columns 
  # and rows to be as close as possible from the desired aspect ratio.
  n <- ncol(d)
  dx <- par()$din[1]
  dy <- par()$din[2]
  f <- function(u,v) {
    if( u*v >= n && (u-1)*v < n && u*(v-1) < n ) {
      abs(log((dx/u)/(dy/v)) - log(aspect))
    } else { 
      NA 
    }
  }
  f <- Vectorize(f)
  r <- outer( 1:n, 1:n, f )
  r <- which( r == min(r,na.rm=TRUE), arr.ind=TRUE )
  r <- r[1,2:1]

  op <- par(mfrow=c(1,1),mar=c(2,2,2,2))
  plot.new()
  if( is.null( names(d) ) ) { names(d) <- 1:ncol(d) }
  ij <- matrix(seq_len(prod(r)), nr=r[1], nc=r[2], byrow=TRUE)
  for(k in seq_len(ncol(d))) {
    i <- which(ij==k, arr.ind=TRUE)[1]
    j <- which(ij==k, arr.ind=TRUE)[2]
    i <- r[1] - i + 1
    f <- c(j-1,j,i-1,i) / c(r[2], r[2], r[1], r[1] )
    par(fig=f, new=TRUE)
    if(is.numeric(d[,k])) { 
      hist(d[,k], las=1, col="grey", main=names(d)[k], xlab="", ylab="")
      o <- par(fig=c(
          f[1]*.4  + f[2]*.6,
          f[1]*.15 + f[2]*.85,
          f[3]*.4  + f[4]*.6,
          f[3]*.15 + f[4]*.85
        ), 
        new=TRUE,
        mar=c(0,0,0,0)
      )
      qqnorm(d[,k],axes=FALSE,xlab="",ylab="",main="")
      qqline(d[,k])
      box()
      par(o)
    } else {
      o <- par(mar=c(2,5,2,2))
      barplot(table(d[,k]), horiz=TRUE, las=1, main=names(d)[k])
      par(o)
    }
  }
  par(op)
}
summary_plot(iris)
-------------------------------------------------------------------------------------------------------
?barplot v = c(0L, 0L, 0L, 1L,1L,1L,2L, 2L, 2L, 3L,3L,3L,4L, 4L, 4L)
barplot(table(v))
-------------------------------------------------------------------------------------------------------
barplot(c(2:6), ylim=c(1,10), col="blue", space=3, density=seq(60, 100, 10)) barplot(c(2:6), ylim=c(1,10), col=blues9[2:6], space=3)
-------------------------------------------------------------------------------------------------------
a a <- c("FALSE" = 35517,"TRUE" = 1160)
a <- as.matrix(a)
barplot(a)
-------------------------------------------------------------------------------------------------------
graphics var.a var.b test <- data.frame(group = 1:10, var.a = rnorm(n = 10, mean = 500, sd = 20),
  var.b = runif(10))

funProp <- function(testCol) {
    test[, testCol]/max(test[, testCol])
}

test$var.a.prop <- funProp("var.a")
test$var.b.prop <- funProp("var.b") barplot() barplot(t(as.matrix(test[, c("var.a.prop", "var.b.prop")])), beside = TRUE,
  yaxt = "n", names.arg = test$group) labels at axis(2, at = seq(0, max(test$var.a.prop), length.out = 10),
  labels = round(seq(0, max(test$var.a), length.out = 10)))

axis(4, at = seq(0, max(test$var.b.prop), length.out = 10),
  labels = round(seq(0, max(test$var.b), length.out = 10), 2)) pretty myLeftAxisLabs <- pretty(seq(0, max(test$var.a), length.out = 10))
myRightAxisLabs <- pretty(seq(0, max(test$var.b), length.out = 10))

myLeftAxisAt <- myLeftAxisLabs/max(test$var.a)
myRightAxisAt <- myRightAxisLabs/max(test$var.b)

barplot(t(as.matrix(test[, c("var.a.prop", "var.b.prop")])),
  beside = TRUE, yaxt = "n", names.arg = test$group,
  ylim=c(0, max(c(myLeftAxisAt, myRightAxisAt))))

axis(2, at = myLeftAxisAt, labels = myLeftAxisLabs)

axis(4, at = myRightAxisAt, labels = myRightAxisLabs)
-------------------------------------------------------------------------------------------------------
mtext out <- barplot(vals,axes = FALSE)
axis(2)
mtext(1:4,side = 1,at = out,cex = 0.5) barplot
-------------------------------------------------------------------------------------------------------
dput(dat)
structure(c(0L, 40L, 80L, 120L, 160L, 200L, 240L, 280L, 320L, 
360L, 400L, 440L, 480L, 520L, 560L, 600L, 640L, 680L, 720L, 760L, 
800L, 840L, 880L, 920L, 960L, 1000L, 1040L, 1080L, 1120L, 1160L, 
22L, 50L, 62L, 70L, 62L, 49L, 52L, 64L, 57L, 50L, 47L, 52L, 73L, 
70L, 68L, 71L, 69L, 61L, 59L, 59L, 62L, 62L, 62L, 72L, 81L, 89L, 
86L, 76L, 80L, 95L), .Dim = c(30L, 2L), .Dimnames = list(NULL, 
    c("V1", "V2")))

barplot(height=dat[,2]) names.arg barplot(height=dat[,2], names.arg=dat[,1]) ?data dat
-------------------------------------------------------------------------------------------------------
barplot(x$V2, names.arg = seq_len(nrow(x)), cex.names = .6)
-------------------------------------------------------------------------------------------------------
myData <- read.csv(file = "data.csv", sep = ",", header = FALSE) myData2 <- myData[order(myData[, 1]), ]

barplot(myData2[, 2], names.arg = myData2[, 1]) ?barplot ?par
-------------------------------------------------------------------------------------------------------
y = data.frame(Specie=c('A','V','R','P','O'),Number=c(18756,8608,3350,3312,1627))
barplot(y$Number, names.arg=y$Specie)
-------------------------------------------------------------------------------------------------------
library(gridBase)

## Make some data with names long enough that barplot won't print them all
DD <- table(rpois(100, lambda=5))
names(DD) <- paste("long", names(DD), sep="_")

## Plot, but suppress the labels
midpts <- barplot(DD, col=rainbow(20), names.arg="")

## Use grid to add the labels    
vps <- baseViewports()
pushViewport(vps$inner, vps$figure, vps$plot)

grid.text(names(DD),
    x = unit(midpts, "native"), y=unit(-1, "lines"),
    just="right", rot=50)

popViewport(3)
-------------------------------------------------------------------------------------------------------
grconvertY() viewport grconvertY() ## Create three example plots
par(mfrow=c(1,3))
barplot(VADeaths, border = "dark blue") 
barplot(VADeaths, border = "yellow") 
barplot(VADeaths, border = "green") 

## From third plot, get the "normalized device coordinates" of 
## a point at a height of 50 on the y-axis.
(Y <- grconvertY(50, "user", "ndc"))
# [1] 0.314248

## Add the horizontal line using grid
library(grid)
pushViewport(viewport())
grid.lines(x = c(0,1), y = Y, gp = gpar(col = "red"))
popViewport() library(grid)
library(gridBase)
par(mfrow=c(1,3))

# barplot #1
barplot(VADeaths, border = "dark blue") 
X1 <- grconvertX(0, "user", "ndc")
# barplot #2
barplot(VADeaths, border = "yellow") 
# barplot #3
m <- barplot(VADeaths, border = "green") 
X2 <- grconvertX(tail(m, 1) + 0.5, "user", "ndc") # default width of bars = 1
Y <- grconvertY(50, "user", "ndc")

## Horizontal line
pushViewport(viewport())
grid.lines(x = c(X1, X2), y = Y, gp = gpar(col = "red"))
popViewport() grid.move.to() grid.line.to() library(grid)
library(gridBase)
par(mfrow=c(1,3))

barplot(VADeaths); vps1 <- do.call(vpStack, baseViewports())
barplot(VADeaths) 
barplot(VADeaths); vps3 <- do.call(vpStack, baseViewports())

pushViewport(vps1)
Y <- convertY(unit(50,"native"), "npc")
popViewport(3)

grid.move.to(x = unit(0, "npc"), y = Y, vp = vps1)
grid.line.to(x = unit(1, "npc"), y = Y, vp = vps3, 
             gp = gpar(col = "red"))
-------------------------------------------------------------------------------------------------------
?barplot abline(x,y) require(grDevices) # for colours
tN <- table(Ni <- stats::rpois(100, lambda=5))

barplot(tN, space = 1.5, axisnames=FALSE)
abline(5,0) ?barplot
-------------------------------------------------------------------------------------------------------
set.seed(231)
 tN <- table(Ni <- stats::rpois(100, lambda=5))
 tNshift <- tN-5
 barplot(tNshift, space = 1.5, yaxt="n", xaxt="n", ylim=range(tNshift))
 abline(0,0)
 axis(2, at= c(-5, pretty(tNshift)), labels=c(0, pretty(tNshift)+5), xpd=TRUE)
-------------------------------------------------------------------------------------------------------
files <- c("Gen.Var_CT.BP.50.txt", "Gen.Var_CT.BP.200.txt", "Gen.Var_CT.BP.500.txt",    "Gen.Var_GP.BP.50.txt", "Gen.Var_GP.BP.200.txt", "Gen.Var_GP.BP.500.txt"){
for (i in 1:length(files)) {
  b <- read.table(files[i])
  barplot(table(b$V1), main=files[i])
-------------------------------------------------------------------------------------------------------
data <- read.table("data.txt", header=TRUE)
subset <- t(data.frame(data$Rtime, data$Btime))
barplot(subset, legend = c("Rtime", "Btime"), names.arg=data$Input, log="y", beside=TRUE))
-------------------------------------------------------------------------------------------------------
col barplot(1:3, axes=FALSE, col=c("#330000", "#FFFFCC", "660000"))
-------------------------------------------------------------------------------------------------------
set.seed(1)
start <- strptime("2012-01-01 00:00:00",format="%Y-%m-%d %H:%M:%S")
end <- strptime("2012-03-01 00:00:00",format="%Y-%m-%d %H:%M:%S")

df <- data.frame(
  message.id = 1:1000,
  user.id = sample(1:10,1000,TRUE,prob=1:10),
  message.date = seq(start,end,length=1000)) df$date <- as.Date(df$message.date) plyr library("plyr")
df2 <- ddply(df,.(user.id),summarize,AvPerDay = mean(sapply(seq(min(df$date),max(df$date),by="day"),function(x)sum(date==x)))) df2 user.id  AvPerDay
1        1 0.3278689
2        2 0.6229508
3        3 0.9836066
4        4 1.1311475
5        5 1.3442623
6        6 1.8524590
7        7 1.8032787
8        8 2.8032787
9        9 2.5081967
10      10 3.0163934 barplot(df2$user.id,df2$AvPerDay)
-------------------------------------------------------------------------------------------------------
barplot x <- barplot(table(mtcars$cyl), xaxt="n")
labs <- paste(names(table(mtcars$cyl)), "cylinders")
text(cex=1, x=x-.25, y=-1.25, labs, xpd=TRUE, srt=45)
-------------------------------------------------------------------------------------------------------
barplot dat <- read.table(text = "   Month Year Number
1     1  2011   3885
2     2  2011   3713
3     3  2011   6189
4     4  2011   3812
5     5  2011    916
6     6  2011   3813
7     7  2011   1324
8     8  2011   1905
9     9  2011   5078
10   10  2011   1587
11   11  2011   3739
12   12  2011   3560
13    1  2012   1790
14    2  2012   1489
15    3  2012   1907
16    4  2012   1615",sep = "",header = TRUE)

y <- c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')

barplot(rbind(dat$Number[1:12],c(dat$Number[13:16],rep(NA,8))),
        beside = TRUE,names.arg = y) dat$Year <- factor(dat$Year)
dat$Month <- factor(dat$Month)
ggplot(dat,aes(x = Month,y = Number,fill = Year)) + 
    geom_bar(position = "dodge") + 
    scale_x_discrete(labels = y)
-------------------------------------------------------------------------------------------------------
colbarplot <- function(group) {

    myd1 <- myd[myd$group == group,]
    filld1 <- filld[filld$group1 == group,]
    blues <- colorRampPalette(c("yellow", "blue"))
    barplot(as.matrix(diff(myd1$avar)), horiz=T,
            col=blues(10)[10* filld1$fillcol], 
            axes=F, xlab="Mark")
    axis(1, labels=myd$label, at=myd$avar)
    axis(3, labels=myd$avar, at=myd$avar)
}

par(mfrow = c(3, 1))
par(mar = c(2.5, 1, 2.5, 1))
sapply(unique(myd$group),function(x) colbarplot(x))
-------------------------------------------------------------------------------------------------------
opar <- par(mfrow = c(length(unique(myd$group)), 1), mar = c(2.5, 1, 2.5, 1))

for (i in 1:length(unique(myd$group))){
    myd1 <- myd[myd$group ==i,]
    filld1 <- filld[filld$group1 ==i,]
    blues <- colorRampPalette(c("yellow", "blue"))
    barplot(as.matrix(diff(myd1$avar)), horiz=T, 
       col=blues(10)[10* filld1$fillcol], axes=F, xlab="Mark")
    axis(1, labels=myd1$label, at=myd1$avar)
    axis(3, labels=myd1$avar, at=myd1$avar)
 }

 par(opar);
-------------------------------------------------------------------------------------------------------
split.screen(c(3,1))
A <- 4
barplot(A, col="green4")
-------------------------------------------------------------------------------------------------------
asp barplot(A, col = "green4", asp = 1) barplot x a = runif(100)
b = 1:100
barplot(a) plot(b, a, type = "l") ggplot2 require(ggplot2)
theme_set(theme_bw())
qplot(b, a, geom = "line")
-------------------------------------------------------------------------------------------------------
# get package with functions for interacting with Twitter.com
require(twitteR) 
# get 1500 tweets with #BBC tag, note that 1500 is the max, and it's subject to mysterious filtering and other restrictions by Twitter
s <- searchTwitter('#BBC', n=1500) 
#
# convert to data frame
df <- do.call("rbind", lapply(s, as.data.frame))
#
# Clean text of tweets 
df$text <- sapply(df$text,function(row) iconv(row,to='UTF-8')) #remove odd characters
trim <- function (x) sub('@','',x) # remove @ symbol from user names 
#
# Extract retweets
library(stringr)
df$to <- sapply(df$to,function(name) trim(name)) # pull out who msg is to
df$rt <- sapply(df$text,function(tweet) trim(str_match(tweet,"^RT (@[[:alnum:]_]*)")[2]))      
#
# basic analysis and visualisation of RT'd messages
sum(!is.na(df$rt))                # see how many tweets are retweets
sum(!is.na(df$rt))/length(df$rt)  # the ratio of retweets to tweets
countRT <- table(df$rt)
countRT <- sort(countRT)
countRT.subset <- subset(countRT,countRT >2) # subset those RTd at least twice
barplot(countRT.subset,las=2,cex.names = 0.75) # plot them
#
#  basic social network analysis using RT 
# (not requested  by OP, but may be of interest...)
rt <- data.frame(user=df$screenName, rt=df$rt) # tweeter-retweeted pairs
rt.u <- na.omit(unique(rt)) # omit pairs with NA, get only unique pairs
#
# begin sna
library(igraph)
g <- graph.data.frame(rt.u, directed = T)
ecount(g) # edges (connections)
vcount(g) # vertices (nodes)
diameter(g) # network diameter
farthest.nodes(g) # show the farthest nodes
-------------------------------------------------------------------------------------------------------
ylabels <-  c(  "1oooooooooooo",
            "2",
            "3",
            "4"
)

test <- matrix(c(55,65,30, 40,70,55,75,6,49,45,34,20), 
                  nrow =3 , 
               ncol=4, 
               byrow=TRUE,
               dimnames = list(c("Subgroup 1", "Subgroup 2", "Subgroup 3"),
                               ylabels))

# adjust to the maximum of either the default 
# or a figure based on the maximum length
par(mar=c(5.1, max(4.1,max(nchar(ylabels))/1.8) ,4.1 ,2.1))

barplot(test, las=2,beside = TRUE,legend=T,horiz=T)
dotchart linch <-  max(strwidth(ylabels, "inch")+0.4, na.rm = TRUE)
par(mai=c(1.02,linch,0.82,0.42))
-------------------------------------------------------------------------------------------------------
gap.barplot # install.packages('plotrix', dependencies = TRUE)
require(plotrix)

   example(gap.barplot) twogrp<-c(rnorm(10)+4,rnorm(10)+20)
gap.barplot(twogrp,gap=c(8,16),xlab="Index",ytics=c(3,6,17,20),
ylab="Group values",main="Barplot with gap") facet_wrap "free" "free_y" scales library('ggplot2')

source("http://www.ling.upenn.edu/~joseff/rstudy/data/coins.R")
coins$foo <- ifelse(coins$Mass.g >= 10,  c("Low"), c("hight")) 
m <- ggplot(coins, aes(x = Mass.g)) 
m + geom_histogram(binwidth = 2) + facet_wrap(~ foo, scales = "free")
-------------------------------------------------------------------------------------------------------
exports <- data.frame(100*rbind('Americas'=runif(6),'Asia'=runif(6),'Other'=runif(6)))
colnames(exports) <- 2004:2009
series_we_want <- c(1,2,3)
barplot( as.matrix(exports[series_we_want,]))
legend(x="topleft", legend=rev(rownames(exports)[series_we_want])) exports <- data.frame(100*rbind('Americas'=runif(6),'Asia'=runif(6),'Other'=runif(6)))
colnames(exports) <- 2004:2009
series_we_want <- c(1,2,3)
test_data<-as.matrix(exports[series_we_want])

 barplot( test_data, legend.text=as.character(rev(rownames(exports)[series_we_want])), args.legend = list(x="topleft"))
-------------------------------------------------------------------------------------------------------
barplot(rbind(dens_k0, dens_k1), xlim=c(0,max(x)), ylim=c(0,max(emp_dens)), space=0.1, lwd=5, xlab="Value of X", ylab="Densities", font.main=1)
lines(emp_dens,lty=1,col="red")
 barplot(rbind(d0, d1), col = c('grey', 'red'), xlim=c(0,1), ylim=c(0,1), space=0.1, lwd=5, xlab="X", ylab="Densities", font.main=1, legend.text = c('k0', 'k1'))
-------------------------------------------------------------------------------------------------------
dens_kall<-rbind(dens_k0,dens_k1,dens_k2,dens_k3,dens_k4,dens_k5)
ltext<-c("K0","K1","K2","K3","K4","K5")
colnames(dens_kall)<-0:12
barplot(height=den,xlim=c(0,1),ylim=c(0,1),,space=0.1,lwd=5,xlab="1 X",ylab="Densities",font.main=1,legend.text =ltext,args.legend = list(x = "topright"));
lines(dat_dens,lty=1,col="red");
-------------------------------------------------------------------------------------------------------
par(ask=T)
for (i in 1:length(C)) {
  x <- C[i]
  counti <- table(data[,x])
  y <- barplot(counti, main=paste("Barplot for var", x))
  y
}
-------------------------------------------------------------------------------------------------------
C <- grep("character|factor", B)

FUN <- function(vec, num){
  if (dev.interactive()) dev.new()
  counti <- table(vec)
  y <- barplot(counti, main=paste("Barplot for var", num))
  return(y)
}

lapply(C, function(i) FUN(data[, i], i))
-------------------------------------------------------------------------------------------------------
as.data.frame(cbind()) sapply(data, class)
       x        y        z 
"factor" "factor" "factor" A<- sapply(data, class) cbind return y <- LETTERS[as.integer(rnorm(100, mean=5, sd=1))]
z <- LETTERS[as.integer(rnorm(100, mean=10, sd=1))]
x <- round(rnorm(100, mean=5, sd=2.5),2)
data <- data.frame(x=x,y=y,z=z)
CC <- grep("character|factor", sapply(data, class))
y <- list()
 for (i in seq_along(CC) ) {
   x <- CC[i]
   counti <- table(data[,x]) 
   y <- c(y, list(
barplot( counti, main=paste("Barplot for var", x))
))
   }
 y
#------------    
[[1]]
     [,1]
[1,]  0.7
[2,]  1.9
[3,]  3.1
[4,]  4.3
[5,]  5.5
[6,]  6.7

[[2]]
     [,1]
[1,]  0.7
[2,]  1.9
[3,]  3.1
[4,]  4.3
[5,]  5.5
[6,]  6.7
-------------------------------------------------------------------------------------------------------
pretty() range() ylim test <- data.frame(y=c(1,3,53,10,30,35,50), x=c(1:7))
barplot(test$y, names.arg=test$x, ylim = range(pretty(c(0, test$y)))) range(pretty(c(0, test$y))) range(pretty(c(0, max(test$y)))
-------------------------------------------------------------------------------------------------------
?xyplot col barplot(table(mtcars$am, mtcars$gear), col = c("green", "yellow")) auto.key xyplot(mtcars$hp ~ mtcars$wt, groups = mtcars$gear, 
        key = list(text = list(as.character(unique(mtcars$gear))), 
                   points = list(pch = 10:12, col = 12:14)), pch = 10:12, col = 12:14) lwd densityplot(mtcars$hp, lwd = 3)
-------------------------------------------------------------------------------------------------------
library(plotrix)
gap.barplot(df$a, gap=c(5,495),horiz=T)
-------------------------------------------------------------------------------------------------------
barplot(t(mat), beside=TRUE)
-------------------------------------------------------------------------------------------------------
names.arg barplot(y, names.arg=format(index(y), "%Y-%m-%d"))
-------------------------------------------------------------------------------------------------------
d = factor(sample(LETTERS, 50, replace=TRUE)) freq_tab = table(d) barplot(freq_tab[freq_tab>=2])
-------------------------------------------------------------------------------------------------------
summary as.factor summary(as.factor(a)) -> b
barplot(b[b>=2])
-------------------------------------------------------------------------------------------------------
scatterBar.Norm <- function(x,y) {
 zones <- matrix(c(2,0,1,3), ncol=2, byrow=TRUE)
 layout(zones, widths=c(5/7,2/7), heights=c(2/7,5/7))
 xrange <- range(x)
 yrange <- range(y)
 par(mar=c(3,3,1,1))
 plot(x, y, xlim=xrange, ylim=yrange, xlab="", ylab="", cex=0.5)
 xhist <- hist(x, plot=FALSE, breaks=seq(from=min(x), to=max(x), length.out=20))
 yhist <- hist(y, plot=FALSE, breaks=seq(from=min(y), to=max(y), length.out=20))
 top <- max(c(xhist$density, yhist$density))
 par(mar=c(0,3,1,1))
 barplot(xhist$density, axes=FALSE, ylim=c(0, top), space=0)
 x.xfit <- seq(min(x),max(x),length.out=40)
 x.yfit <- dnorm(x.xfit, mean=mean(x), sd=sd(x))
 x.xscalefactor <- x.xfit / seq(from=0, to=19, length.out=40)
 lines(x.xfit/x.xscalefactor, x.yfit, col="red")
 par(mar=c(3,0,1,1))
 barplot(yhist$density, axes=FALSE, xlim=c(0, top), space=0, horiz=TRUE)
 y.xfit <- seq(min(y),max(y),length.out=40)
 y.yfit <- dnorm(y.xfit, mean=mean(y), sd=sd(y))
 y.xscalefactor <- y.xfit / seq(from=0, to=19, length.out=40)
 lines(y.yfit, y.xfit/y.xscalefactor, col="red")
} require(MASS)
#Sigma <- matrix(c(2.25, 0.8, 0.8, 1), 2, 2)
Sigma <- matrix(c(1, 0.8, 0.8, 1), 2, 2)
mvnorm <- mvrnorm(1000, c(0,0), Sigma) ; scatterBar.Norm(mvnorm[,1], mvnorm[,2])
-------------------------------------------------------------------------------------------------------
scatterBarNorm <- function(x, dcol="blue", lhist=20, num.dnorm=5*lhist, ...){
    ## check input
    stopifnot(ncol(x)==2)
    ## set up layout and graphical parameters
    layMat <- matrix(c(2,0,1,3), ncol=2, byrow=TRUE)
    layout(layMat, widths=c(5/7, 2/7), heights=c(2/7, 5/7))
    ospc <- 0.5 # outer space
    pext <- 4 # par extension down and to the left
    bspc <- 1 # space between scatter plot and bar plots
    par. <- par(mar=c(pext, pext, bspc, bspc),
                oma=rep(ospc, 4)) # plot parameters
    ## scatter plot
    plot(x, xlim=range(x[,1]), ylim=range(x[,2]), ...)
    ## 3) determine barplot and height parameter
    ## histogram (for barplot-ting the density)
    xhist <- hist(x[,1], plot=FALSE, breaks=seq(from=min(x[,1]), to=max(x[,1]),
                                     length.out=lhist))
    yhist <- hist(x[,2], plot=FALSE, breaks=seq(from=min(x[,2]), to=max(x[,2]),
                                     length.out=lhist)) # note: this uses probability=TRUE
    ## determine the plot range and all the things needed for the barplots and lines
    xx <- seq(min(x[,1]), max(x[,1]), length.out=num.dnorm) # evaluation points for the overlaid density
    xy <- dnorm(xx, mean=mean(x[,1]), sd=sd(x[,1])) # density points
    yx <- seq(min(x[,2]), max(x[,2]), length.out=num.dnorm)
    yy <- dnorm(yx, mean=mean(x[,2]), sd=sd(x[,2]))
    ## barplot and line for x (top)
    par(mar=c(0, pext, 0, 0))
    barplot(xhist$density, axes=FALSE, ylim=c(0, max(xhist$density, xy)),
            space=0) # barplot
    lines(seq(from=0, to=lhist-1, length.out=num.dnorm), xy, col=dcol) # line
    ## barplot and line for y (right)
    par(mar=c(pext, 0, 0, 0))
    barplot(yhist$density, axes=FALSE, xlim=c(0, max(yhist$density, yy)),
            space=0, horiz=TRUE) # barplot
    lines(yy, seq(from=0, to=lhist-1, length.out=num.dnorm), col=dcol) # line
    ## restore parameters
    par(par.)
}

require(mvtnorm)
X <- rmvnorm(1000, c(0,0), matrix(c(1, 0.8, 0.8, 1), 2, 2))
scatterBarNorm(X, xlab=expression(italic(X[1])), ylab=expression(italic(X[2])))
-------------------------------------------------------------------------------------------------------
data1 data2 bins <- seq(0, 100, 5) # Change this to whatever range your data encopasses
h1 <- hist(data1, bins, plot=0)
h2 <- hist(data2, bins, plot=0)

ratio <- h1$counts/h2$counts
# Remove NaNs and Infs due to 0 counts
ratio[is.na(ratio)] <- 0
ratio[is.inf(ratio)] <- 0
barplot(ratio) h3 <- h1
h3$counts <- ratio
plot(h3, col="black")
-------------------------------------------------------------------------------------------------------
barplot() beside=TRUE ## Example data
d1 <- rnorm(1000)
d2 <- rnorm(1000, mean=1)

## Prepare data for input to barplot
breaks <- pretty(range(c(d1, d2)), n=20)
D1 <- hist(d1, breaks=breaks, plot=FALSE)$counts
D2 <- hist(d2, breaks=breaks, plot=FALSE)$counts
dat <- rbind(D1, D2)
colnames(dat) <- paste(breaks[-length(breaks)], breaks[-1], sep="-")

## Plot it
barplot(dat, beside=TRUE, space=c(0, 0.1), las=2)
-------------------------------------------------------------------------------------------------------
fig.keep fig.keep = 'last' require(knitr)
temp <- "```{r junkislands, fig.width=8, fig.height=5, fig.keep = 'last'}
layout(t(1:2))
pie(islands)
barplot(islands)
```"
cat(temp, file="junk.Rmd")
knit("junk.Rmd", "junk.md") ```r
layout(t(1:2))
pie(islands)
barplot(islands)
```

![plot of chunk junkislands](figure/junkislands.png)
-------------------------------------------------------------------------------------------------------
aggregate ddply L01_001 <- data.frame(Cases=gl(5, 2, 5*2*2, labels=c("AAA","BBB","CCC","DDD","EEE")), 
                      replicate(3, rnorm(5*2*2)))
mean.by.case <- with(L01_001, aggregate(L01_001[,-1], list(Cases=Cases), mean))
## opar <- par(mfrow=c(nlevels(L01_001$Cases), 1))
## apply(mean.by.case[,-1], 1, function(x) barplot(x))
## par(opar)
library(lattice)
barchart(~ X1 + X2 + X3 | Cases, mean.by.case)
-------------------------------------------------------------------------------------------------------
barplot(t(Data[order(Data[,1]),])[2:11,])
-------------------------------------------------------------------------------------------------------
names.arg axisnames=TRUE las=1 fill col pch=0.8 par(las=1)
bnames <- c(3,4,5,6,6,7,10,11) #listed for informational purposes, same as jd2c$
plot<-
barplot(tab, beside=TRUE, axisnames=TRUE,main = 'Time Spent',sub = 'Female', xlab= 'Days ',ylab ='Time Spent',col=c('blue', 'red'), ylim = c(0,1),names.arg=bnames)
legend('topleft', cex=1,  c('Left' , 'Right'), fill=c('blue', 'red'))
-------------------------------------------------------------------------------------------------------
names.arg barplot plot<-barplot(tab, beside=TRUE, axisnames=FALSE, main = 'Time Spent Left vs. Right', sub = 'Female 2c', xlab= 'Days After Entry', ylab = 'Proportion of Time Spent', col=c('blue', 'red'), ylim = c(0,1))
legend('topleft', .8,  c('Left' , 'Right'), pch=c(.8), col=c('blue', 'red'))
names.arg = jd2c$d.in.p plot<-barplot(tab, beside=TRUE, axisnames=FALSE, main = 'Time Spent Left vs. Right', sub = 'Female 2c', xlab= 'Days After Entry', ylab = 'Proportion of Time Spent', col=c('blue', 'red'), ylim = c(0,1), names.arg = jd2c$d.in.p)
legend('topleft', .8,  c('Left' , 'Right'), pch=c(.8), col=c('blue', 'red')) axisnames=TRUE
-------------------------------------------------------------------------------------------------------
gsub grep strsplit ## get city name
nameSet <- function(x) {
    return(gsub(pattern="Header: (.*) city data", replacement="\\1", x=x))
}

## extract monthly numbers
singleSet <- function(x) {
    l <- lapply(x, function(y) {
        ## split single line by spaces
        s <- strsplit(y, "[[:space:]]+")
        ## turn characters into doubles
        return(as.double(s[[1]]))
    })
    ## turn list into a matrix
    m <- do.call(rbind, l)
    return(m) 
}

## read file
con <- file("data.txt", "r")
lines <- readLines(con)
close(con)

## determine header lines and calculate begin/end lines for each dataset
headerLines <- grep(pattern="^Header", x=lines)
beginLines <- headerLines+2
endLines <- c(headerLines[-1]-1, length(lines))

## layout plotting region
par(mfrow=c(length(beginLines), 3))

## loop through all datasets
for (i in seq(along=headerLines)) {
    city <- nameSet(lines[headerLines[i]])
    data <- singleSet(lines[beginLines[i]:endLines[i]])

    for (j in 2:ncol(data)) {
        barplot(data[,j], main=city, xlab="Month", ylab=paste("Data", j-1))
    }
}
par(mfrow=c(1, 1))
-------------------------------------------------------------------------------------------------------
read.funkyfile = function(funkyfile, expression, ...) {
  temp = readLines(funkyfile)
  temp.loc = grep(expression, temp)
  temp.loc = c(temp.loc, length(temp)+1)
  temp.nam = gsub("[[:punct:]][[:space:]]", "", 
                  grep(expression, temp, value=TRUE))
  temp.nam = gsub(expression, "", temp.nam)
  temp.out = vector("list")

  for (i in 1:length(temp.nam)) {
    temp.out[[i]] = read.table(textConnection(
      temp[seq(from = temp.loc[i]+1,
               to = temp.loc[i+1]-1)]),
                             ...)
    names(temp.out)[i] = temp.nam[i]
  }
  temp.out
} read.table temp = read.funkyfile("File.txt", "Header", header=TRUE, sep="\t") # to plot everything on one page (used for this example), uncomment the next line
# par(mfcol = c(length(temp), 1)) 
lapply(names(temp), function(x) barplot(as.matrix(temp[[x]][-1]), 
                                        beside=TRUE, main=x, 
                                        legend=TRUE))
# dev.off() or par(mfcol = c(1, 1)) if par was modified par(mfcol = c(length(temp), 1))
-------------------------------------------------------------------------------------------------------
autocorrplot <- function(x)
{
  n <- length(x)
  barplot(sapply(1:10,function(i) cor(x[-i:-1],x[(-n-1+i):-n])))
}
-------------------------------------------------------------------------------------------------------
xpd=FALSE b <- barplot(c(363.2, 377.4), beside = TRUE, 
   ylim = c(340,380), col = c("orange", "blue"),xpd=FALSE)
axis(side=1,at=b,labels=c("group 1", "group 2"))
box(bty="l")
-------------------------------------------------------------------------------------------------------
my.data <- do.call("cbind", lapply(list.files(pattern="*.txt"), read.table))
my.data <- rowMeans(my.data)
barplot(t(my.data))
-------------------------------------------------------------------------------------------------------
library(TeachingDemos)
x <- pmin(3, pmax(-3, stats::rnorm(50)))
y <- pmin(3, pmax(-3, stats::rnorm(50)))
xhist <- hist(x, breaks=seq(-3,3,0.5), plot=FALSE)
yhist <- hist(y, breaks=seq(-3,3,0.5), plot=FALSE)
top <- max(c(xhist$density, yhist$density))
xrange <- c(-3,3)
yrange <- c(-3,3)
nf <- layout(matrix(c(2,0,1,3),2,2,byrow=TRUE), c(3,1), c(1,3), TRUE)
layout.show(nf)

par(mar=c(3,3,1,1))
plot(x, y, xlim=xrange, ylim=yrange, xlab="", ylab="")
par(mar=c(0,3,1,1))
bx.out <- barplot(xhist$density, axes=FALSE, ylim=c(0, top), space=0)
updateusr( bx.out[1:2], 0:1, xhist$mids[1:2], 0:1 )
xdens <- density(x)
lines(xdens$x, xdens$y, col='blue')
par(mar=c(3,0,1,1))
by.out <- barplot(yhist$density, axes=FALSE, xlim=c(0, top), space=0, horiz=TRUE)
updateusr( 0:1, by.out[1:2], 0:1, yhist$mids[1:2] )
ydens <- density(y)
lines(ydens$y, ydens$x, col='blue') counts density updateusr updateusr width xlim barplot
-------------------------------------------------------------------------------------------------------
barplot() ?barplot bar axis() axis() labels at at bar las = 2 cex.axis = 0.6 title() line mar line title() op <- par(mar= c(15,4,4,2) + 0.1)
bar <- barplot(58:1, xaxt="n", xlab="", ylab="Frequency", col=gray(5:0/5))
axis(1, labels = paste("Long Species Name", 1:58), at = bar,
     las = 2, cex.axis = 0.6)
title(xlab = "Species", line=11)
par(op)
-------------------------------------------------------------------------------------------------------
horiz.hist <- function(Data, breaks="Sturges", col="transparent", las=1, 
ylim=range(HBreaks), labelat=pretty(ylim), labels=labelat, border=par("fg"), ... )
  {a <- hist(Data, plot=FALSE, breaks=breaks)
  HBreaks <- a$breaks
  HBreak1 <- a$breaks[1]
  hpos <<- function(Pos) (Pos-HBreak1)*(length(HBreaks)-1)/ diff(range(HBreaks))
  barplot(a$counts, space=0, horiz=T, ylim=hpos(ylim), col=col, border=border,...)      
  axis(2, at=hpos(labelat), labels=labels, las=las, ...) 
  print("use hpos() to address y-coordinates") } # Data and basic concept
set.seed(8); ExampleData <- rnorm(50,8,5)+5
hist(ExampleData)
horiz.hist(ExampleData, xlab="absolute frequency") 
# Caution: the labels at the y-axis are not the real coordinates!
# abline(h=2) will draw above the second bar, not at the label value 2. Use hpos:
abline(h=hpos(11), col=2)

# Further arguments
horiz.hist(ExampleData, xlim=c(-8,20)) 
horiz.hist(ExampleData, main="the ... argument worked!", col.axis=3) 
hist(ExampleData, xlim=c(-10,40)) # with xlim
horiz.hist(ExampleData, ylim=c(-10,40), border="red") # with ylim
horiz.hist(ExampleData, breaks=20, col="orange")
axis(2, hpos(0:10), labels=F, col=2) # another use of hpos()
-------------------------------------------------------------------------------------------------------
mtext text bplt <- 
barplot(counts, main="Car Distribution", xlab="Gears", col=c("darkblue","red"), legend = rownames(counts), beside=TRUE, horiz=TRUE)

# variable 'bplt' is now a matrix of vertical bar positions on the y-axis

text(x= counts+0.3, y= bplt, labels=as.character(counts), xpd=TRUE)
# Needed to use xpd=TRUE because the xlimits were too narrow.
-------------------------------------------------------------------------------------------------------
library(party)
data(iris)
attach(iris)

ctree <- ctree(Species ~ Sepal.Length + Sepal.Width 
               + Petal.Length + Petal.Width, data = iris)

# getting ctree's class

> class(ctree)
[1] "BinaryTree"
attr(,"package")
[1] "party" ?'plot.BinaryTree' terminal_panel ?node_barplot plot(ctree, terminal_panel = node_barplot(ctree)) horizontal horiz node_barplot node_barplot # Note inclusion of horiz = FALSE
alt_node_barplot <- function (ctreeobj, col = "black", fill = NULL, beside = NULL, 
    ymax = NULL, ylines = NULL, widths = 1, gap = NULL, reverse = NULL, 
    id = TRUE, horiz = FALSE)
{
    getMaxPred <- function(x) {
        mp <- max(x$prediction)
        mpl <- ifelse(x$terminal, 0, getMaxPred(x$left))
        mpr <- ifelse(x$terminal, 0, getMaxPred(x$right))
        return(max(c(mp, mpl, mpr)))
    }
    y <- response(ctreeobj)[[1]]
    if (is.factor(y) || class(y) == "was_ordered") {
        ylevels <- levels(y)
        if (is.null(beside)) 
            beside <- if (length(ylevels) < 3) 
                FALSE
            else TRUE
        if (is.null(ymax)) 
            ymax <- if (beside) 
                1.1
            else 1
        if (is.null(gap)) 
            gap <- if (beside) 
                0.1
            else 0
    }
    else {
        if (is.null(beside)) 
            beside <- FALSE
        if (is.null(ymax)) 
            ymax <- getMaxPred(ctreeobj@tree) * 1.1
        ylevels <- seq(along = ctreeobj@tree$prediction)
        if (length(ylevels) < 2) 
            ylevels <- ""
        if (is.null(gap)) 
            gap <- 1
    }
    if (is.null(reverse)) 
        reverse <- !beside
    if (is.null(fill)) 
        fill <- gray.colors(length(ylevels))
    if (is.null(ylines)) 
        ylines <- if (beside) 
            c(3, 2)
        else c(1.5, 2.5)
    # My edit do not work if beside is not true
    #################################################
    if(!beside) horiz = FALSE
    #################################################

    rval <- function(node) {
        pred <- node$prediction
        if (reverse) {
            pred <- rev(pred)
            ylevels <- rev(ylevels)
        }
        np <- length(pred)
        nc <- if (beside) 
            np
        else 1
        fill <- rep(fill, length.out = np)
        widths <- rep(widths, length.out = nc)
        col <- rep(col, length.out = nc)
        ylines <- rep(ylines, length.out = 2)
        gap <- gap * sum(widths)
        #######################################################
        if (!horiz){
            yscale <- c(0, ymax)
            xscale <- c(0, sum(widths) + (nc + 1) * gap)
        } else {
            xscale <- c(0, ymax)
            yscale <- c(0, sum(widths) + (nc + 1) * gap)
        }                    
        #######################################################
        top_vp <- viewport(layout = grid.layout(nrow = 2, ncol = 3, 
            widths = unit(c(ylines[1], 1, ylines[2]), c("lines", 
                "null", "lines")), heights = unit(c(1, 1), c("lines", 
                "null"))), width = unit(1, "npc"), height = unit(1, 
            "npc") - unit(2, "lines"), name = paste("node_barplot", 
            node$nodeID, sep = ""))
        pushViewport(top_vp)
        grid.rect(gp = gpar(fill = "white", col = 0))
        top <- viewport(layout.pos.col = 2, layout.pos.row = 1)
        pushViewport(top)
        mainlab <- paste(ifelse(id, paste("Node", node$nodeID, 
            "(n = "), "n = "), sum(node$weights), ifelse(id, 
            ")", ""), sep = "")
        grid.text(mainlab)
        popViewport()
        plot <- viewport(layout.pos.col = 2, layout.pos.row = 2, 
            xscale = xscale, yscale = yscale, name = paste("node_barplot", 
                node$nodeID, "plot", sep = ""))
        pushViewport(plot)
        if (beside) {
            #############################################################
            if(!horiz){
                xcenter <- cumsum(widths + gap) - widths/2
                for (i in 1:np) {
                    grid.rect(x = xcenter[i], y = 0, height = pred[i], 
                      width = widths[i], just = c("center", "bottom"), 
                      default.units = "native", gp = gpar(col = col[i], 
                        fill = fill[i]))
                }
                if (length(xcenter) > 1) 
                    grid.xaxis(at = xcenter, label = FALSE)
                grid.text(ylevels, x = xcenter, y = unit(-1, "lines"), 
                    just = c("center", "top"), default.units = "native", 
                    check.overlap = TRUE)
                grid.yaxis()
            } else {
                ycenter <- cumsum(widths + gap) - widths/2
                for (i in 1:np) {
                    grid.rect(y = ycenter[i], x = 0, width = pred[i], 
                    height = widths[i], just = c("left", "center"), 
                    default.units = "native", gp = gpar(col = col[i], 
                     fill = fill[i]))
                }
                if (length(ycenter) > 1) 
                    grid.yaxis(at = ycenter, label = FALSE)
                        grid.text(ylevels, y = ycenter, x = unit(-1, "lines"), 
                        just = c("right", "center"), default.units = "native", 
                         check.overlap = TRUE)
                grid.xaxis()
            }
        #############################################################
        }
        else {
            ycenter <- cumsum(pred) - pred
            for (i in 1:np) {
                grid.rect(x = xscale[2]/2, y = ycenter[i], height = min(pred[i], 
                  ymax - ycenter[i]), width = widths[1], just = c("center", 
                  "bottom"), default.units = "native", gp = gpar(col = col[i], 
                  fill = fill[i]))
            }
            if (np > 1) {
                grid.text(ylevels[1], x = unit(-1, "lines"), 
                  y = 0, just = c("left", "center"), rot = 90, 
                  default.units = "native", check.overlap = TRUE)
                grid.text(ylevels[np], x = unit(-1, "lines"), 
                  y = ymax, just = c("right", "center"), rot = 90, 
                  default.units = "native", check.overlap = TRUE)
            }
            if (np > 2) {
                grid.text(ylevels[-c(1, np)], x = unit(-1, "lines"), 
                  y = ycenter[-c(1, np)], just = "center", rot = 90, 
                  default.units = "native", check.overlap = TRUE)
            }
            grid.yaxis(main = FALSE)
        }
        grid.rect(gp = gpar(fill = "transparent"))
        upViewport(2)
    }
    return(rval)
} plot(ctree, terminal_panel = alt_node_barplot(ctree, horiz = TRUE)) beside horiz beside ?viewport ?grid.rect reverse
-------------------------------------------------------------------------------------------------------
plot(TreeResults,tp_args = list(beside=F)) node_barplot() altbp<-function (ctreeobj, col = "black", fill = NULL, beside = NULL, 
    ymax = NULL, ylines = NULL, widths = 1, gap = NULL, reverse = NULL, 
    id = TRUE,rot=45) 
{
    getMaxPred <- function(x) {
        mp <- max(x$prediction)
        mpl <- ifelse(x$terminal, 0, getMaxPred(x$left))
        mpr <- ifelse(x$terminal, 0, getMaxPred(x$right))
        return(max(c(mp, mpl, mpr)))
    }
    y <- response(ctreeobj)[[1]]
    if (is.factor(y) || class(y) == "was_ordered") {
        ylevels <- levels(y)
        if (is.null(beside)) 
            beside <- if (length(ylevels) < 3) 
                FALSE
            else TRUE
        if (is.null(ymax)) 
            ymax <- if (beside) 
                1.1
            else 1
        if (is.null(gap)) 
            gap <- if (beside) 
                0.1
            else 0
    }
    else {
        if (is.null(beside)) 
            beside <- FALSE
        if (is.null(ymax)) 
            ymax <- getMaxPred(ctreeobj@tree) * 1.1
        ylevels <- seq(along = ctreeobj@tree$prediction)
        if (length(ylevels) < 2) 
            ylevels <- ""
        if (is.null(gap)) 
            gap <- 1
    }
    if (is.null(reverse)) 
        reverse <- !beside
    if (is.null(fill)) 
        fill <- gray.colors(length(ylevels))
    if (is.null(ylines)) 
        ylines <- if (beside) 
            c(3, 2)
        else c(1.5, 2.5)
    rval <- function(node) {
        pred <- node$prediction
        if (reverse) {
            pred <- rev(pred)
            ylevels <- rev(ylevels)
        }
        np <- length(pred)
        nc <- if (beside) 
            np
        else 1
        fill <- rep(fill, length.out = np)
        widths <- rep(widths, length.out = nc)
        col <- rep(col, length.out = nc)
        ylines <- rep(ylines, length.out = 2)
        gap <- gap * sum(widths)
        yscale <- c(0, ymax)
        xscale <- c(0, sum(widths) + (nc + 1) * gap)
        top_vp <- viewport(layout = grid.layout(nrow = 2, ncol = 3, 
            widths = unit(c(ylines[1], 1, ylines[2]), c("lines", 
                "null", "lines")), heights = unit(c(1, 1), c("lines", 
                "null"))), width = unit(1, "npc"), height = unit(1, 
            "npc") - unit(2, "lines"), name = paste("node_barplot", 
            node$nodeID, sep = ""))
        pushViewport(top_vp)
        grid.rect(gp = gpar(fill = "white", col = 0))
        top <- viewport(layout.pos.col = 2, layout.pos.row = 1)
        pushViewport(top)
        mainlab <- paste(ifelse(id, paste("Node", node$nodeID, 
            "(n = "), "n = "), sum(node$weights), ifelse(id, 
            ")", ""), sep = "")
        grid.text(mainlab)
        popViewport()
        plot <- viewport(layout.pos.col = 2, layout.pos.row = 2, 
            xscale = xscale, yscale = yscale, name = paste("node_barplot", 
                node$nodeID, "plot", sep = ""))
        pushViewport(plot)
        if (beside) {
            xcenter <- cumsum(widths + gap) - widths/2
            for (i in 1:np) {
                grid.rect(x = xcenter[i], y = 0, height = pred[i], 
                  width = widths[i], just = c("center", "bottom"), 
                  default.units = "native", gp = gpar(col = col[i], 
                    fill = fill[i]))
            }
            if (length(xcenter) > 1) 
                grid.xaxis(at = xcenter, label = FALSE)
            grid.text(ylevels, x = xcenter, y = unit(-1, "lines"), 
                just = c("center", "top"), default.units = "native", 
                check.overlap = TRUE,rot=rot)
            grid.yaxis()
        }
        else {
            ycenter <- cumsum(pred) - pred
            for (i in 1:np) {
                grid.rect(x = xscale[2]/2, y = ycenter[i], height = min(pred[i], 
                  ymax - ycenter[i]), width = widths[1], just = c("center", 
                  "bottom"), default.units = "native", gp = gpar(col = col[i], 
                  fill = fill[i]))
            }
            if (np > 1) {
                grid.text(ylevels[1], x = unit(-1, "lines"), 
                  y = 0, just = c("left", "center"), rot = 90, 
                  default.units = "native", check.overlap = TRUE)
                grid.text(ylevels[np], x = unit(-1, "lines"), 
                  y = ymax, just = c("right", "center"), rot = 90, 
                  default.units = "native", check.overlap = TRUE)
            }
            if (np > 2) {
                grid.text(ylevels[-c(1, np)], x = unit(-1, "lines"), 
                  y = ycenter[-c(1, np)], just = "center", rot = 90, 
                  default.units = "native", check.overlap = TRUE)
            }
            grid.yaxis(main = FALSE)
        }
        grid.rect(gp = gpar(fill = "transparent"))
        upViewport(2)
    }
    return(rval)
} rot= grid.text beside=T plot(TreeResults,terminal_panel=altbp(TreeResults,ylines=1.2, gap=0.05,rot=45)) node_barplot altbp<-node_barplot
body(altbp)[[8]][[3]][[3]][[23]][[3]][[5]]<-substitute(
grid.text(ylevels, x = xcenter, y = unit(-1, "lines"), just = c("center", 
    "top"), default.units = "native", check.overlap = TRUE,rot=45)
)
plot(TreeResults,terminal_panel=altbp(TreeResults)) altbp
-------------------------------------------------------------------------------------------------------
width df <- data.frame(x=factor(LETTERS[1:4]), y=sample(1:100, 4))
library(ggplot2)
ggplot(data=df, aes(x=x, y=y, width=.5)) + 
  geom_bar(stat="identity", position="identity") +
  opts(title="width = .5") + labs(x="", y="") +
  theme_bw() width space beside=TRUE barplot() geom_bar(position="dodge") df <- data.frame(g=gl(2, 1, labels=letters[1:2]), y=sample(1:100, 4))
x.seq <- c(1,2,4,5)
ggplot(data=transform(df, x=x.seq), aes(x=x, y=y, width=.85)) +
  geom_bar(stat="identity", aes(fill=g)) + labs(x="", y="") + 
  scale_x_discrete(breaks = NA) + 
  geom_text(aes(x=c(sum(x.seq[1:2])/2, sum(x.seq[3:4])/2), y=0, 
                label=c("X","Y")), vjust=1.2, size=8) width scale_x_discrete()
-------------------------------------------------------------------------------------------------------
lapply # First, some sample data
set.seed(1)
yo = data.frame(x1 = sample(letters[1:5], 20, replace=TRUE),
                x2 = sample(0:2, 20, replace=TRUE),
                x3 = sample(0:2, 20, replace=TRUE),
                x4 = sample(0:2, 20, replace=TRUE))
lapply(2:ncol(yo), function(x) table(yo[, 1], yo[, x])) lapply
 barplot par(mfrow = c(3, 1)) # To plot them all at once...
lapply(2:ncol(yo), function(x) 
barplot(table(yo[, 1], yo[, x]), beside=TRUE, legend=TRUE)
-------------------------------------------------------------------------------------------------------
mp<-barplot(allmat,beside=T,axisnames=F,col=c(rep("red",4),rep("black",4),rep("green",4),rep("blue",4)))
-------------------------------------------------------------------------------------------------------
graphics bp1 <- barplot(t(abundance[3:5, ]), width = 0.2, space = 0.7, plot = FALSE)
bp2 <- barplot(t(abundance[1:2, ]), horiz = TRUE, width = 0.05, space = 1, plot = FALSE)


par(fig = c(0, 0.8, 0, 0.8), new = TRUE)
par(xaxt = "n", yaxt = "n")
image(relationship)
par(fig = c(0, 0.8, 0.55, 1), new = TRUE)
barplot(t(abundance[3:5, ]), width = 0.2, space = 0.7)
text(bp1, abundance[3:5,] - 0.5, c("Sp3", "Sp4", "Sp5"))
par(fig = c(0.65, 1, 0, 0.8), new = TRUE)   
barplot(t(abundance[1:2, ]), horiz = TRUE, width = 0.05, space = 1)
text(abundance[1:2,] - 0.5, bp2, c("Sp1", "Sp2"))
-------------------------------------------------------------------------------------------------------
cut tapply > dat$cuts <- cut(dat$X2, c(-Inf, 0, 8, 16, Inf))

> dat
    X1         X2     cuts
546  1   7.893310    (0,8]
547  0   9.723409   (8,16]
548  0   9.256349   (8,16]
549  1 -21.008398 (-Inf,0]
550  5   0.151026    (0,8]
> 
> tapply(dat$X1, dat$cuts, sum)
 (-Inf,0]     (0,8]    (8,16] (16, Inf] 
     1         6         0        NA barplot(tapply(dat$X1, dat$cuts, sum))
-------------------------------------------------------------------------------------------------------
barplot(a, ylim = rev(range(c(0, a)))) yaxt = "n" axis() barplot(a, ylim = rev(range(a)), yaxt = "n")
axis(4, at = a)
-------------------------------------------------------------------------------------------------------
weighted.mean(dd$value, dd$count)
[1] 0.8966414 library(Hmisc)
 wtd.quantile(dd$value, dd$count, .5)
#50% 
#0.9 barplot barplot(dd$count)  #perhaps with log="y"
 barplot(dd$count, log="y")
-------------------------------------------------------------------------------------------------------
par(oma=c(3,3,0,0)) par(mar=...) scatterhist = function(x, y, xlab="", ylab=""){
    zones=matrix(c(2,0,1,3), ncol=2, byrow=TRUE)
    layout(zones, widths=c(4/5,1/5), heights=c(1/5,4/5))
    par(oma=c(3,3,0,0))

    xhist = hist(x, plot=F, breaks=10)
    yhist = hist(y, plot=F, breaks=10)
    top = max(c(xhist$counts, yhist$counts))

    par(mar=c(3,3,1,1))
    plot(x, y)

    par(mar=c(0,3,1,1))
    barplot(xhist$counts, axes=FALSE, ylim=c(0, top), space=0)

    par(mar=c(3,0,1,1))
    barplot(yhist$counts, axes=FALSE, xlim=c(0, top), space=0, horiz=TRUE)

    mtext(xlab, side=1, line=1, outer=TRUE, adj=0, 
        at=.8 * (mean(x)-min(x))/(max(x)-min(x)))
    mtext(ylab, side=2, line=1, outer=TRUE, adj=0, 
        at=.8 * (mean(y)-min(y))/(max(y)-min(y)))
    }
-------------------------------------------------------------------------------------------------------
dat <- read.table(text="date     id         freq
 6/17/12 0417D0214D   81
 6/17/12 0417D2F96C  275
 6/18/12 04179385A3    1
 6/18/12 041793A84F    2
 6/18/12 0417CA9138    2
 6/18/12 0417D0214D  120", header=TRUE)


 barplot(as.matrix(dat$freq) , beside=FALSE)
-------------------------------------------------------------------------------------------------------
; dat <- unlist(strsplit(c[, 3], split = ";"))

#[1] "Erk1" "akt"  "Erk1" "akt"  "NaN" table table(dat)

#dat
# akt Erk1 
#   2    2 barplot barplot(table(dat))
-------------------------------------------------------------------------------------------------------
rep table dat<-data.frame(fac=unlist(data[1,, drop=FALSE]), freqs=unlist(data[2,, drop=FALSE]))
barplot(table(rep(as.character(dat[, 1]), dat[, 2])), main="Sample Sizes of Various Fitness Traits")
-------------------------------------------------------------------------------------------------------
barplot( t, main="Sample Sizes of Various Fitness Traits", xaxt='n', xlab='', width=0.85, ylab="Frequency")
labels<-unlist(data[1,,drop=FALSE])
text(1:18, par("usr")[3] -0.25, srt=90, adj=1,labels=labels,xpd=TRUE, cex=0.6) table rep(as.character(dat[, 1]), dat[, 2])) dat 
barplot( as.character(dat$freqs) , main="Sample Sizes", xaxt='n', xlab='', width=0.85, ylab="Frequency", srt=90, adj=1,labels=labels,xpd=TRUE, cex=0.6)
-------------------------------------------------------------------------------------------------------
read.table(...,header=T) # converting from factor to character or numeric as required
measure  <- unlist(lapply(data[1,], as.character))
value <- unlist(lapply(data[2,], function(i){as.numeric(as.character(i))}))

# set names appropriately
names(value) <- measure


# the plot
par(las=2) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(value)
-------------------------------------------------------------------------------------------------------
dat$freqs str(foo) str(dat) str(dat$freqs) dat$freq "numeric" ## Make the frequencies numbers (rather than factors)
dat$freqs <- as.numeric(as.character(dat$freqs))
## Find a range of y's that'll leave sufficient space above the tallest bar
ylim <- c(0, 1.1*max(dat$freqs))
## Plot, and store x-coordinates of bars in xx
xx <- barplot(dat$freqs, xaxt = 'n', xlab = '', width = 0.85, ylim = ylim,main = "Sample Sizes of Various Fitness Traits", ylab = "Frequency")
## Add text at top of bars
text(x = xx, y = dat$freqs, label = dat$freqs, pos = 3, cex = 0.8, col = "red")
## Add x-axis labels 
axis(1, at=xx, labels=dat$fac, tick=FALSE, las=2, line=-0.5, cex.axis=0.5)
-------------------------------------------------------------------------------------------------------
table() v <- c("B","A","B","A","B","D","C","D","D","D","C")
barplot(table(v))
-------------------------------------------------------------------------------------------------------
rw_runs <- table( simulated_roulette_wheel)
str(rw_runs)
# 'table' int [1:38(1d)] 19 9 13 8 19 16 12 11 14 13 ...
# - attr(*, "dimnames")=List of 1
#  ..$ simulated_roulette_wheel: chr [1:38] "0" "00" "B1" "B10" ...
 barplot( rw_runs*100/sum(rw_runs) )
-------------------------------------------------------------------------------------------------------
table prop.table set.seed(001) # For the simulation to be reproducible.
simulated_roulette_wheel = sample(roulette_wheel, size=500, replace = TRUE)

tab <-table(simulated_roulette_wheel)                  # Frequency of each factor
prop.tab <- prop.table(tab) * 100                      # % Relative Freq.
barplot(prop.tab, xaxs='i', ylab="Relative %") ; box() # Barplot barplot xaxs="i" box() prop.tab prop.tab[1:10]
simulated_roulette_wheel
  0  00  B1 B10 B11 B12 B13 B14 B15 B16 
2.4 2.8 4.6 3.4 2.2 3.0 1.8 2.4 2.2 2.2 prop.table(tab)
-------------------------------------------------------------------------------------------------------
df$bin <- findInterval(df$value,seq(1,max(df$value),2))
result <- aggregate(df["weight"],df["bin"],sum)
# get your named bins automatically without specifying them individually
result$bin <- tapply(df$value,df$bin,function(x) paste0(x,collapse="-"))

# result
   bin weight
1  1-2  19833
2  3-4  24845
3  5-6  38832
4  7-8  39326
5 9-10  19277

# barplot it (base example since Roman has covered ggplot)
with(result,barplot(weight,names.arg=bin))
-------------------------------------------------------------------------------------------------------
dat <- data.frame(A = c("1-10", "11-20", "21-30"), B = c(7, 4, 5)) dat2 <- rbind(B = dat$B/sum(dat$B), C = c(dat$B[1:2]/sum(dat$B[1:2]), 0))
colnames(dat2) <- dat$A barplot(dat2, beside = TRUE, legend = rownames(dat2))
-------------------------------------------------------------------------------------------------------
op <- par(oma=c(0,15,0,0), mfrow=c(1,3), mar=c(5,1,4,1))
barplot(data$y1,names.arg=row.names(data), horiz=TRUE,las=1, xlim=c(0,8), main="Group 1")
barplot(data$y2,names.arg=row.names(data), horiz=TRUE,las=1, axisnames=FALSE, xlim=c(0,8), main="Group 2")
barplot(data$y3,names.arg=row.names(data), horiz=TRUE,las=1, axisnames=FALSE, xlim=c(0,8), main="Group 3")
par(op)
-------------------------------------------------------------------------------------------------------
..., col=bluered(20)[4:20], ... shift.BR<- colorRamp(c("blue","white", "red"), bias=0.5 )((1:16)/16)
 heatmap.2( ...., col=rgb(shift.BR, maxColorValue=255), .... ) > rgb(shift.BR, maxColorValue=255)
 [1] "#1616FF" "#2D2DFF" "#4343FF" "#5A5AFF" "#7070FF" "#8787FF" "#9D9DFF" "#B4B4FF" "#CACAFF" "#E1E1FF" "#F7F7FF"
[12] "#FFD9D9" "#FFA3A3" "#FF6C6C" "#FF3636" "#FF0000" test <- seq(-1,3, len=20)
shift.BR <- colorRamp(c("blue","white", "red"), bias=2)((1:20)/20)
tpal <- rgb(shift.BR, maxColorValue=255)
barplot(test,col = tpal)
-------------------------------------------------------------------------------------------------------
your_matrix<-( 
               rbind(
                       c(23,234,324), 
                       c(34,534,12), 
                       c(56,324,124), 
                       c(34,234,124),
                       c(123,534,654)
                    )
                )

 barplot(prop.table(your_matrix, 2) )
-------------------------------------------------------------------------------------------------------
barplot multipleHist <- function(l, col=rainbow(length(l))) {
    ## create hist for each list element
    l <- lapply(l, hist, plot=FALSE);

    ## get mids
    mids <- unique(unlist(lapply(l, function(x)x$mids)))

    ## get densities
    densities <- lapply(l, function(x)x$density[match(x=mids, table=x$mids, nomatch=NA)]);

    ## create names
    names <- unique(unlist(lapply(l, function(x)x$breaks)))

    a <- head(names, -1)
    b <- names[-1]
    names <- paste("(", a, ", ", b, "]", sep="");

    ## create barplot list
    h <- do.call(rbind, densities);

    ## set names
    colnames(h) <- names;

    ## draw barplot
    barplot(h, beside=TRUE, col=col);

    invisible(l);
} x <- lapply(c(1, 1.1, 4), rnorm, n=1000)
multipleHist(x) multipleHist <- function(l, col=rainbow(length(l))) {
    ## create hist for each list element
    l <- lapply(l, hist, plot=FALSE);

    ## get mids
    mids <- unique(unlist(lapply(l, function(x)x$mids)))

    ## get densities
    densities <- lapply(l, function(x)x$density[match(x=mids, table=x$mids, nomatch=NA)]);

    ## create names
    breaks <- unique(unlist(lapply(l, function(x)x$breaks)))

    a <- head(breaks, -1)
    b <- breaks[-1]
    names <- paste("(", a, ", ", b, "]", sep="");

    ## create barplot list
    h <- do.call(rbind, densities);

    ## set names
    colnames(h) <- names;

    ## draw barplot
    barplot(h, beside=TRUE, col=col, xaxt="n");

    ## draw x-axis
    at <- axTicks(side=1, axp=c(par("xaxp")[1:2], length(breaks)-1))
    labels <- seq(min(breaks), max(breaks), length.out=1+par("xaxp")[3])
    labels <- round(labels, digits=1)
    axis(side=1, at=at, labels=breaks)

    invisible(l);
}
-------------------------------------------------------------------------------------------------------
dat <- data.frame(category=c("dbdb1","dbdb2","dbdb1","dbdb4","dbdb1","dbdb1","dbdb2","dbdb4","dbdb1"),value=c(1,1,1,2,2,3,1,2,1))
tab <- table(dat$value,dat$category)
barplot(tab,legend=rownames(tab))
-------------------------------------------------------------------------------------------------------
mydata = matrix( c( 2:6, c( 2,4,2,6,3 ) ), nrow= 2 )
mylabs = c( "木材", "表", "笔", "垃圾桶", "杯" )
barplot( mydata, beside=T, horiz= "T", names.arg= mylabs, las= 1, col= c( "red", "blue" ) ) jpeg( "plotname.jpg" )
barplot( mydata, beside=T, horiz= "T", names.arg= mylabs, las= 1, col= c( "red", "blue" ) )
dev.off()
-------------------------------------------------------------------------------------------------------
cex.names barplot(VADeaths, horiz=TRUE, cex.names=0.85)
-------------------------------------------------------------------------------------------------------
cairo_pdf( "plotname.pdf" )
barplot( mydata, beside=T, horiz= "T", names.arg= mylabs, las= 1, col= c( "red", "blue" ) )
dev.off()
-------------------------------------------------------------------------------------------------------
pdf pdf( "plotname.pdf" , family="GB1")
barplot( mydata, beside=T, horiz= "T", names.arg= mylabs, las= 1, col= c( "red", "blue" ) )
dev.off()
-------------------------------------------------------------------------------------------------------
# Exact
data.set <- c(7,7,8,8,7,8,9)
samps <- combn(data.set, 2)
xbars <- colMeans(samps)
table(xbars)
prop.table(table(xbars))
barplot(table(xbars))

# Simulated
data.set <- c(7,7,8,8,7,8,9)
out <- replicate( 10000, mean( sample(data.set, 2) ) )
prop.table(table(out))
hist(out)
-------------------------------------------------------------------------------------------------------
barplot(table(dat$Count))
-------------------------------------------------------------------------------------------------------
a <- rnorm(1000)
h <- hist(a)
barplot(h$counts, names=h$mids) barplot(df$Count, names=df$Year)
-------------------------------------------------------------------------------------------------------
## Create a reproducible example
set.seed(5)
x <- cumsum(rnorm(50))

## Create a vector of colors selected based on whether x is <0 or >0  
## (FALSE + 1 -> 1 -> "blue";    TRUE + 1 -> 2 -> "red")
cols <- c("blue", "red")[(x > 0) + 1]  

## Pass the colors in to barplot()   
barplot(x, col = cols) findInterval() vals <- -4:4
breaks <- c(-Inf, -2, 2, Inf)
c("blue", "grey", "red")[findInterval(vals, vec=breaks)]
# [1] "blue" "blue" "grey" "grey" "grey" "grey" "red"  "red"  "red"
-------------------------------------------------------------------------------------------------------
set.seed(1)
NAO <- rnorm(40)
cols <- c("red","black")
pos <- NAO >= 0
barplot(NAO, col = cols[pos + 1], border = cols[pos + 1]) pos > pos
 [1] FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE
[11]  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE
[21]  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE
[31]  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE barplot() > pos + 1
 [1] 1 2 1 2 2 1 2 2 2 1 2 2 1 1 2 1 1 2 2 2 2 2 2 1 2 1 1 1 1 2
[31] 2 1 2 1 1 1 1 1 2 2 1 2 cols > cols[pos + 1]
 [1] "red"   "black" "red"   "black" "black" "red"   "black"
 [8] "black" "black" "red"   "black" "black" "red"   "red"  
[15] "black" "red"   "red"   "black" "black" "black" "black"
[22] "black" "black" "red"   "black" "red"   "red"   "red"  
[29] "red"   "black" "black" "red"   "black" "red"   "red"  
[36] "red"   "red"   "red"   "black" "black" border
-------------------------------------------------------------------------------------------------------
#your data...
d <- data.frame(row.names=c("1-2","2-3","3-4"), abc = c(10,80, 30), 
                def = c(15, 95, 55), ghi = c(20, 10, 80))
#but you make a matrix out of it to create bar chart
d <- do.call(rbind, d)
#...and you are sorted
barplot(d, beside = TRUE, ylim=c(0,100), legend.text = rownames(d),args.legend = list()) 
lattice data.frame d <- data.frame(column1=rep(c("1-2","2-3","3-4"), each=3), 
                column2=rep(c("abc", "def", "ghi"), 3), 
                column3=c(10, 15, 20, 80, 95, 10, 30, 55, 80))
require(lattice)
barchart(column3 ~ column1, groups=column2, d, auto.key = list(columns = 3))
-------------------------------------------------------------------------------------------------------
rect barplot 
barplot( 1:5, horiz=TRUE, xlim=c(5,0) ) 
-------------------------------------------------------------------------------------------------------
tN <- table(Ni <- stats::rpois(100, lambda=5))
opar <- par(mfrow=c(1,3),
    mar=c(10,5,2,1),
    cex.axis=0.7,
    mgp=c(3,0.5,0))
barplot(tN[1:3],xlim=c(1, length(tN) ), las=3,axes=TRUE,axisnames=TRUE,ylab="YLAB", plot=TRUE,main="PLOT1",width=1)

par(opar)
-------------------------------------------------------------------------------------------------------
dat<-read.table(text="Var1    Var2
FALSE   FALSE
FALSE   TRUE
TRUE    FALSE
FALSE   TRUE
FALSE   FALSE", header = TRUE)
 barplot(rbind(colSums(dat), colSums(!dat)))
-------------------------------------------------------------------------------------------------------
df<-data.frame(Var1=c(FALSE, FALSE, TRUE, FALSE, FALSE), 
                   Var2=c(FALSE, TRUE, FALSE, TRUE, FALSE))
    barplot(t(rbind(Var1=table(df$Var1), var2=table(df$Var2))))
-------------------------------------------------------------------------------------------------------
data['Yes', ] colSums barplot( data['Yes', ]/colSums(data) )
-------------------------------------------------------------------------------------------------------
barplot(x / rep(apply(x, 2, sum),each=2)) 
> apply(x,2,sum)
       Chrome           Firefox Internet Explorer            Safari 
           43                 7                 1                 2 apply(x,2,sum) each=2 rep apply each=nrows(x)
-------------------------------------------------------------------------------------------------------
table table(factor(x, seq.int(6))) dat <- t(round(sapply(rev(alldataset),
                      function(x) table(factor(x, seq.int(6)))) / 
                                                         nrow(alldataset) * 100))

par(mar=c(7.5,4,3,2), mgp=c(2,.7,0), tck=-.01, las=1, xpd=TRUE)
b <- 
barplot(dat,beside=T,cex.lab=0.9,ylim=c(0,7),col="black",names.arg=c(1:6),legend=names(dat),args.legend=list(x="bottom",cex=0.8,inset=c(0.4,-0.4)))
text(x=b, y=dat,labels=dat, pos=3, cex=0.8)
-------------------------------------------------------------------------------------------------------
y <- c(1,2,3,5)
barplot(rep(NA,length(y)),ylim=c(0,max(y)),axes=FALSE)
abline(h=mean(y))
barplot(y, add=T)
-------------------------------------------------------------------------------------------------------
##tapply splits dd$FREQ by dd$NUM and "sums" them
barplot(tapply(dd$FREQUENCY, dd$NUMBER, sum)) dd = read.table(textConnection("NUMBER   FREQUENCY")) header=TRUE)
-------------------------------------------------------------------------------------------------------
sapply DATE <- seq.int(min(df$ANFDAT), max(df$ENDDAT), by = "day")

df1 <- data.frame(RECORDS = sapply(DATE, function(x)
                                sum(df[["ANFDAT"]] <= x &  df[["ENDDAT"]] >= x)))

rownames(df1) <- DATE
barplot(df1$RECORDS)
-------------------------------------------------------------------------------------------------------
cairo_pdf() mydata = matrix( c( 2:6, c( 2,4,2,6,3 ) ), nrow= 2 )
mylabs = c( "木材", "表", "笔", "垃圾桶", "杯" )
cairo_pdf("Report_chinese.pdf")
barplot( mydata, beside=T, horiz= "T", names.arg= mylabs, las= 1, col= c( "red", "blue" ) )
dev.off() Cairo library(Cairo)
CairoFonts(regular="AR PL UKai CN:Book", bold="Century Schoolbook L:Italic")
CairoPDF("Report_chinese.pdf")
barplot( mydata, beside=T, horiz= "T", names.arg= mylabs, las= 1, col= c( "red", "blue" ) )
mtext("This is the title", side=3, line=1, font=2)
dev.off() CairoFonts() bold= font=2 mtext() font ?par CairoFonts() CairoFonts(regular="AR PL UKai CN:Book")
CairoPDF("Report_chinese.pdf")
barplot( mydata, beside=T, horiz= "T", names.arg= mylabs, las= 1, col= c( "red", "blue" ) )
CairoFonts(regular="Century Schoolbook L:Italic")
mtext("This is the title", side=3, line=1) #implicit argument: font=1
dev.off()
-------------------------------------------------------------------------------------------------------
col barplot d <- rep(1, 4)
d <- as.matrix(d, nrow=4, ncol=1)
barplot(d, beside=FALSE, col=c("red", "blue", "red", "blue")) 
require(ggplot2)
redBlue <- rep(c("red", "blue"), length(levels(diamonds$color))) 
#redBlue is twice as long as necessary, but that's harmless

ggplot(diamonds, aes(x=clarity, fill=color)) + geom_bar() + 
  scale_fill_manual(values=redBlue)
-------------------------------------------------------------------------------------------------------
barplot( table(pdat[ grep("R[A-Z]{2}S", pdat$Amino.acid), "log2.ratio"] ))
 > grep("R[A-Z]{2}S","AARP;SNORE")
integer(0) barplot( table(pdat[ -grep("R[A-Z]{2}S", pdat$Amino.acid), "log2.ratio"] ))
-------------------------------------------------------------------------------------------------------
manipulate(
   barplot(as.matrix(longley[,factor]), beside = TRUE, main = factor),
   factor = picker(1,2,2:3)) 2:3 manipulate(matplot(foo[,1],foo[,c(which(c(fp2,fp3)==1))],t='l'), 
           fp2 = checkbox(TRUE,'col2') ,
           fp3 = checkbox(TRUE,'col3')) fp4 fpick[4]=checkbox(TRUE,'col4')
-------------------------------------------------------------------------------------------------------
space= barplot() heights1=c(5,5,4.5,4)    
barplot(heights1, main="Language ", names.arg=c("Speak" , "English), ylab=" level ", xlab="Language", cex.names=0.8, col=c("darkblue","red"),space=c(0.2,0,0.2,0))
-------------------------------------------------------------------------------------------------------
fill legend("topright", 
       legend = c("reading/Writing", "Speaking"), 
       fill = c("darkblue", "red")) heights1 = c(5, 5, 4.5, 4, 4, 4, 4.5, 2, 4, 4) # Your data matrix dimnames mydata <- matrix(heights1, ncol = 2, byrow = TRUE,
                 dimnames = list(c("Spanish", "English", "Hindi", 
                                   "Arabic", "Body Lang"),
                                 c("Reading/Writing", "Speaking")))
mydata # Much more meaningful to look at than a simple vector
#           Reading/Writing Speaking
# Spanish               5.0        5
# English               4.5        4
# Hindi                 4.0        4
# Arabic                4.5        2
# Body Lang             4.0        4 colors <- c("darkblue", "red") # Define the colors you're using legend.text = TRUE, args.legend = list(x = "topright", bty = "n") barplot(t(mydata), beside = TRUE, col = colors, ylim = c(0, 6), axes = FALSE,xlab = "Language", main = "Languages ") 
axis(2, at = 0:5, labels = 0:5)
legend("topright", colnames(mydata), fill = colors, bty = "n")
-------------------------------------------------------------------------------------------------------
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten") fill_colors fill barplot
-------------------------------------------------------------------------------------------------------
par Ratio_J_B5H2.csv dat par(mfrow = c(2, 2)) barplot(dat[,4], names.arg = dat[,1])
barplot(dat[,4], names.arg = dat[,1])
barplot(dat[,4], names.arg = dat[,1])
barplot(dat[,4], names.arg = dat[,1])
-------------------------------------------------------------------------------------------------------
df #Calculate percentage of 0 for each column
pr.0<-apply(df,2,function(x) mean(x==0)*100)
#Plot results
barplot(pr.0,ylab="Percentage")
-------------------------------------------------------------------------------------------------------
## dput(read.csv("barcharttest.csv"))
x <- structure(list(ID = 1:7,
  sex = structure(c(1L, 1L, 1L, 2L, 2L, 1L, 2L), .Label = c("female", "male"),
   class = "factor"),
  val = c(309L, 192L, 384L, 27L, 28L, 245L, 183L),
  stat = structure(c(1L, 2L, 2L, 1L, 2L, 1L, 1L), .Label = c("NS", "sig"),
    class = "factor")),
               .Names = c("ID", "sex", "val", "stat"),
               class = "data.frame", row.names = c(NA, -7L)) ID    sex val stat
1  1 female 309   NS
2  2 female 192  sig
3  3 female 384  sig
4  4   male  27   NS
5  5   male  28  sig
6  6 female 245   NS
7  7   male 183   NS sexcols <- c("pink","blue")
## png("barplot.png")  ## for output graph
par(las=1,bty="l")  ## I prefer these settings; see ?par
b <- with(x,barplot(val,col=sexcols[sex])) ## b saves x coords of bars
legend("topright",levels(x$sex),fill=sexcols,bty="n")
## use xpd=NA to make sure that star on tallest bar doesn't get clipped;
##   pos=3 puts the text above the (x,y) location specified
text(b,x$val,ifelse(x$stat=="sig","*",""),pos=3,cex=2,xpd=NA)
axis(side=1,at=b,label=x$ID)
## dev.off()
-------------------------------------------------------------------------------------------------------
myd <- data.frame (var1 = c("II", "III", "IV", "V"), zero_co = c(15.15152 , 3.030303,    0,     0),
             non_zero_CO = c(84.84848,   96.969697,  100,   100),
              size = c(230.00000,  813.000000,  317,  1532))
myd1 <- as.matrix (t(myd[,2:3]))

barplot(myd1)
-------------------------------------------------------------------------------------------------------
beside barplot() library(gplots)
meang7 <- c(355.8303, 241.9443, 253.2399, 356.4712, 779.6908, 1444.0087, 1215.7648)
meang4 <- c(196.97559, 185.70940, 190.80855, 165.82834, 190.64914, 152.46845, 85.21208)
SEMg7 <- c(20.13935, 20.74347, 19.35914, 28.60324, 53.02302, 84.71020, 86.93199)
SEMg4 <- c( 9.469664, 7.515927, 12.500072, 10.379942, 4.455329, 15.124991, 6.888774)
barg <-
barplot(matrix(),main="C",names.arg=c(0,6),ylim=c(0,1700), col=c"gray",axis.lty=1,xlab="Time",ylab="CA Activity", beside=TRUE)
plotCI(x=barg[1,], y=meang7, uiw=SEMg7, lty=1, gap=0, add=TRUE)
plotCI(x=barg[2,], y=meang4, uiw=SEMg4, lty=1, gap=0, add=TRUE)
-------------------------------------------------------------------------------------------------------
cols [<- replace myalpha <- 0.05
cols[pval > myalpha] <- 'grey' # could also be cols <- replace(cols, pvals > 0.05, 'grey')
barplot(x, col = cols, horiz=T)
-------------------------------------------------------------------------------------------------------
cov exon x<-data.frame(cov=sample(1:20,20),exon=rep(0:4,each=4)) col= border= exon [] exon 
barplot(x$cov, names.arg = x$exon, ylab = "read depth" , col = gray.colors(length(unique(x$exon)))[as.factor(x$exon)])
-------------------------------------------------------------------------------------------------------
hist(dataset, breaks=seq(min(dataset)-0.5, max(dataset)+0.5, by=1)  ) require(lattice) 
barchart(table(dataset), horizontal=FALSE) barplot(table(dataset))
-------------------------------------------------------------------------------------------------------
par(mar=c(0, 0, 0, 0)); barplot(1:10, xaxs="i", ylim=c(0,10), space=0)
-------------------------------------------------------------------------------------------------------
values<-c(100000, 100, 2, 5, NA, NA, 2, 1, NA, 1)
barplot(values, names=1:length(values), log="y")
-------------------------------------------------------------------------------------------------------
'height' must be a vector or a matrix data.frame data.frame barplot data.frame mymat <- t(mydf[-1])
colnames(mymat) <- mydf[, 1]
barplot(mymat, beside = TRUE)
-------------------------------------------------------------------------------------------------------
ann=F mtext x <- 1:2
 y <- runif(2, 0, 100)
 par(mar=c(4, 4, 2, 4))
 plot(x, y, type="l", xlim=c(0.5, 2.5), ylim=c(-10, 110),
       axes=TRUE, ann=FALSE) mtext("!udp && !src x.x.x.x ", side=1, line=2) barplot(VADeaths[1:2,], angle = c(45, 135),
         density = 20, col = "grey",
         names=c("!src x.x.x.x", "!TCP", "!udp && !src x.x.x.x", "UF"),
         horiz=FALSE)
-------------------------------------------------------------------------------------------------------
X. ! X. check.names = FALSE read.table() > vec <- 1:5
> names(vec) <- paste0("!",LETTERS[1:5])
> vec
!A !B !C !D !E 
 1  2  3  4  5
> barplot(vec) barplot() names.arg > barplot(vec, names.arg = paste0("!", letters[1:5])) mar c(5,4,4,2) + 0.1 par() op op <- par(mar = c(10,4,4,2) + 0.1)
barplot(vec, names.arg = paste0("!", letters[1:5]), las = 2)
par(op) ## reset las = 2
-------------------------------------------------------------------------------------------------------
barplot beside=TRUE barplot(table(Src,Version),beside=TRUE)
-------------------------------------------------------------------------------------------------------
widths = c(0.5, 0.5, 1/3,1/4,1/5, 3.5, 0.5)
heights = c(25, 10, 5,4.5,4,2,0.5) barplot ##Also specify colours
barplot(heights, widths, space=0, col = colours()[1:6]) 
axis(1, 0:6) grid ##Look at ?grid to for more control over the grid lines
grid() arrows(1, 10, 1.2, 12, code=1)
text(1.2, 13, "A country") polygon polygon(c(4,4,5,5), c(20, 25, 25, 20), col="antiquewhite1")
text(4.3, 22.5, "Hi there", cex=0.6) par(mar=c(3,3,2,1), 
    mgp=c(2,0.4,0), tck=-.01,
    cex.axis=0.9, las=1)
-------------------------------------------------------------------------------------------------------
mydata <- structure(list(col1 = c(84L, 94L, 188L, 245L, 114L, 71L, 118L, 
162L, 123L, 115L, 125L, 119L, 106L, 146L), col2 = c(88.242, 107.571, 
240.288, 371.005, 131.599, 100.751, 138.543, 203.435, 152.032, 
126.945, 134.178, 138.926, 129.19, 162.319), col3 = c(9.833, 
10.917, 16.917, 22.333, 9.167, 8.167, 11.167, 14.667, 12.167, 
11.667, 10, 9.5, 9.833, 9.833), col4 = c(4.194, 3.708, 6.333, 
10.389, 4.25, 3, 4.278, 6.444, 4.639, 5.056, 4.639, 4.222, 3.833, 
4.118), cr = structure(c(1L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 2L, 
1L, 2L, 1L, 1L, 1L), .Label = c("A", "B"), class = "factor")), .Names = c("col1", 
"col2", "col3", "col4", "cr"), class = "data.frame", row.names = c(NA, 
-14L)) aggregate matrix prop.table mydataAgg <- aggregate(cbind(col1, col2, col3, col4) ~ cr, mydata, sum)
mydata2 <- as.matrix(mydata1[-1])
rownames(mydata2) <- mydataAgg[[1]]
mydata2
#   col1     col2    col3   col4
# A 1235 1527.057 110.250 46.673
# B  575  697.967  55.918 22.430
prop.table(mydata2, 2)
#        col1      col2      col3      col4
# A 0.6823204 0.6863103 0.6634851 0.6754121
# B 0.3176796 0.3136897 0.3365149 0.3245879 barplot(prop.table(mydata2, 2)) barplot(prop.table(mydata2, 2), col = c("slateblue", "palevioletred")) lattice ggplot2 barchart prop.table(mydata2, 2) barchart(t(prop.table(mydata2, 2)), stack = TRUE, horizontal = FALSE)
-------------------------------------------------------------------------------------------------------
dput # construct an example data frame similar in structure to the question
x <- data.frame( ID = 1:4 , ord = c( 'b' , 'a' , 'b' , 'c' ) )

# look at the table of x, notice it's alphabetical
table( x )

# re-order the `ord` factor levels
levels( x$ord ) <- c( 'b' , 'a' , 'c' )

# look at x
x

# look at the table of x, notice `b` now comes first
table( x )

# print the results, even though it's not a histogram  ;)
barplot( table(x) , ylim = c( 0 , 5 ) )
-------------------------------------------------------------------------------------------------------
barplot(table(onderlaag)[,c(4,1,2,3)], ylim=c(0,250)) table(your_data)[rows_to_select, columns_to_select] your_data rows_to_select columns_to_select rows_to_select columns_to_select c(4,1,2,3)
-------------------------------------------------------------------------------------------------------
prop.table barplot somkes <- sample(c('Y','N'),10,replace=T)
amount <- sample (c(1,2,3),10,replace=T)
barplot(prop.table(table(somkes,amount)),beside=T)
-------------------------------------------------------------------------------------------------------
layout() matrix() plot.new() text() x<-1:10
par(mar=c(2.5,2.5,1,1))
layout(matrix(c(1,2,3,4,1,5,3,6),ncol=2),heights=c(1,3,1,3))
plot.new()
text(0.5,0.5,"First title",cex=2,font=2)
plot(x)
plot.new()
text(0.5,0.5,"Second title",cex=2,font=2)
hist(x)
boxplot(x)
barplot(x)
-------------------------------------------------------------------------------------------------------
# some semi-random data …
df <- structure(list(Germany = c(1L, 3L, 6L, 1L, 2L), Plastic = c(2L, 
5L, 4L, 2L, 3L)), .Names = c("Germany", "Plastic"), class = "data.frame", row.names = c(NA, 
-5L))

# Expand right side of clipping rect to make room for the legend
par(xpd=T, mar=par()$mar+c(0,0,0,4))

# Graph data (transposing the matrix) using heat colors,  
# put 10% of the space between each bar, and make labels  
# smaller with horizontal y-axis labels
barplot(t, main="Barrier, xlab="Barrier [kcal/mol]", ylab="Mutant count", col=c("blue", "red"), space=0.1, cex.axis=0.8, las=1,names.arg=c("Mon"), cex=0.8) 

# Place the legend at (4,9) using blue and red
legend(4, 9, names(df), lwd=4, col=c("blue", "red"))

# Restore default clipping rect
par(mar=c(5, 4, 4, 2) + 0.1)
-------------------------------------------------------------------------------------------------------
barplot barplot barplot(pcPop,  width = seq(0,85,5),space=0)
-------------------------------------------------------------------------------------------------------
barplot set.seed(1) # Sets the starting seed for pseudo-random number generation
mydata <- data.frame(RATE = sample(LETTERS[1:5], 100, replace = TRUE),
  BALANCE = rpois(100, 15) * 10) tapply BALANCE RATE plotdata <- tapply(mydata$BALANCE, mydata$RATE, FUN = sum) barplot barplot(plotdata)
-------------------------------------------------------------------------------------------------------
x <- 1:10
y <- c(1, 3, 5, 6, 2, 7, 11, 3, 2, 13)
z <- runif(10, min=1000, max=10000) 

par(mar = c(5, 4, 4, 4) + 0.3) 
barplot(y, col=rainbow(length(x)))
par(new = TRUE)
plot(x, z, type = "l", axes = FALSE, bty = "n", xlab = "", ylab = "")
axis(side=4, at = pretty(range(z)))
mtext("z", side=4, line=3)

library(plotrix)
twoord.plot(x,y,x,z,
    xlab="x",
    ylab="y",
    rylab="z",
    main="Main",
    type=c("bar","l"),lcol=rainbow(length(x)),rcol=4)
-------------------------------------------------------------------------------------------------------
mtext() cex= main= barplot() mtext() xlab= sub= line= par(mar=..) x<-sample(letters[1:14],300,replace=TRUE)
par(mar=c(9,3,5,2))    
barplot(table(x),names.arg=paste0("very_long_",1:14),las=2, col = c("red2","darkorange3"))
mtext(side=3,"Title1",line=2,cex=2)
mtext(side=3,"subtitle",line=1,cex=1.5)

mtext(side=1,"overlapping text1",line=6)
mtext(side=1,"overlapping text2",line=7)
-------------------------------------------------------------------------------------------------------
bars <- cbind(1:10, 2:11)
barplot(bars, beside = TRUE, col = c("green", "black")) bars bars barplot(t(bars), beside = TRUE, col = c("green", "black"))
-------------------------------------------------------------------------------------------------------
cumsum heights =c(cumsum(dat[,1])-dat[,1]/2,cumsum(dat[,2])-dat[,2]/2), dat
        Male   Female
100 68.33333 31.66667
200 53.33333 46.66667
300 70.00000 30.00000
400 70.00000 30.00000
500 61.66667 38.33333 midpts <- 
barplot(dat,col=rainbow(5),beside=F)
legend(2, 320, rownames(dat), cex=1, angle = c(135, 45),  fill =rainbow(5))text(x= rep(midpts,each=5),
y =c(cumsum(dat[,1])-dat[,1]/2,cumsum(dat[,2])-dat[,2]/2),
label = round(unlist(dat),2),cex=1.2)
-------------------------------------------------------------------------------------------------------
mydata <- data.frame(
    row.names =c(100, 200, 300, 400, 500),
    Male =c(68.33333, 53.33333, 70, 70, 61.66667),
    Female =c(31.66667, 46.66667, 30, 30, 38.33333))

x <- barplot(t(as.matrix()), col=c("yellow"),legend=TRUE, border=NA, xlim=c(0,8), args.legend=list(bty="n"), ylab="Cumulative percentage", xlab="Village number")
text(x, mydata$Male-10, labels=round(mydata$Male), col="black")
text(x, mydata$Male+10, labels=100-round(mydata$Male)) library(ggplot2)
ggplot(mydata, aes(x=row.names(mydata), y=Male)) +
  geom_point(size=4) +
  coord_flip() +
  labs(x="Village number\n", y="Percentage male") +
  ylim(0,100) +
  geom_hline(yintercept=50, linetype=2)
-------------------------------------------------------------------------------------------------------
barplot(b) plot(b,type="b")
-------------------------------------------------------------------------------------------------------
data = rnorm(1000,0,1)
r <- hist(log(data))
plot(r$breaks[-1],log(r$counts)) r <- hist(data)
plot(r$breaks[-1], r$counts, log='xy', type='h')
# or alternatively:
barplot(r$counts, log="y", col="white", names.arg=r$breaks[-1])
-------------------------------------------------------------------------------------------------------
library(SDMTools) # Use this to get weighted means

testdata <- structure(list(Size=c(25L, 28L, 31L, 45L, 60L),
                           diseased=c(0L, 22L, 10L, 5L, 2L),
                           healthy=c(55L, 40L, 15L, 7L, 2L)),
                      .Names = c("Size", "diseased", "healthy"),
                      class = "data.frame",
                      row.names = c(NA, -5L))

barplot(testdata$healthy,names.arg=paste(testdata$Size),col="light blue",border="blue",xlim=c(0,6),ylim=c(0,70),width=0.5,space=1)
par(new=TRUE)


healthy_mean <- wt.mean(x=testdata$healthy,wt=testdata$Size)
healthy_sd <- wt.sd(x=testdata$healthy,wt=testdata$Size)
diseased_mean <- wt.mean(x=testdata$diseased,wt=testdata$Size)
diseased_sd <- wt.sd(x=testdata$diseased,wt=testdata$Size)

yfit_healthy <- as.data.frame(dnorm(0:max(testdata$healthy),
                              mean=healthy_mean,sd=healthy_sd))
names(yfit_healthy) <- "y"
yfit_diseased <- as.data.frame(dnorm(0:max(testdata$diseased),
                               mean=diseased_mean,sd=diseased_sd))
names(yfit_diseased) <- "y"

yfit_healthy$x <- seq(0,6,length.out=length(yfit_healthy$y))
yfit_diseased$x <- seq(0,6,length.out=length(yfit_diseased$y))

lines(yfit_healthy$x,
      (max(testdata$healthy)*yfit_healthy$y)/max(yfit_healthy$y),
      col="blue",lwd=2)

lines(yfit_diseased$x,
      (max(testdata$diseased)*yfit_diseased$y)/max(yfit_diseased$y),
      col="red",lwd=2)
-------------------------------------------------------------------------------------------------------
ggplot2 space= col= barplot() df<-sample(1:10,20,replace=T)
barplot(df,space=c(0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0),col=rep(c("red","blue","green","yellow"),each=5)) beside=TRUE df2<-matrix(df,ncol=4)
barplot(df2,beside=TRUE,col=rep(c("red","blue","green","yellow"),each=5))
-------------------------------------------------------------------------------------------------------
barplot((colSums(temp, na.rm=TRUE)/nrow(temp))*100)
-------------------------------------------------------------------------------------------------------
> limbs <- result$limbs
> names(limbs) <- result$names
> barplot(limbs) > barplot(result$limbs, names.arg = result$names)
-------------------------------------------------------------------------------------------------------
box() par(mfrow=c(2,1))
boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
boxplot(count ~ spray, data = InsectSprays,
        notch = TRUE, add = TRUE, col = "blue")
require(grDevices) # for colours
tN <- table(Ni <- stats::rpois(100, lambda=5))
r <- barplot(tN, col=rainbow(20))
box()
lines(r, tN, type='h', col='red', lwd=2)
-------------------------------------------------------------------------------------------------------
apply AgeFn() sample y <- 1980       ## MedianYr
d <- 0.1        ## Rate of NA responses
agemin <- 14
agemax <- 90

# The stats guy in me thinks that you might have some
# methodological problems here with how the ages are assigned
# But I'm just going to stick with it for now
EduByAge <- function (Age, d) {
    ifelse(Age < 17, sample(c("Some High School",NA), size=1,prob=c((1-d),d)),
           ifelse(Age > 16 & Age < 19, sample(c("Some High School", "High School Grad",NA), size=1, prob=c(0.085, 0.604,d)),
                  ifelse(Age > 18 & Age < 21, sample(c("Some High School", "High School Grad", "Associates",NA), size=1,prob=c(0.085, 0.25, 0.354,d)),
                         ifelse(20 > Age & Age < 23, sample(c("Some High School", "High School Grad", "Associates", "Bachelors",NA), size=1,prob=c(0.085, 0.25, 0.075, 0.279,d)),
                                ifelse(Age > 22, sample(c("Some High School", "High School Grad", "Associates", "Bachelors", "Masters", "Professional", "Doctorate",NA),size=1,prob=c(0.085, 0.25, 0.075, 0.176, 0.072, 0.019, 0.012,d)), NA)))))
}

NewUserGen <- function(n,s) {

    set.seed(s)

    ## Start by creating a data frame with IDs
    fakedata <- data.frame(ID=1:n)

    # Rather than a function, here I just used the built-in sample function
    # I am sampling for n ages lying between agemin and agemax
    # Using dnorm(), I assume a normal distribution of the ages, with
    # mean age equal to today's year minus the "MedianYr" you were using above
    # I assume that the mean and the SD are equal, you don't have to do that

    # I put in a few extra carriage returns here to make things not quite so
    # tight together - figured it would be easier to read.
    fakedata$Age <- sample(x=agemin:agemax,size=n,replace=TRUE,
                           prob=
                           dnorm(agemin:agemax,
                           mean=abs(y-as.numeric(format.Date(Sys.Date(),"%Y"))),
                           sd=abs(y-as.numeric(format.Date(Sys.Date(),"%Y")))))

    # I'm sure you know this, but you have some issues here
    # namely that you have a probability vector that totals to more than 1.
    # You might be getting no NAs as a result.
    fakedata$Gender <- sample(c("Male","Female","Trans", NA), 
                              n, replace=TRUE, prob=c(0.49, 0.5, 0.01, d))

    # Here is the actually sapply()
    fakedata$Edu <- sapply(fakedata$Age,FUN=EduByAge,d=0.1)

    return(fakedata)
}

outdata <- NewUserGen(300,10201) outdata$Edu <- factor(outdata$Edu,levels=c("Some High School",
                                           "High School Grad",
                                           "Associates",
                                           "Bachelors",
                                           "Masters",
                                           "Doctorate"),ordered=TRUE)

hist(outdata$Age)
barplot(table((outdata$Gender)))
par(mai=c(3,1,1,1))
barplot(table((outdata$Edu)),las=2)
-------------------------------------------------------------------------------------------------------
xlim=c(0,40) mp<-barplot(as.matrix(t(df[,2:4])),beside=TRUE,xlim=c(0,40),ann=FALSE)
mp
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
[1,]  1.5  5.5  9.5 13.5 17.5 21.5 25.5 29.5 33.5  37.5
[2,]  2.5  6.5 10.5 14.5 18.5 22.5 26.5 30.5 34.5  38.5
[3,]  3.5  7.5 11.5 15.5 19.5 23.5 27.5 31.5 35.5  39.5 par(new=TRUE) plot() lines() mp axis() par(new=TRUE)
plot(mp[2,],df$CS1,xlim=c(0,40),type="l",col="red",axes=FALSE,ylim=c(0,100),ann=FALSE)
lines(mp[2,],df$CS2,col="blue")
lines(mp[2,],df$CS3,col="green")
axis(1,at=mp[2,],labels=df$V)
axis(4,at=seq(0,100,10))
box()
-------------------------------------------------------------------------------------------------------

png(filename="~/test.png", width = 8, height = 2.5, units="in", res = 72)
barplot(as.matrix(x1), horiz = TRUE, col = c("lightblue", "yellow", "palegreen"),axes = FALSE)
axis(1, at = c(0, cumsum(x1)), labels = c(0, 15, 85, 100))
dev.off()
-------------------------------------------------------------------------------------------------------
xtabs > (temp <- xtabs(Visits ~ Date + User, SODF))
      User
Date     1   2   6
  Feb1  30 100   0
  Feb2   0  10   0
  Feb3   0   0  34 barplot 
barplot(t(temp), legend = TRUE, col = c("skyblue", "grey", "palegreen"), xlab = "Date", ylab = "Visits")
-------------------------------------------------------------------------------------------------------
barplot() axis() set.seed(1)
x<-data.frame(v1=rnorm(10),v2=rnorm(10))
barplot(t(as.matrix(x)), col=c("cyan", "black"))
axis(1,at=1:10) barplot() at= m<-barplot(t(as.matrix(x)), col=c("cyan", "black"))
m
 [1]  0.7  1.9  3.1  4.3  5.5  6.7  7.9  9.1 10.3 11.5
axis(1, at=m,labels=1:10) m labels= m<-barplot(t(as.matrix(x)), col=c("cyan", "black"))
lab<-c("A","B","C")
axis(1, at=m[c(1,5,10)],labels=lab)
-------------------------------------------------------------------------------------------------------
## Base R -- Nothing fancy. 
## Requires a vector or matrix for your data
barplot(xtabs(height ~ grp + country, dd), beside = TRUE, col = c("red", "blue")) ## lattice -- can work directly with your data.frame
## Several interesting options for groupings
library(lattice)
barchart(height ~ country, data = dd, groups = grp, 
         ylim = c(0, max(dd$height)+10), col = c("red", "blue"))
-------------------------------------------------------------------------------------------------------
spp reorder() df <- transform(df, spp = reorder(spp, spp, length))
df[order(df$spp, decreasing=TRUE),]
#   spp latitude longitude
# 4   B      4.1      -4.1
# 5   B      5.1      -5.1
# 6   B      6.1      -6.1
# 7   B      7.1      -7.1
# 1   C      1.1      -1.2
# 2   C      2.1      -2.1
# 3   C      3.1      -3.1
# 8   A      8.1      -8.1
# 9   A      9.1      -9.1

## To see one advantage of reordering the factor levels
barplot(table(df$spp))
-------------------------------------------------------------------------------------------------------
table set.seed(1)
 d <- sample(letters[1:7], 50, replace = TRUE)
 plot(table(d))

 # or
 barplot(table(d))
-------------------------------------------------------------------------------------------------------
table dat <- data.frame(categ=sample(letters[1:4],20,rep=T),
                  failure=sample(c(0,1),20,rep=T))

res <- table(dat$failure,dat$categ)
rownames(res) <- c('Failure','No failure')
res
           a b c d
Failure    3 2 2 1
No failure 1 2 4 5 barplot  by dat <- data.frame(ID=c(rep(1,9),rep(2,11)),categ=sample(letters[1:4],20,rep=T),
               failure=sample(c(0,1),20,rep=T))
 by(dat,dat$ID,function(x)table(x$failure,x$categ))
dat$ID: 1

    a b c d
  0 1 2 1 3
  1 1 1 0 0
--------------------------------------------------------------------------------------- 
dat$ID: 2

    a b c d
  0 1 2 3 0
  1 1 3 1 0 tapply with(dat,tapply(categ,list(failure,categ,ID),length))
-------------------------------------------------------------------------------------------------------
base R tapply aa sumById <- with(aa, tapply(l1,id, sum)))

barplot(sumById) ggplot2 stat_summary library(ggplot2)
ggplot(aa, aes(x = id, y = l1)) + stat_summary(fun.y = 'sum', geom = 'bar')
-------------------------------------------------------------------------------------------------------
NROW=5000
NCOL=100

#Ex. 1 - Creation of a results matrix where its memory
#allocation must continually be redefined
t1 <- Sys.time()
x <- c()
for(i in seq(NROW)){
   x <- rbind(x, runif(NCOL))
}
T1 <- Sys.time() - t1


#Ex. 2 - Creation of a results matrix where its memory
#allocation is defined only once, at the beginning of the loop.
t2 <- Sys.time()
x <- matrix(NA, nrow=NROW, ncol=NCOL)
for(i in seq(NROW)){
   x[i,] <- runif(NCOL)
}
T2 <- Sys.time() - t2


#Ex. 3 - Creation of a results object as an empty list of length NROW. 
#Much faster than Ex. 1 even though the size of the list is
#not known at the start of the loop.
t3 <- Sys.time()
x <- vector(mode="list", NROW)
for(i in seq(NROW)){
   x[[i]] <- runif(NCOL)
}
T3 <- Sys.time() - t3

png("speeding_up_loops.png")
barplot(c(T1, T2, T3), names.arg = c("Concatenate result", "Fill empty matrix", "Fill empty list"),ylab="Time in seconds")
dev.off()

T1;T2;T3
-------------------------------------------------------------------------------------------------------
xpd par(mfrow=c(2,2), xpd=TRUE)
barplot(tN, col = 2:3)
barplot(tN, col = 2:3)
barplot(tN, col = 2:3)
barplot(tN, col = 2:3)
legend(-4.5, 56,  c("A", "B"), col=2:3,lwd=1) locator()
-------------------------------------------------------------------------------------------------------
layout layout(rbind(c(1, 2),
             c(3, 3),
             c(4, 5)),
       heights=c(3, 1.5, 3),
       respect=FALSE)
tN <- table(Ni <- stats::rpois(100, lambda = 5))
barplot(tN, col = 2:3)
barplot(tN, col = 2:3)
plot.new()
#box()
text(0.5,0.5,'legend in center',cex=3)
barplot(tN, col = 2:3)
barplot(tN, col = 2:3)
-------------------------------------------------------------------------------------------------------
barplot extracolnames <- setdiff(seq(100,2500,by=100) ,rownames(newtest))
extracols <- replicate(length(extracolnames), rep(0,4))
colnames(extracols) <- extracolnames
dat <- cbind(t(as.matrix(newtest)), extracols)
dat <- dat[,order(as.numeric(colnames(dat)))]
barplot(dat, col=c("cyan","lightblue","yellow","green"), legend=colnames(newtest), cex.main=0.5, cex.axis=0.5, cex.lab=0.5, lwd=0.02)
-------------------------------------------------------------------------------------------------------
> mp <- barplot(rainbar$Rain,axes=F,ylim=c(0,15))
> axis(1,at=mp,labels=rainbar$DOY)
> axis(2,seq(0,15,3),c(0,3,6,9,12,15))
-------------------------------------------------------------------------------------------------------
m <- t(apply(mytable, 1, function(x) table(cut(x,seq(0, 3, 1)))))

> m
     (0,1] (1,2] (2,3]
[1,]     4     3     0
[2,]     1     6     0
[3,]     7     0     0
[4,]     7     0     0
[5,]     5     2     0
[6,]     1     6     0 t m <- apply(mytable, 1, function(x) table(cut(x,seq(0, 3, 1)))) barplot(m)
-------------------------------------------------------------------------------------------------------
?barplot tN <- table(Ni <- stats::rpois(100, lambda = 5))
barplot(tN, col = rainbow(20))

barplot(tN, col = rainbow(20), space=0)

barplot(tN, col = rainbow(20), space=10)

-------------------------------------------------------------------------------------------------------

tab <- as.table(path.length.hist(g)$res)
names(tab) <- 1:length(tab)
barplot(tab)
-------------------------------------------------------------------------------------------------------
matrix data <- matrix(c(dog, cat, pig), nrow=3, ncol=4, dimnames=list(c("dog", "cat", "pig"), c("A", "C", "T", "G")))
data

>   dog cat pig
> A 100 99  100
> C 30  31  12 
> T 140 150 90 
> G 102 123 144 barplot(data) x <- data.frame(
     animals=c(rep("dog",4),rep("cat",4),rep("pig",4)),
     gen=c(rep(c("A","C","T","G"),3)),
     value=c(100,30,140,102,99,31,150,123,100,12,90,144))

>    animals gen value
> 1      dog   A   100
> 2      dog   C    30
> 3      dog   T   140
> 4      dog   G   102
> 5      cat   A    99
> 6      cat   C    31
> 7      cat   T   150
> 8      cat   G   123
> 9      pig   A   100
> 10     pig   C    12
> 11     pig   T    90
> 12     pig   G   144 library(ggplot2)
library(reshape2)

ggplot(mx, aes(x=animals,y=value)) + 
     geom_bar(stat="identity") + 
     facet_grid(~gen)
-------------------------------------------------------------------------------------------------------
temp <- do.call(cbind, lapply(list(dog = dog, cat = cat, pig = pig), unlist))
temp
#   dog cat pig
# a 100  99 100
# c  30  31  12
# t 140 150  90
# g 102 123 144
str(temp)
#  num [1:4, 1:3] 100 30 140 102 99 31 150 123 100 12 ...
#  - attr(*, "dimnames")=List of 2
#   ..$ : chr [1:4] "a" "c" "t" "g"
#   ..$ : chr [1:3] "dog" "cat" "pig"
is.matrix(temp)
# [1] TRUE rbind t # Grouped by ACGT, each animal own bar
barplot(t(temp), beside = TRUE) # Stacked bar plot
barplot(prop.table(temp, margin = 2)) table matrix table set.seed(1)
mydf <- data.frame(A = sample(letters[1:4], 20, replace = TRUE),
           B = sample(c("red", "green", "blue"), 20, replace = TRUE))
mytable <- table(mydf)
mytable
#    B
# A   blue green red
#   a    0     3   1
#   b    3     0   2
#   c    2     3   0
#   d    1     2   3
is.matrix(mytable)
# [1] TRUE barplot data.frame ggplot2 lattice temp <- stack(data.frame(dog = dog, cat = cat, pig = pig))
temp1 <- cbind(temp[-2], do.call(rbind, strsplit(as.character(temp$ind), "\\.")))
-------------------------------------------------------------------------------------------------------
ylim par(mfrow=c(2,1))
tN <- table(Ni <- stats::rpois(100, lambda = 5))
r <- barplot(tN, col = rainbow(20),ylim=c(0,50),main='long y-axis')
r <- barplot(tN, col = rainbow(20),main='short y axis') axis usr require(grDevices) # for colours
par(mfrow=c(1,1))
r <- barplot(tN, col = rainbow(20),main='short y axis',ann=FALSE,axes=FALSE)
usr <- par("usr")
par(usr=c(usr[1:2], 0, 20))
axis(2,at=seq(0,20,5))
-------------------------------------------------------------------------------------------------------
barplot(sort(table(dat)), horiz=TRUE)
-------------------------------------------------------------------------------------------------------
zz <-rbind(t,zz)
barplot(zz, col=c("white", "black", "grey") )
-------------------------------------------------------------------------------------------------------
aggregate a <- aggregate(BMI ~ FamIncome, data=nh, FUN=mean)
barplot(a$BMI, names.arg=a$FamIncome)
-------------------------------------------------------------------------------------------------------
ry <- c(0.1,0.2,0.3,0.4,0.5)
ly <- c(15,35,65,75,80)
x <- 1:5
xlabs <- c("A","B","C","D","E")
barplot(ly, xaxt="n", yaxt="n", xlab="xLabel", ylab="lyLabel", ylim=c(0,100))
axis(2, seq(0,100,by=5), seq(0,100,by=5), las=2) # you can adjust positions of ly labels
par(new=TRUE)
plot(ry~x, xaxt="n", yaxt="n", xlab="", ylab="", ylim=c(0,1))
axis(1, 1:5, xlabs)
axis(4, 1:10/10, 1:10/10, las=2) # you can adjust positions of ry labels
mtext("ryLabel", 4, line=2)
-------------------------------------------------------------------------------------------------------
barplot() plot() segments()
-------------------------------------------------------------------------------------------------------
library('fitdistrplus')
    library('reshape2')



    a = matrix(c(7,12,10,10,20,3,15,40,33,57,58,60,79,132,174,201,191,184,115,70,22,2,0),1,23)
    colnames(a) <- c(13.5,14.5,15.5,16.5,17.5,18.5,19.5,20.5,21.5,22.5,23.5,24.5,25.5,26.5,27.5,
                     28.5,29.5,30.5,31.5,32.5,33.5,34.5,35.5)

    barplot(a)

    a2 = melt(a)
    a3= (rep(a2[,2],a2[,3]))

    fitdist(a3, "weibull")

descdist(a3,boot=5000)
-------------------------------------------------------------------------------------------------------
las=2 barplot() axis() mtext axis mtext("0.95",2,.5,at=.95,las=2,cex=.75)
-------------------------------------------------------------------------------------------------------
##h specifies the heights
##Dummy bars have zero heights
h = c(0, 2, 0, 1, 0, 3)
w = c(1, 1, 2, 3, 4, 1) barplot ##For the dummy bars, remove the border
##Also set the space=0 to get the correct axis
barplot(h, width=w, border=c(NA, "black"), space=0)
axis(1, 0:14)
-------------------------------------------------------------------------------------------------------
ggplot aggregate barplot > ADF <- aggregate(DF$V2, by = list(V1=DF$V1), FUN = sum)
> barplot(ADF$x, names.arg=ADF$V1)
-------------------------------------------------------------------------------------------------------
mydf <- data.frame( X1=c(A=2, B=4, C=1), X2=c(3,2,NA), X3=c(4,1,NA) )
barplot(t(as.matrix(mydf)), beside=TRUE) axis
-------------------------------------------------------------------------------------------------------
pdf("test.pdf")
par(mfrow=c(3,2))
plot(1:10, 21:30)
plot(1:10, 21:30, pch=20)
hist(rnorm(1000))
barplot(VADeaths)
...
dev.off()
-------------------------------------------------------------------------------------------------------
barplot x <- 1:10
y1 <- rnorm(10)
y2 <- rnorm(10)
y.mat <- rbind(y1, y2)
mybar <- barplot(y.mat)
mylm <- lm(y1 ~ mybar )
abline(mylm$coef)
-------------------------------------------------------------------------------------------------------
> set.seed(9)
> df <- data.frame(
    a = sample(0:10, 100, replace = TRUE),
    b = sample(0:1, 100, replace = TRUE)
    )
> dft <- table(df) > dft
    b
a    0 1
  0  2 4
  1  7 5
  2  9 6
  3  1 5
  4  7 5
  5  4 4
  6  3 2
  7  5 3
  8  4 1
  9  4 6
  10 6 7 > (dft <- t(dft / rowSums(dft)))
   a
b           0         1         2         3         4         5         6         7         8         9        10
  0 0.3333333 0.5833333 0.6000000 0.1666667 0.5833333 0.5000000 0.6000000 0.6250000 0.8000000 0.4000000 0.4615385
  1 0.6666667 0.4166667 0.4000000 0.8333333 0.4166667 0.5000000 0.4000000 0.3750000 0.2000000 0.6000000 0.5384615 > barplot(dft, col = c('orange', 'green')) > df <- as.data.frame(dft)
> df <- df[which(df$b == 0), ]
> (fit <- lm(Freq ~ as.numeric(a), df))

Call:
lm(formula = Freq ~ as.numeric(a), data = df)

Coefficients:
  (Intercept)  as.numeric(a)  
       0.4353         0.0131 abline(fit, col = "red")
-------------------------------------------------------------------------------------------------------
Jobs factor str() str(tables2) 'data.frame':   13 obs. of  2 variables:
 $ Language: Factor w/ 13 levels "ActionScript",..: 10 7 9 13 2 12 8 5 6 1 ...
 $ Jobs    : Factor w/ 13 levels "1,087","1,649",..: 6 5 12 11 10 9 8 7 4 3 ... Jobs tables2 data.frame gsub() tables2$Jobs <- as.numeric(gsub(",","",tables2$Jobs)) str(tables2) 'data.frame':   13 obs. of  2 variables:
 $ Language: Factor w/ 13 levels "ActionScript",..: 10 7 9 13 2 12 8 5 6 1 ...
 $ Jobs    : num  12664 12558 8925 5165 4981 ... barplot(tables2$Jobs,names.arg=tables2$Language)
-------------------------------------------------------------------------------------------------------
offset <- 5
barplot(-mydata-offset, beside=TRUE, ylim=c(5,12), space = c(0.1 , 0.9), offset=offset, axes=FALSE)
axis(2, at=5:12, labels=-12:-5)
-------------------------------------------------------------------------------------------------------
?barplot names.arg transComp <- matrix(sample(3*36), nrow=3, ncol=36)     
colnamesbarplot <- as.character(1:36)
 barplot(t,legend.text=TRUE,beside=TRUE,horiz=TRUE,density=NA,col=c("red1"),xlab="crimes",ylab="districts",axes=TRUE, names.arg=colnamesbarplot, cex.names=0.5, las=1) 
cex.names las=1
-------------------------------------------------------------------------------------------------------
bty="n" args.legend barplot(transComp,space=c(0,2),legend.text=TRUE,beside=TRUE,horiz=TRUE,
col=c("red1","red4","green3"), xlab="crimes per 100,000 inhabitants",
axes=TRUE, names.arg=colnamesbarplot, cex.names=0.5, las=1, args.legend=list(cex=0.4, 
x="bottomright", bty = "n"))
-------------------------------------------------------------------------------------------------------
png("~/graph.png") ; par(mar=c(6, 4, 4, 2) + 0.1)
barplot(df, beside=TRUE, ylim=c(0,100),ylab="Percentage",space=.1, main="Some Title", names.arg=c("Captivate" "Control"), las=2, axis.lty=1)
dev.off()
-------------------------------------------------------------------------------------------------------
barplot(c - 0.4,names.arg=name,axes = FALSE)
axis(side = 2,at = seq(0,0.6,by = 0.2),labels = as.character(seq(0.4,1.0,by = 0.2))) c
-------------------------------------------------------------------------------------------------------
names.arg barplot height ?barplot barplot(table(df$Gene_type, df$SNP)) ggplot2
-------------------------------------------------------------------------------------------------------
df <- data.frame(v1 = c(434,8012,1254,39,4322,595,12984,5597), v2 = c(359,8217,1360,112,4199,2737,13112,4287))
barplot(apply(df,1,min)) library("ggplot2")
df$min <- apply(df, 1, min)
ggplot(data = df, aes(x = 1:8, y = min)) + geom_bar(stat="identity")
-------------------------------------------------------------------------------------------------------
d = read.table(text="Names   Wkdays Wkend        
Dawn     5.0    4.5
Steve    9.8    2.0
Lena     3.5    5.5
Patty    9.6    4.3
Ania     8.3    3.2
Beth     9.3    2.5
Roby     2.5    7.4", header=T)

d = t(as.matrix(d[,2:3]))
d = as.table(d)
colnames(d) = c("Dawn", "Steve", "Lena", "Patty", "Ania", "Beth", "Roby")

windows()
  barplot(d, beside=T) beside=TRUE
-------------------------------------------------------------------------------------------------------
barplot barplot(quantity)
-------------------------------------------------------------------------------------------------------
lines() Change axis() at= labels= at= x<-barplot(Sales,ylim=c(0,1000))
lines(x,Change*1000,type="b")
axis(4,at=seq(0,800,200),labels=seq(0,800,200)/1000)
-------------------------------------------------------------------------------------------------------
par("usr") xaxs="i" xlim par(mar=c(5,5,2,5)) # change margins
x = barplot(Sales, ylim=c(0,1000)) # barplot, keep middle points of bars
mtext("Sales", 2, line=3) # first y-axis label
xlim = par("usr")[1:2] # get xlim from plot
par(new=TRUE) 
plot.new() # new plot
plot.window(xlim=xlim, ylim=c(0,1), xaxs="i", yaxs="i") # new plot area, same xlim
lines(x,Change,type="b") # the lines in the middle points
axis(4) # secondary y-axis
mtext("Change", 4, line=3) # secondary y-axis label
box()
-------------------------------------------------------------------------------------------------------
barplot(table(iris[iris$Species == 'virginica',1])) tb <- table(iris[iris$Species == 'virginica',1])
tb <- as.data.frame(tb)
ggplot(tb, aes(x=Var1, y=Freq)) + geom_bar()
-------------------------------------------------------------------------------------------------------
xpd xvals = with(testdata,
barplot(xbar, names.arg=group,  main="",xlab="x",ylab="y",ylim=c(2,6),xpd=FALSE))
-------------------------------------------------------------------------------------------------------
barplot(t(dataframe), beside = TRUE)
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
barplot x <- c(0, 0, 2, 5, 7, 12, 14)
uval <- sort(unique(x))
counts <- rowSums(sapply(x, function(x) x==uval))
barplot(counts, names=uval)
-------------------------------------------------------------------------------------------------------
width height width height \includegraphics width height \setkeys{Gin} \includegraphics include=FALSE require("utils")
?RweaveLatex width height 6 <<fig=TRUE, width=8, height=5>>=
barplot(prop.table(table(x, y), margin = 2) * 100,border = FALSE, xlab = '', ylab = '', las = 2)
@ F T ?RweaveLatex 0.8\textwidth \setkeys{Gin}{width=8in}
<<fig=TRUE, width=8, height=5>>=
barplot(prop.table(table(x, y), margin = 2) * 100,border = FALSE, xlab = '', ylab = '', las = 2)
@
%% reset if you want
\setkeys{Gin}{width=0.8\textwidth} width height \setkeys{Gin}
-------------------------------------------------------------------------------------------------------
barplot 
barplot(with(dat,prop.table(table(feel,grade))),beside=TRUE,xlab="Grade",ylab="% Feeling Within Grade Group",col=grey((1:5)/5))
legend("topright",as.character(feelops),fill=grey(1:5/5))
-------------------------------------------------------------------------------------------------------
bar() barplot() bar(dv = Species, 
    factors = c(Category, Reason), 
    dataframe = Reasonstats, 
    errbar = FALSE, 
    ylim=c(0, 140))  #I increased the upper y-limit to accommodate the legend. errbar=FALSE
-------------------------------------------------------------------------------------------------------
lattice Reasonstats <- read.table(text="      Category      Reason   Species
   Decline       Genuine      24
  Improved       Genuine      16
  Improved Misclassified      85
   Decline Misclassified      41
   Decline     Taxonomic       2
  Improved     Taxonomic       7
   Decline       Unclear      41
  Improved       Unclear     117", header=T)

ReasonstatsDec <- Reasonstats[which(Reasonstats$Category=="Decline"),]
ReasonstatsImp <- Reasonstats[which(Reasonstats$Category=="Improved"),]
Reasonstats3   <- cbind(ReasonstatsImp[,3], ReasonstatsDec[,3])
colnames(Reasonstats3) <- c("Improved", "Decline")
rownames(Reasonstats3) <- ReasonstatsImp$Reason

windows()
  barplot(t(Reasonstats3), beside=T, ylab="number of species", cex.names=0.8, las=2, ylim=c(0,120), col=c("darkblue","red"))
  box(bty="l") Decline Improved Reason 
-------------------------------------------------------------------------------------------------------
dat barplot(t(dat)[2:3,],names.arg=t(dat)[1,],space=c(0,diff(t(dat)[1,])),axis.lty=1)
-------------------------------------------------------------------------------------------------------
mapply graph <- function(n,p){
  x <- dbinom(0:n,size=n,prob=p)
  barplot(x,names.arg=0:n,main=sprintf(paste('bin. dist. ',n,p,sep=':')))
}
par(mfcol=c(2,5))
  mapply(graph,20,seq(0.1,1,0.1))
-------------------------------------------------------------------------------------------------------
for *apply par(mfrow=c(2, 5))
for(p in seq(0.1, 1, len=10))
{
    x <- dbinom(0:20, size=20, p=p)
    barplot(x, names.arg=0:20, space=0)
}
-------------------------------------------------------------------------------------------------------
c <- c(1,2)
d <- c(3,5)
e <- c(5,6)
f <- c(4,4)

dat <- cbind(c,d,e,f)
barplot(dat,beside=TRUE)
-------------------------------------------------------------------------------------------------------
?barplot VADeaths Rural       Male Rural   Female     Urban Male   Urban Female
50-54       11.7         8.7        15.4         8.4
55-59       18.1         11.7       24.3         13.6
60-64       26.9         20.3       37.0         19.3
65-69       41.0         30.9       54.6         35.1
70-74       66.0         54.3       71.1         50.0 barplot(VADeaths,grouped=T) barplot(t(VADeaths),grouped=T) read.csv
-------------------------------------------------------------------------------------------------------
?par
 barplot(graph.frame[1,], ylab = "AAA", col = terrain.colors(3),ylim="c(0,10),  xaxt = "n")

pdf("data_output.pdf", height = 8.5, width = 14)
graph.frame <- cbind(c(1,2,3,4),c(5,6,7,8),c(9,10,2,2))
par(mfrow = c(1,3), mar = c(7.6, 4.1, 6.1, 2.1))
colnames(graph.frame) <- c("OneOneOne", "TwoTwoTwo", "ThreeThreeThree")
labels <- colnames(graph.frame)
temp1 <- barplot(graph.frame[1,], ylim=c(0,10),ylab = "AAA", col = terrain.colors(3), xaxt = "n")
temp2 <- temp1[1:length(labels)]
text(temp2, par("usr")[3] - 0.35, srt = 45, adj = 1,
     labels = labels, xpd = TRUE)
box()
temp1 <- barplot(graph.frame[2,], ylim=c(0,10),main = "Title", ylab = "BBB", col = terrain.colors(3), xaxt = "n")
temp2 <- temp1[1:length(labels)]
text(temp2, par("usr")[3] - 0.35, srt = 45, adj = 1,
     labels = labels, xpd = TRUE)
box()
temp1 <- barplot(graph.frame[3,],ylim=c(0,10),ylab = "CCC", col = terrain.colors(3),xaxt = "n")
temp2 <- temp1[1:length(labels)]
text(temp2, par("usr")[3] - 0.35, srt = 45, adj = 1,
     labels = labels, xpd = TRUE)
box()
dev.off()
-------------------------------------------------------------------------------------------------------
x <- c(58, 68, 60, 80)
savplot <- barplot(x,space=0,col="yellow",border=NA)
axis(1,at=0:length(x),labels=seq(0,0.8,0.2))
par(xpd=NA)
text(labels=paste0(x,"%"),savplot,x+5,cex=1.5)
par(xpd=TRUE)
-------------------------------------------------------------------------------------------------------
?unlist data.frame d <- read.table(file="YOURFILE", sep="\t", header=TRUE, row.names=1)
barplot(unlist(d)) firstline secondline read.table # ?read.table
-------------------------------------------------------------------------------------------------------
ylim barplot(unlist(d), ylim=c(0,1.1*max(unlist(d)))
-------------------------------------------------------------------------------------------------------
pyramide <- function(data,laxis,raxis) {
  a <- as.character(data$A)
  m<-data$m
  f<-data$f
  ff<- -m

  par(mai=c(1,1,1,.2))
  layout(matrix(1:2,nrow=1))
  barplot(ff,horiz=T,main="Hommes",space=0,col="grey",xlim=c(-1,0),axes=F,axisnames=F,cex.axis =0.7,xaxt="n", yaxt="n")
  axis(1,
       at=-laxis,
       labels=sprintf("%1.1f",laxis),
       cex.axis =0.7)

  par(mai=c(1,.3,1,1))
 
  axis(1,
       at=laxis,
       labels=sprintf("%1.1f",laxis),
       cex.axis =0.7)
  axis(2,
       at=as.numeric(a),
       labels=a,
       las=1,tcl=0,
       lty=0,
       cex.axis =0.5)
}

ages <- agelabels
l <-seq(1,0,by=-0.2)
r <-seq(0,1,by=0.2)
x <- data.frame(A=ages, m=pop.M, f=pop.F)

pyramide(x,l,r)
-------------------------------------------------------------------------------------------------------
textOutput() mainPanel NULL library(shiny)
    shinyUI(pageWithSidebar(

headerPanel("Shiny Example"),

    sidebarPanel(


        wellPanel(

        selectInput(    inputId = "variable1",label = "Select First Variable:", 
                choices = c("Binary Variable 1" = "binary1",
                "Binary Variable 2" = "binary2", 
                "Continuous Variable 1" = "cont1",
                "Continuous Variable 2" = "cont2"),
                selected = "Binary Variable 1"
        )
        ),


        wellPanel(

            checkboxInput("bivariate", "Proceed to Bivariate Analysis", FALSE),
        conditionalPanel(
        condition="input.bivariate==true",
        selectInput(inputId = "variable2", 
        label = "Select Second Variable:",
        choices = c("Binary Variable 1" = "binary1",
        "Binary Variable 2" = "binary2", 
        "Continuous Variable 1" = "cont1",
        "Continuous Variable 2" = "cont2"),
        selected = "Binary Variable 2"
    )
    )
    )
    ),
    mainPanel(

    h5("Item Response Rate"),
    verbatimTextOutput("nitem"),

    h5(textOutput("caption2")),
    verbatimTextOutput("out2"),

    h5(textOutput("caption3")),
    verbatimTextOutput("out3"),

    h5(textOutput("caption4")),
    verbatimTextOutput("out4"),

    h5(textOutput("caption5")),
    plotOutput("out5")
    )
    )) binary1 <- rbinom(100,1,0.5)
    binary2 <- rbinom(100,1,0.5)
    cont1   <- rnorm(100)
    cont2   <- rnorm(100)

    dat <- as.data.frame(cbind(binary1, binary2, cont1, cont2))

    dat$binary1 <- as.factor(dat$binary1)
    dat$binary2 <- as.factor(dat$binary2)
    dat$cont1 <- as.numeric(dat$cont1)
    dat$cont2 <- as.numeric(dat$cont2)

    library(shiny)

    shinyServer(function(input, output) {

    inputVar1 <- reactive({
    parse(text=sub(" ","",paste("dat$", input$variable1)))
    })

    inputVar2 <- reactive({
    parse(text=sub(" ","",paste("dat$", input$variable2)))
    })

    output$nitem <- renderPrint({


    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    n <- sum(table(eval(inputVar1())))
    p <- n/100
    out <- cat(paste(n,gsub(" ","",paste("(",round(as.numeric(p)*100,2),"%",")"))),"\n")
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    n <- sum(table(eval(inputVar1())))
    p <- n/100
    out <- cat(paste(n,gsub(" ","",paste("(",round(as.numeric(p)*100,2),"%",")"))),"\n")
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    n <- sum(table(eval(inputVar1()),eval(inputVar2())))
    p <- n/100
    out <- cat(paste(n,gsub(" ","",paste("(",round(as.numeric(p)*100,2),"%",")"))),"\n")
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    n <- sum(table(eval(inputVar1()),eval(inputVar2())))
    p <- n/100
    out <- cat(paste(n,gsub(" ","",paste("(",round(as.numeric(p)*100,2),"%",")"))),"\n")
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    n <- sum(table(eval(inputVar1()),eval(inputVar2())))
    p <- n/100
    out <- cat(paste(n,gsub(" ","",paste("(",round(as.numeric(p)*100,2),"%",")"))),"\n")
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    n <- sum(table(eval(inputVar1()),eval(inputVar2())))
    p <- n/100
    out <- cat(paste(n,gsub(" ","",paste("(",round(as.numeric(p)*100,2),"%",")"))),"\n")
    }
    }
    }
    }
    }
    }

    })

    output$caption2 <- renderText({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    caption2 <- "Univariate Table"
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    caption2 <- "Univariate Summary"
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    captions2 <- "Bivariate Table"
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption2 <- "Numeric Summary First Variable"
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption2 <- "Numeric Summary By Factor"
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    caption2 <- "Numeric Summary By Factor"
    }
    }
    }
    }
    }
    }

    })

    output$out2 <- renderPrint({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    table(eval(inputVar1()))
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    summary(eval(inputVar1()))
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    table(eval(inputVar1()), eval(inputVar2()))
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    summary(eval(inputVar1()))
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    by(eval(inputVar2()), eval(inputVar1()), summary)
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    by(eval(inputVar1()), eval(inputVar2()), summary)
    }
    }
    }
    }
    }
    }

    })

    output$caption3 <- renderText({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    caption3 <- "Univariate Table of Proportions"
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    caption3 <- ""
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    captions3 <- "Bivariate Table of Row Proportions"
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption3 <- "Numeric Summary Second Variable"
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption3 <- "Kruskal Wallis Test"
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    caption3 <- "Kruskal Wallis Test"
    }
    }
    }
    }
    }
    }

    })


    output$out3 <- renderPrint({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    prop.table(table(eval(inputVar1())))
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    NULL
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    prop.table(table(eval(inputVar1()), eval(inputVar2())), margin=1)
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    summary(eval(inputVar2()))
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    kruskal.test(eval(inputVar2()) ~ eval(inputVar1()))
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    kruskal.test(eval(inputVar1()) ~ eval(inputVar2()))
    }
    }
    }
    }
    }
    }

    })

    output$caption4 <- renderText({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    caption4 <- ""
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    caption4 <- ""
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    captions4 <- "Pearsons Chi-Squared Test"
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption4 <- "Spearmans Correlation Coefficient"
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption4 <- ""
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    caption4 <- ""
    }
    }
    }
    }
    }
    }

    })

    output$out4 <- renderPrint({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    NULL
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    NULL
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    chisq.test(table(eval(inputVar1()), eval(inputVar2())))
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    cor(eval(inputVar1()), eval(inputVar2()), method="spearman", use="pairwise.complete.obs")
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    NULL
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    NULL
    }
    }
    }
    }
    }
    }

    })

    output$caption5 <- renderText({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    caption5 <- "Univariate Barplot"
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    caption5 <- "Univariate Histogram"
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    captions5 <- "Bivariate Barplot"
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption5 <- "Bivariate Scatter Graph"
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    caption5 <- "Bivariate Boxplot"
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    caption5 <- "Bivariate Boxplot"
    }
    }
    }
    }
    }
    }

    })

    output$out5 <- renderPlot({

    if ( (input$bivariate==FALSE) & (is.factor(eval(inputVar1()))==TRUE) ) {
    barplot(table(eval(inputVar1())))
    } else {

    if ( (input$bivariate==FALSE) & (is.numeric(eval(inputVar1()))==TRUE) ) {
    hist(eval(inputVar1()),main="")
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    barplot(table(eval(inputVar1()), eval(inputVar2())), beside=TRUE)
    } else {

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    plot(eval(inputVar1()), eval(inputVar2()), main="")
    } else {

    if ( (input$bivariate==TRUE) & (is.factor(eval(inputVar1()))==TRUE) & (is.numeric(eval(inputVar2()))==TRUE) ) {
    boxplot(eval(inputVar2()) ~ eval(inputVar1()))
    } else { 

    if ( (input$bivariate==TRUE) & (is.numeric(eval(inputVar1()))==TRUE) & (is.factor(eval(inputVar2()))==TRUE) ) {
    boxplot(eval(inputVar1()) ~ eval(inputVar2()))
    }
    }
    }
    }
    }
    }

    })

    })
-------------------------------------------------------------------------------------------------------
barplot mydat <- cbind(rbind(a,b,0),rbind(0,0,c))[,c(1,6,2,7,3,8,4,9,5,10)]
barplot(mydat,space=c(.75,.25)) mydat > mydat
  [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
a    3    0    3    0    2    0    1    0    0     0
b    3    0    2    0    2    0    2    0    2     0
     0    0    0    1    0    2    0    3    0     4 a b c mydat
-------------------------------------------------------------------------------------------------------
histo<-hist(yourvariable)
barplot(histo$counts/n,col="white",space=0)->bp   # n=length(yourvariable)
axis(1,at=c(bp),labels=histo$mids)
title(ylab="Relative Frequency",xlab="Your Variable Name")
-------------------------------------------------------------------------------------------------------
par(mfrow=c(1,2))
barplot(data2,axes=F,horiz=T,axisnames=FALSE, xlim=c(-8,0))

#creating a new axis with desired labels
axis(side=1,at=seq(-8,0,2),labels=c(8,6,4,2,0))
barplot(data1,horiz=T,axes=T,las=1)
-------------------------------------------------------------------------------------------------------
# suppress the x-axis and save your original plot's bar locations
bp <- barplot(data,space=c(1,0.25),legend=rownames(data),col=c('white','black','grey'),las=2,xaxt="n")

# draw a new axis using these values
axis(1,at=rowMeans(matrix(bp,ncol=2,byrow=TRUE)),
     labels=unique(colnames(data)),lty=0) legend.args barplot
-------------------------------------------------------------------------------------------------------
las lab <- c("Morning (PT)", "Evening (PT)",
           "Morning (LT)", "Evening (LT)",
           "Morning (total)", "Evening (total)")

data <- data.frame(numbers=c(1,2,1,2,2,1), period=lab)
par(mar=c(7, 4, 4, 2))
barplot(data$numbers,names.arg=lab, col="darkorange1", main="", ylab="(%)", las=2) text
-------------------------------------------------------------------------------------------------------
txt <-"[1 2 3 4]  
 [5 6]  
 [7 8 9 10 15]  
 [4] " read.table(text=gsub("\\[|\\]", "", readLines(textConnection(txt)) ), 
           fill=TRUE, header=FALSE)
  V1 V2 V3 V4 V5
1  1  2  3  4 NA
2  5  6 NA NA NA
3  7  8  9 10 15
4  4 NA NA NA NA apply(dl, 1, function(x) barplot(x[!is.na(x)] )  ) matplot(x=1:4, dl, type="b", ylim=c(0,20),  
        col=c("red", "orange", "blue", "green", "purple"))
-------------------------------------------------------------------------------------------------------
rich.colors gplots RColorBrewer "spectral" blue2green2red colorRamps require( gplots )
barplot( rep(1,100), width = rep(2,100) , col=rich.colors(100), space = 0 , border=0, axes=FALSE)

require( RColorBrewer )
display.brewer.pal(11 , "Spectral" )

require( colorRamps )
image(matrix(1:400, 20), col = blue2green2red(400) , axes = FALSE)
-------------------------------------------------------------------------------------------------------
freqs <- apply(dataframe, 2, function(column) { 
    length(which(column == 2))/nrow(dataframe) 
})
names(freqs) <- names(dataframe) # may be redundant barplot(freqs)
-------------------------------------------------------------------------------------------------------
dat barplot(colSums(dat == 2, na.rm = TRUE)) barplot(colSums(dat == 2, na.rm = TRUE) / nrow(dat))
-------------------------------------------------------------------------------------------------------
barplot(t(as.matrix(dat[1:2])),  names.arg=c("",as.character(dat$V3[2]),"", as.character(dat$V3[4:6])))
-------------------------------------------------------------------------------------------------------
dat <- read.table(text="0.2 0.8 val1
0.3 0.7 val1
0.9 0.1 val1
0.22 0.78 val2
0.30 0.70 val3
0.00 1.00 val3",header=FALSE)

bp <- barplot(t(as.matrix(dat[1:2])))
axis(1,at=tapply(bp,dat[,3],mean),labels=unique(dat[,3])) bp <- barplot(t(as.matrix(dat[1:2])))
mapply(
  function(a,b,c) axis(1,at=c(a,b,c),labels=FALSE),
  tapply(bp,dat[,3],tail,1),
  tapply(bp,dat[,3],head,1),
  tapply(bp,dat[,3],mean)
)
axis(1,at=tapply(bp,dat[,3],mean),labels=unique(dat[,3]),lwd=NA)
-------------------------------------------------------------------------------------------------------
x <- replicate(10, round(10 * rexp(2000, 10))) apply(x, 2, table)
## [[1]]

##   0   1   2   3   4   5   6   8 
## 771 798 274 104  37  14   1   1 

## [[2]]

##   0   1   2   3   4   5   6 
## 792 788 275  77  37  26   5    

## etc. x (y <- apply(x, 2, function(column) table(factor(column, levels = 0:9))))
##   [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
## 0  771  792  797  783  775  806  801  793  788   795
## 1  798  788  795  744  792  738  765  720  729   760
## 2  274  275  253  308  271  288  263  297  312   261
## 3  104   77   91  110  104  114  103  117  106   124
## 4   37   37   42   37   35   33   48   49   41    36
## 5   14   26   16    8   11   16   12   15   17    14
## 6    1    5    3    8    8    2    3    4    6     7
## 7    0    0    3    1    3    3    2    1    1     1
## 8    1    0    0    1    1    0    3    3    0     1
## 9    0    0    0    0    0    0    0    1    0     1 barplot(y)
-------------------------------------------------------------------------------------------------------
xaxt = "n" yaxt = "n" box grid month.name seq.int x <- matrix(
  c(
    200, 227, 196, 
    210, 279, 319, 
    220, 126, 111,
    230, 196, 123,
    240, 106, 94,
    250, 154, 233,
    260, 226, 218
  ),
  nrow = 3,
  ncol = 7
)
colnames(x) <- month.name[c(11:12, 1:5)]
rownames(x) <- c("Hornberg", "Strick", "Huetten")


par(mar = c(5, 4, 1.5, 0.5), ps = 12, cex  = 1, cex.main = 2, las = 1)

barplot(x,beside=TRUE,ylim=c(0,350),xlab="Month", axes=TRUE,axis.lty=1, ylab="Monthly",col=c("darkblue", "dodgerblue3"),panel.first= abline())
  
box()
grid()
-------------------------------------------------------------------------------------------------------
barplot() bp <- barplot(y)
bp
     [,1]
[1,]  0.7
[2,]  1.9
[3,]  3.1
[4,]  4.3
[5,]  5.5 x plot(bp) y x 1,2,3,4,5 y bp <- barplot(y)
points(bp,c(10,20,30,40,50))
-------------------------------------------------------------------------------------------------------
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, col=c("darkblue","red"), legend=rownames(counts), beside=T)
-------------------------------------------------------------------------------------------------------
barplot(y, xlim=c(0, ncol(y) + 3), col = 1:nrow(y), ylab="My Variables", legend.text = TRUE,args.legend = list(x = ncol(y) + 3, y=max(colSums(y)), bty = "n"))
-------------------------------------------------------------------------------------------------------
par(mfrow=c(1, 1), mar=c(5, 5, 4, 8))
barplot(y, col = 1:nrow(y), ylab="My Variables", legend.text = TRUE, args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
-------------------------------------------------------------------------------------------------------
barplot(t(as.matrix(DF[,2:5])), beside=F, names.arg=as.Date(DF[,1], "%d-%m-%Y")) barplot(t(as.matrix(DF[,2:5])), beside=T, names.arg=as.Date(DF[,1], "%d-%m-%Y"))
-------------------------------------------------------------------------------------------------------
aggregate ?aggregate > aggregate(.~names, FUN=mean, data=df[, -2])
    names       Y1       Y2
1   Aroma 4.446667 7.433333
2   Katja 5.693333 7.666667
3 William 4.390000 7.766667 barplot barplot(DF[,2], names.arg=DF$names, ylab="mean of Y1", las=1) # for Y1
barplot(DF[,3], names.arg=DF$names, ylab="mean of Y2", las=1) # for Y2
-------------------------------------------------------------------------------------------------------
axis() bp <- barplot(...) oldpar <-par(mar=c(7,5.1,4.1,2.1))

bp <- barplot(a,col=c("blue","red","purple"),ylab="Frequency",xlab="",main="Frequency",axisnames=FALSE) 
bp line=... axis() avgpts <- tapply(bp,rep(1:3,each=2),mean)
grps <- c("Bare NP","Singular-Marked NP","Plural-Marked NP")
subgrps <- c("BrP","AmE")
axis(1,at=bp,labels=rep(subgrps,3), cex.axis=0.7)
axis(1,at=avgpts,labels=grps, cex.axis=0.7,line=1.5,lwd=0)

title(xlab="Form of NP and Native Language",line=4.5)
-------------------------------------------------------------------------------------------------------
ylim=c(50,65) xpd = FALSE barplot()
-------------------------------------------------------------------------------------------------------
xlim ylim ?barplot barplot(a,  main=main[1], xlab='RSSI', xlim=c(0, 4), ylim=c(0, 32))
barplot(b,  main=main[2], xlab='RSSI', xlim=c(0, 4), ylim=c(0, 32))
barplot(c,  main=main[3], xlab='RSSI', xlim=c(0, 4), ylim=c(0, 32))
barplot(d,  main=main[4], xlab='RSSI', xlim=c(0, 4), ylim=c(0, 32)) xlim width
-------------------------------------------------------------------------------------------------------
car1yr1 = c(rep(0, 101), rep(1, 9)) #car has 9 dents that remove paint
car1yr5 = c(rep(0, 131), rep(1, 19)) #car has 19 dents that remove paint

# The total number of observations is the total number of dents
total.dents.1 <- length(car1yr1)
total.dents.5 <- length(car1yr5)
# The dents that remove paint are marked as 1, the others with 0, 
# so we can just sum all of the data to get the number of paint-removing dents
dents.paint.1 <- sum(car1yr1)
dents.paint.5 <- sum(car1yr5)
# Alternatively you can use
# dents.paint.1 <- length(which(car1yr1==1))
# Calculate the %
dents.paint.perc.1 <- dents.paint.1/total.dents.1
dents.paint.perc.5 <- dents.paint.1/total.dents.5

df <- data.frame(dents.paint.perc.1, dents.paint.perc.5)

# Plot the data. 
# ylim specifies the limits of the y axis
# ylab defines the axis title. 
# las=1 puts the labels on the y axis horizontally
# names defines the labels on the x axis
barplot(as.matrix(df)*100, ylim=c(0,20), ylab="% dents removing paint", las=1,names=c("Car 1 year 1", "Car 1 year 5")) *apply
-------------------------------------------------------------------------------------------------------
barplot(DF$V3, names.arg=DF$V4) DF data.frame table R table
-------------------------------------------------------------------------------------------------------
hist $density barplot foo<-hist(dfram)  #although you probably wanted hist(dfram$y) or some such)
barplot(foo$density)
-------------------------------------------------------------------------------------------------------
space ?barplot barplot(as.matrix(counts), beside = TRUE)
barplot(as.matrix(counts), beside = TRUE, space = c(0, 1.4)) barplot barplot(t(as.matrix(counts)), beside = TRUE) ggplot ggplot melt reshape2 ggplot library(reshape2)
library(ggplot2)

df <- melt(counts)
ggplot(data = df, aes(x = as.factor(Var1), y = value, fill = Var2)) +
  geom_bar(stat = "identity", position = "dodge")
-------------------------------------------------------------------------------------------------------
par(mfrow=c(5,2))
par(mar=c(2,2,2,1))
for (i in 1:nrow(dummy)) {
  barplot(as.numeric(dummy[i,-1]), names.arg=colnames(dummy[1,-1], main=dummy[i,1])
}
-------------------------------------------------------------------------------------------------------
las ?par barplot(bpsamplevalues, col = "#87DEE1", axes = FALSE, las = 2)
axis(side = 2, tick = FALSE, las = 1)
grid(nx = NA, ny = NULL, col = "white", lty = "solid")
-------------------------------------------------------------------------------------------------------
temp <- data.frame(temperature = c(32,33,43,37), 
                   place = paste("Place", 1:4)) temperature   place
1          32 Place 1
2          33 Place 2
3          43 Place 3
4          37 Place 4 # Create a scatterplot, with an hidden x axis
plot(temp$temperature, pch=20, ylim=c(0, 50), 
     xaxt="n", xlab="Place", ylab="Temperature")
# Plot the axis separately
axis(1, at=1:4, labels=temp$place) barplot(temp$temperature, names.arg=rownames(temp$place))
-------------------------------------------------------------------------------------------------------
# your variable
 fact <- as.factor(c('a','a','b'))
 # 
 b <- plot(fact)
 text(x=b,y=c(table(fact)), label = c(table(fact)),xpd=TRUE,col='blue') plot.factor plot.factor <- function(x ,..., label=TRUE) { 

  cc <- table(x)
  b <- barplot(cc,...)
  if (label){
    text(x = b, y = c(cc), label = c(cc), xpd = TRUE, col = 'blue')
  } 
return(invisible(b))
}


# Then

plot(fact) 
# would produce the same result
-------------------------------------------------------------------------------------------------------
las par(mai=c(1,2,1,1))
barplot(data$PV,main="Page Views", horiz=TRUE,names.arg=names,las=1)
-------------------------------------------------------------------------------------------------------
barplot(dt$obs,dt$year) jpeg
-------------------------------------------------------------------------------------------------------
##Generate some data
heights = runif(15)
heights = heights/sum(heights)
dd = data.frame(heights, type=1:3)
m_heights = tapply(dd$heights, dd$type, mean) ##rep(0, 5) is used to pad
h = c(rep(0,5), heights[1:5], rep(0,5), heights[6:10], rep(0,5), heights[11:15])
barplot(m_heights, width=1, space=1,  ylim=c(0, max(dd$heights)), xlim=c(0, 6))
barplot(h, width=0.2,space=0,add=T,  col="white", border=NULL) plot(dd$type, dd$heights) points(1:3, m_heights, col=2, pch="X")
-------------------------------------------------------------------------------------------------------
barplot(xtabs(~ Improved + Treatment, data = Arthritis))
-------------------------------------------------------------------------------------------------------
xpd barplot(LR50,ylim = c(424,426.5),xpd=FALSE)
axis(1,at=c(0,10),pos=424)
-------------------------------------------------------------------------------------------------------
tmp <- table(msleep$order)
barplot(tmp, col='black', las=3)
abline(h=seq(5, max(tmp), by=5), col='white', lwd=2)
-------------------------------------------------------------------------------------------------------
# create positions for tick marks, one more than number of bars
at_tick <- seq_len(length(count) + 1)

# plot without axes
barplot(count, space = 0, axes = FALSE) 

# add y-axis
axis(side = 2, pos = -0.2)

# add x-axis with offset positions, with ticks, but without labels.
axis(side = 1, at = at_tick - 1, labels = FALSE)

# add x-axis with centered position, with labels, but without ticks.
axis(side = 1, at = seq_along(count) - 0.5, tick = FALSE, labels = xval)
-------------------------------------------------------------------------------------------------------
ggplot2 barplot #turn `data$date` to actual date
data$date <- as.Date(data$date, format = "%Y%m%d")

#sort by date
data <- data[order(data$date),]

#`space` argument of barplot; 
#to group together same dates based on their difference in days
#see ?diff.Date
space. <- diff(data$date) + 0.5
space. <- c(space.[1], space.)

#plot no's
barplot(data$perc_no, names.arg = paste0(data$date, "\n", data$ID), cex.names = 0.7, ylim = c(range(c(data$perc_yes, data$perc_no))),col = rgb(1,0,0,1/3), space = space.)

#plot yes'
barplot(data$perc_yes, col = rgb(0,0,1,1/3), , space = space., add = T)
-------------------------------------------------------------------------------------------------------
T' Tc plot(0:length(Tc)*2, c(Tc, tail(Tc,1)), type="s") tail plot(seq(1, 2*length(Tc), length.out=length(Tc)+1), c(Tc, tail(Tc,1)), type="s") barplot(Tc, width=2, space=0)
lines(seq(Tb)-.5, Tb, type="b", lwd=2)
-------------------------------------------------------------------------------------------------------
factor levels df$Q1_fac <- factor(df$Q1, levels = c("30 min", "1 hour",  "2 hours", "3+ hours"))

tt <- table(df$Q1_fac)
tt
# Q1_fac
# 30 min   1 hour  2 hours 3+ hours 
#      2        4        3        4    

barplot(tt)
-------------------------------------------------------------------------------------------------------
brkvec <- c (2.5 , 5.0 , 7.5, 10.0, 12.5, 15.0, 20.0, 25.0, 35.0, 50.0, 
             Inf )
dat <- c (6.6 ,12.5 ,15.2 ,16.6 ,15.8 ,11.0 ,13.1 ,4.6 ,3.0 ,1.1 ,0.5 )

hist (dat , breaks=brkvec )
## Error in hist.default(dat, breaks = brkvec) : 
##     some 'x' not counted; maybe 'breaks' do not span range of 'x' brkvec <- c(0,brkvec)
hist(dat, brkvec) ## Error in plot.window(xlim, ylim, "") : need finite 'xlim' values brkvec2 <- brkvec
brkvec2[brkvec2==Inf] <- max(brkvec2[is.finite(brkvec2)])+1
hist(dat,breaks=brkvec2,col="gray",freq=FALSE,axes=FALSE)
par(las=1,bty="l") ## cosmetic
axis(side=2)
axis(side=1,at=brkvec2,labels=brkvec) tt <- table(cut(dat,brkvec))
barplot(tt,names=names(tt)) (50,Inf]
-------------------------------------------------------------------------------------------------------
barplot(height=c(1,1), ylab=expression(bold(paste("org.", cm^bold("-2"))))) paste plot(1,1, xlab=expression(bold(Grain~yield~~"(ton."*ha^"-1"*")"))) lab
-------------------------------------------------------------------------------------------------------
barplot x <- barplot() x <- barplot(result$modularity, ...)
arrows(x,CI.dn,x,CI.up,code=3,length=0.06,angle=90,col='black')
-------------------------------------------------------------------------------------------------------
d plot plot.factor barplot(table(d)) barplot p <- plot(d, xaxt="n")
axis(side=1, at=p, labels=Occs, las=3, cex.axis=1) #, cex.axis=0.35
-------------------------------------------------------------------------------------------------------
df xaxt = "n" gap.barplot ?par xaxt: A character which specifies the x axis type. Specifying "n" suppresses plotting of the axis. axis labels at tick = FALSE mtext library(plotrix)
par(mar=c(6,6,5,2))

gap.barplot(df$Conc, gap = c(2,1),xlab ="Samples", ylab ="", main = "C ", las = 2,xlim = c(0, 4), ytics = c(0, 1), cex.lab = 1.5,xaxt = "n")

axis(side = 1, at = seq_along(df$Sample), labels = df$Sample, tick = FALSE)
mtext("C Concentration (pg/mL)", side = 2, line = 4)
-------------------------------------------------------------------------------------------------------
barplot(hmatrix, beside = TRUE, horiz = TRUE, xlab = "Volume", ylab = "")
axis(side = 2, at = seq_along(hmatrix) + 0.5, labels = vol$Adjusted, las = 2)
mtext(text = "Price", side = 2, line = 4)
-------------------------------------------------------------------------------------------------------
las barplot(....,las=2)
-------------------------------------------------------------------------------------------------------
pie(c(colSums(m1)[1],colSums(m2)[1])) barplot(c(colSums(m1),colSums(m2)), col=c(rep(1,ncol(m1)),rep(2,ncol(m1)))) #get col sums
m1_sums <- colSums(m1)
m2_sums <- colSums(m2)
#make negatives zero
m1_sums[m1_sums<0] <- 0
m2_sums[m2_sums<0] <- 0
#pie
par(mfrow = c(1,2))
pie(m1_sums,main="m1 - colSums")
pie(m2_sums,main="m2 - colSums")
-------------------------------------------------------------------------------------------------------
gap.barplot library(plotrix)
gap.barplot(vec,gap=c(-0.12,-0.04),xlab="Index",ytics=c(-0.04,-0.02,0), ylab="",main="Barplot with gap", horiz=TRUE) gap ytics
-------------------------------------------------------------------------------------------------------
df barplot(df$Number[order(df$Bin)]) barplot order
-------------------------------------------------------------------------------------------------------


barplot(cbind(unlist(df[1, 1:3]), unlist(df[1, 4:6])), beside=TRUE) dput()
-------------------------------------------------------------------------------------------------------
graphs figure > data(mtcars)
# par(mfrow=c(row, col))  and "row" is the number of plots you put in a row and same for "col"
> par(mfrow=c(1,2))
> barplot(mtcars$mpg)
> boxplot(mtcars$mpg ~ as.factor(mtcars$cyl))
-------------------------------------------------------------------------------------------------------
barplot(matrix(c(table(df$teacher), table(df$student)), ncol=2), col=c('red', 'blue'),  names.arg=c('teacher', 'student'), legend.text=c('y', 'n'))
-------------------------------------------------------------------------------------------------------
barplot data.frame matrix vector data.frame x <- as.matrix(df[-1])   ## Drop the first column since it's a character vector
rownames(x) <- df[, 1]   ## Add the first column back in as the rownames
barplot(t(x))            ## Transpose the new matrix and plot it
-------------------------------------------------------------------------------------------------------
value <- sample(c(1, 2, NA), 10, replace = TRUE)
value
# [1] NA NA  2 NA  2  2  1  2 NA NA

mm <- matrix(table(value, exclude = NULL))
bb <- barplot(mm)

text(x = bb, y = cumsum(mm) - mm/2, labels = c(1, 2, "NA"), col = c("white", "black", "black"))
-------------------------------------------------------------------------------------------------------
barplot(table(new1$year)) hist breaks ?hist
-------------------------------------------------------------------------------------------------------
a <- c("I don't feel competent enough to solve problems in R", "I don't feel competent enough to solve problems in R")

# Core wrapping function
wrap.it <- function(x, len)
{ 
  sapply(x, function(y) paste(strwrap(y, len), 
                              collapse = "\n"), 
         USE.NAMES = FALSE)
}


# Call this function with a list or vector
wrap.labels <- function(x, len)
{
  if (is.list(x))
  {
    lapply(x, wrap.it, len)
  } else {
    wrap.it(x, len)
  }
} > wrap.labels(a, 10)
[1] "I don't\nfeel\ncompetent\nenough to\nsolve\nproblems\nin R"
[2] "I don't\nfeel\ncompetent\nenough to\nsolve\nproblems\nin R" > wrap.labels(a, 25)
[1] "I don't feel competent\nenough to solve problems\nin R"
[2] "I don't feel competent\nenough to solve problems\nin R" wr.lap <- wrap.labels(a, 10)
barplot(1:2, names.arg = wr.lap, horiz = T, las = 2, cex.names = 0.5)
-------------------------------------------------------------------------------------------------------
x <- barplot(table(mtcars$cyl), xaxt="n")
labs <- paste(names(table(mtcars$cyl)), "cylinders")
text(cex=1, x=x-.25, y=-1.25, labs, xpd=TRUE, srt=45) text(cex=.6, x=x-.25, y=-1.25, labs, xpd=TRUE, srt=45)
-------------------------------------------------------------------------------------------------------
def.par <- par(no.readonly = TRUE)

## divide device into two rows and 1 column 
## allocate figure 1  for barplot
## allocate figure 2 for barplot labels
## respect relations between widths and heights

nf <- layout(matrix(c(1,1,2,2),2,2,byrow = TRUE), c(1,3), c(3,1), TRUE)
layout.show(nf)

## barplot 
par(mar = c(0,1,1,1))
set.seed(1)
nKol <- 8  ## you can change here but more than 11 cols 
           ## the solution is not really readable
data <- matrix(sample(1:4,nKol*4,rep=TRUE),ncol=nKol)
xx <- barplot(data, beside=TRUE,col=c("darkred","red","grey20","grey40"))

## labels , create d ummy plot for sacles
par(mar = c(1,1,0,1))
plot(seq_len(length(xx)),rep(1,length(xx)),type='n',axes=FALSE)
## Create some text labels 
labels <- paste("Label", seq_len(ncol(xx)), sep = " ")
## Plot text labels with some rotation at the top of the current figure
text(seq_len(length(xx)),rep(1.4,length(xx)), srt = 90, adj = 1,
     labels = labels, xpd = TRUE,cex=0.8,srt=60,
     col=c("darkred","red","grey20","grey40"))

par(def.par)  #- reset to default
-------------------------------------------------------------------------------------------------------
table > tab <- table(values)
values
1 2 3 4 5 6 7 
1 2 2 1 1 2 1 > as.data.frame(tab)
  values Freq
1      1    1
2      2    2
3      3    2
4      4    1
5      5    1
6      6    2
7      7    1 hist(values)  # histogram of `values`
plot(tab)     # plot of `tab`, table of frequencies
barplot(tab)  # plot of `tab`, table of frequencies
-------------------------------------------------------------------------------------------------------
bp <- barplot(rbind(w1$normal, w1$merges), main="Playing with R", xlab="Who", names.arg=rep("",4), col=c("blue", "red"), ylim = c(0,30))
text(bp, rbind(w1$Commits), labels = titles, pos = 3, cex = 0.75)
axis(1, at=bp, labels= parse(text= 
                     gsub("\\s", '~', paste0(c("bold(", "", "italic(", ""),  
                                             rownames(w1), 
                                             c(    ")", "",       ")", "")
                          )                 )
             )          ) expression bquote substitute
-------------------------------------------------------------------------------------------------------
bquote do.call # the order in which you want the "bolding"
 xx <- expression(bold(.(x)), italic(.(x)), .(x), .(x))
 # a list of lists containing the information for bquote
 xL <- lapply(rownames(w1), function(x) list(x=x))
 # using Map and do.call and as.expression to create the list of expressions
 labs <- as.expression(Map(function(expr,where) {do.call(bquote, list(expr,where))},
   expr = xx, where =xL))

bp <- barplot(rbind(w1$normal, w1$merges), main="Playing with R", xlab="Who", names.arg=rep("",4), col=c("blue", "red"), ylim = c(0,30))
text(bp, rbind(w1$Commits), labels = titles, pos = 3, cex = 0.75)
axis(1, at=bp, labels= labs) substitute xs <- expression(bold(x), italic(x), x, x)
labs <- Map(function(expr,where) {do.call(substitute, list(expr,where))}, expr = xs, where =xL)
-------------------------------------------------------------------------------------------------------
dat <- read.table(text = "A   B   C   D   E   F    G
1 480 780 431 295 670 360  190
2 720 350 377 255 340 615  345
3 460 480 179 560  60 735 1260
4 220 240 876 789 820 100   75", header = TRUE) barplot barplot(as.matrix(dat))
-------------------------------------------------------------------------------------------------------
a<-runif(100)
x<-rep(1,times=length(a))       # x & a same length
plot(x,a,type="p")              #type = "p" : point ggplot2 require(ggplot2)
a<-runif(100)
x<-rep(1,times=length(a))
qplot(x,a,geom="point") 
#OR
ggplot()+geom_point(aes(x,a))
-------------------------------------------------------------------------------------------------------
barplot(x,xlim = c(0,15), ylim = c(0,10))
-------------------------------------------------------------------------------------------------------
width hight png(filename="figures.png", width=800, height=200, bg="white") 
sample_var <- c(2,5,3,2,3,2,6,10,20)
barplot(sample_var)
dev.off()
-------------------------------------------------------------------------------------------------------
barplot set.seed(1)     # this will allow you to get exactly the same data
                # this generates data to use for the example plot:
sample_var <- rpois(100000, lambda=5)  
cols       <- ifelse(sample_var<=5, "black", 
                     ifelse(sample_var<=10, "green", "red"))

barplot(sample_var, col=cols, border=NA)
-------------------------------------------------------------------------------------------------------
ggplot2 sample_var <- log(runif(100000) + 1)

max.colors <- 1000
cols <- heat.colors(max.colors)

barplot(sample_var, col=cols[ max.colors - floor(max.colors * sample_var / max(sample_var)) ], border=NA)
-------------------------------------------------------------------------------------------------------
findInterval set.seed(1)
sample_var <- rpois(100000, lambda=5)  
cols   <- c("black", "green", "red") [findInterval(samplevar, c(-Inf, 5, 10, Inf) ) ]

barplot(sample_var, col=cols, border=NA)
-------------------------------------------------------------------------------------------------------
beside barplot example <- data.frame(reason_code=c(1,2,3,4),
                      num_stayed=c(60,113,212,451),
                      num_dx=c(2,3,2,6))

barplot(height=t(as.matrix(example[c("num_stayed","num_dx")])),beside=TRUE)
-------------------------------------------------------------------------------------------------------
ggplot ggplot y <- 1:6
barplot(y,col=y) aes_string(...)
-------------------------------------------------------------------------------------------------------
barplot(c(54.0, 56.7, 55.9, 59.0), ylim=c(50,60), xpd = FALSE)
box() #maybe nicer if you add this too
-------------------------------------------------------------------------------------------------------
mat <- matrix(c(14,9,7))
barplot(mat[ ,1])
axis(1, at = c(.5,1.5,3.5), labels = 1:3, tick = FALSE, las = 2)
-------------------------------------------------------------------------------------------------------
xpos <- barplot(...) par('usr') axis tmp <- barplot(scores, main="my plot", xlab="my 1000 scores", names.arg=c(""))
axis(1,at=seq(min(tmp),max(tmp),len=10),lab=1:10)
-------------------------------------------------------------------------------------------------------
scores <- sample(1000)
names(scores)<-NA
names(scores)[seq(1, 1000, 111)]<-1:10
barplot(scores, main="my plot", xlab="my 1000 scores") names(scores)[seq(1, 1000, 111)] <- 1:10 names(scores) names(scores)[1:10] seq(1, 1000, 111) names(scores)[seq(1, 1000, 111)] <-1:10 seq(10, 100, 10) length(1:10) length(seq(10, 100, 10)) length(seq(0, 100, 10)) names(scores) names(scores) <- NA names(scores)[seq(1, 1000, 99.9)]<-seq(0, 100, 10)
-------------------------------------------------------------------------------------------------------
log='y' vec <- c(6252076,  163554,  199004,   59339,   13346,   37514,   14941,    8757 ,
  18009,    9564,   29090,  212084,    9221,   27056,   51972,  131662,
   6003,   30280,    1595,    9837,   32892,   39490,    5071,   34630,
   6063,    3924,   28652,   23282,   18016,    9919,    3259,   26055,
   2693,   11050,    2047,    2845,    5911,   18121,   11186,   10678,
   1240,    2287,    1708,    4148,    3229,   33306,    2571,    1903,
  30501,    2741,    1540,    9129,    2377,    3464,    1994,    2414,
   5545,    1326,    3272,    3228,    1586,    4433,    4933,    1597,
   1436,    2324,     735,    1234,    2321,    3657,    1055,    3621,
    382,   11770,    1414,    1073,     463,    1022,    3017,    4631,
   2578,     889,    2039,     775,    3037,     600,    1938,    6973,
    833,     667,     639,    5218,     843,    1762,    4144,    4061,
    420,    1267,     619,    1174,     347,     236,    1423,   45820,
    929,    3736,     346,     325,     495,     280,     152)

barplot(vec, log='y') barplot(vec, ylim=c(0, max(vec[-1])), xpd=FALSE)
text(1, par("usr")[4], labels=vec[1], xpd=TRUE, pos=3, cex=0.8)
-------------------------------------------------------------------------------------------------------
log ?plot.default barplot(samples, log="y") ggplot
-------------------------------------------------------------------------------------------------------
plot factor x barplot barplot(table(x)) ?barplot x-axis cex.names tab <- as.ordered(sample(1:10, 100, replace = TRUE))
plot(tab, cex.axis = 0.75, cex.names = 0.75) barplot barplot(table(tab), cex.axis = 0.75, cex.names = 0.2)
-------------------------------------------------------------------------------------------------------
mat <- as.matrix(t(d[,2:3]))
colnames(mat) <- d[,1]
barplot(mat , beside=TRUE,legend.text=TRUE,args.legend=list(x=8)) d <- read.table(text="Year  Balance TotalDeposits
1   18837.44    18000
2   39313.74    36000
3   61571.47    54000
4   85765.63    72000
5   112064.68   90000
6   140651.75   108000
7   171725.89   126000
8   205503.49   144000
9   242219.73   162000
10  282130.29   180000
11  325513.06   198000",header=TRUE)
-------------------------------------------------------------------------------------------------------
# after reading in dataframe into d

m <- t(d)
barplot(m[2:3, ] , beside=TRUE, names.arg=m[1, ], col=2:3, las=1, xlab="Year")
legend("topleft", legend=c("Balance", "TotalDeposits"), fill=2:3, box.col=NA)
-------------------------------------------------------------------------------------------------------
barplot(as.matrix(data.frame(rpois(10, 2), rpois(10, 1))), beside = T) df = data.frame(x = c(1,2,3), y = c(2,3,4)) barplot(as.matrix(df), beside = T)
-------------------------------------------------------------------------------------------------------
df2 <- t(as.matrix(df))
bp <- barplot(df2,beside=TRUE,col=1:6)
mtext(rownames(df2),1,at=bp) line= las=1 barplot df2 <- t(as.matrix(df))
bp <- barplot(df2,beside=TRUE,col=1:6,axisnames=FALSE,las=1)
mtext(rownames(df2),1,at=bp,line=0.6)
mtext(colnames(df2),1,at=colMeans(bp),line=2)
-------------------------------------------------------------------------------------------------------
base points lines barplot plot par(mar=c(5,5,2,3)+0.1)
ratio<-9e6/0.14
bar.col<-'#558ED5'
vencido.col<-'#77933C'
castigos.col<-'#FE0F0F'
b<-barplot(Data$'Monto Otorgado acumulado',names.arg=Data$Month,col=bar.col,border=FALSE,main='My Plot',ylim=c(0,9e6),axes=FALSE)
lines(b,Data$'% Vencida' * ratio, col=vencido.col,lwd=2) 
points(b,Data$'% Vencida' * ratio, col=vencido.col,bg='white',pch=21) 
lines(b,Data$'% Castigos' * ratio, col=castigos.col,lwd=2)
points(b,Data$'% Castigos' * ratio, col=castigos.col,bg='white',pch=21)
left.axis.pos<-seq(0,9e6,by=1e6)
axis(2,at=left.axis.pos,labels=formatC(left.axis.pos, big.mark = ",", format = "d"),las=2)
right.axis.ticks<-0:14
axis(4,at=(right.axis.ticks/100)*ratio,labels=paste0(right.axis.ticks,'%'),las=2)
legend('topleft',legend=c('Monto Otorgado acumulado','% Vencido','% Castigos'),col=c(bar.col,vencido.col,castigos.col),lty=1,lwd=c(4,2,2),bty='n')
par(mar=c(5,4,2,2)+0.1)
-------------------------------------------------------------------------------------------------------
barplot hist hist(subset(infert, case==0)$age, freq=FALSE) age barplot table dat <- infert[infert$case==0, "education"]
barplot(table(dat)/length(dat))
-------------------------------------------------------------------------------------------------------
x <- barplot(table(mtcars$cyl), xaxt="n")
labs <- paste(names(table(mtcars$cyl)), "cylinders")
text(cex=1, x=colMeans(x)-.25, y=-1.25, labs, xpd=TRUE, srt=45)
-------------------------------------------------------------------------------------------------------
besides=T t() barplot() barplot(t(counts[1:4,]), col=c("red","lightblue","gray"), 
        beside = T, las=3, names.arg=row.names(counts)[1:4])
-------------------------------------------------------------------------------------------------------
barplot(as.matrix(r_data[c("ACT", "NT")]), main="r_data", ylab="Total", beside=TRUE) 
cbind as.matrix barplot(cbind(r_data$ACT, r_data$NT), main="r_data", ylab="Total", beside=TRUE)
-------------------------------------------------------------------------------------------------------
dat <- matrix(c(
                c(0.25,0.25,0.25,0.25),
                c(0.05,0,0.95,0),
                c(0.4,0.1,0.1,0.4)),
                nrow=4,ncol=3,byrow=FALSE,
                dimnames=list(c("A","C","G","T"),
                              c("E","S","I"))
                )

  barplot(dat,border=FALSE,beside=TRUE,col=rainbow(4),ylim=c(0,1),legend=rownames(dat),main="Plot name",xlab="State",ylab="observation")
  grid()
  box()
-------------------------------------------------------------------------------------------------------
